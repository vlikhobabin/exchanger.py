#!/usr/bin/env python3
"""
–ó–∞–≥–ª—É—à–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Python Services
"""
import time
from typing import Dict, Any
from loguru import logger
from rabbitmq_publisher import RabbitMQPublisher


class PythonServiceHandler:
    """–ó–∞–≥–ª—É—à–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ Python —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        # RabbitMQ Publisher –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.publisher = RabbitMQPublisher()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_messages": 0,
            "successful_tasks": 0,
            "failed_tasks": 0,
            "start_time": time.time(),
            "last_message_time": None,
            "sent_to_success_queue": 0,
            "failed_to_send_success": 0
        }
        
        logger.warning("üöß Python Services Handler: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ó–ê–ì–õ–£–®–ö–ê –º–æ–¥—É–ª—è Python Services")
    
    def process_message(self, message_data: Dict[str, Any], properties: Any) -> bool:
        """
        –ó–∞–≥–ª—É—à–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Python Services
        
        Args:
            message_data: –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ RabbitMQ
            properties: –°–≤–æ–π—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è RabbitMQ
            
        Returns:
            True (–∑–∞–≥–ª—É—à–∫–∞ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–ø–µ—Ö)
        """
        self.stats["total_messages"] += 1
        self.stats["last_message_time"] = time.time()
        
        task_id = message_data.get('task_id', 'unknown')
        topic = message_data.get('topic', 'unknown')
        
        logger.warning(
            f"üöß Python Services Handler (–ó–ê–ì–õ–£–®–ö–ê): "
            f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ task_id={task_id}, topic={topic}. "
            f"–ú–æ–¥—É–ª—å Python Services –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω - —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞!"
        )
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        self.stats["successful_tasks"] += 1
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Python Service
        mock_response = {
            "result": {
                "service": {
                    "id": f"mock-py-{task_id}",
                    "status": "executed"
                }
            },
            "success": True
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å
        success_sent = self._send_success_message(message_data, mock_response, "python-services.queue")
        if success_sent:
            self.stats["sent_to_success_queue"] += 1
        else:
            self.stats["failed_to_send_success"] += 1
            logger.warning("üöß Python Services Handler: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        return True
    
    def _send_success_message(self, original_message: Dict[str, Any], 
                             mock_response: Dict[str, Any], original_queue: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ (stub)
        
        Args:
            original_message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ RabbitMQ
            mock_response: –ò–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Python Service
            original_queue: –ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if not self.publisher.is_connected():
                if not self.publisher.connect():
                    logger.error("üöß Python Services Handler: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RabbitMQ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    return False
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ publisher
            success = self.publisher.publish_success_message(
                original_queue=original_queue,
                original_message=original_message, 
                response_data=mock_response
            )
            
            if success:
                service_id = mock_response.get('result', {}).get('service', {}).get('id', 'unknown')
                logger.info(f"üöß Python Services Handler: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ {service_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            return success
            
        except Exception as e:
            logger.error(f"üöß Python Services Handler: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        current_time = time.time()
        uptime = current_time - self.stats["start_time"]
        
        return {
            **self.stats,
            "uptime_seconds": uptime,
            "success_rate": (
                self.stats["successful_tasks"] / self.stats["total_messages"] 
                if self.stats["total_messages"] > 0 else 0
            ),
            "success_queue_rate": (
                self.stats["sent_to_success_queue"] / self.stats["successful_tasks"] * 100
                if self.stats["successful_tasks"] > 0 else 0
            ),
            "messages_per_minute": (
                self.stats["total_messages"] / (uptime / 60) 
                if uptime > 0 else 0
            ),
            "handler_type": "stub",
            "system": "Python Services",
            "publisher_stats": self.publisher.get_stats()
        }
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
        try:
            if hasattr(self, 'publisher') and self.publisher:
                self.publisher.disconnect()
                logger.info("üöß Python Services Handler: Publisher –æ—Ç–∫–ª—é—á–µ–Ω –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤")
        except Exception as e:
            logger.error(f"üöß Python Services Handler: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}") 