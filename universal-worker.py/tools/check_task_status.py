#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –≤ Camunda
"""

import sys
import os
import json
import requests
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import camunda_config

def check_task_status(task_id: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –≤ Camunda"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {task_id} –≤ Camunda")
    print("=" * 60)
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL
        base_url = camunda_config.base_url.rstrip('/')
        if base_url.endswith('/engine-rest'):
            api_base_url = base_url
        else:
            api_base_url = f"{base_url}/engine-rest"
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        auth = None
        if camunda_config.auth_enabled:
            auth = (camunda_config.auth_username, camunda_config.auth_password)
            print(f"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {camunda_config.auth_username}")
        else:
            print("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        
        print(f"üåê Camunda URL: {api_base_url}")
        print()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á—É –≤ External Tasks
        print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ External Tasks...")
        url = f"{api_base_url}/external-task/{task_id}"
        
        try:
            response = requests.get(url, auth=auth, timeout=10)
            print(f"   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                task_data = response.json()
                print("   ‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ External Tasks")
                print(f"   üìù Worker ID: {task_data.get('workerId', 'N/A')}")
                print(f"   üìù Topic: {task_data.get('topicName', 'N/A')}")
                print(f"   üìù Process Instance: {task_data.get('processInstanceId', 'N/A')}")
                print(f"   üìù Activity ID: {task_data.get('activityId', 'N/A')}")
                print(f"   üìù Lock Expiration: {task_data.get('lockExpirationTime', 'N/A')}")
                print(f"   üìù Retries: {task_data.get('retries', 'N/A')}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'variables' in task_data and task_data['variables']:
                    print(f"   üìù –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {json.dumps(task_data['variables'], ensure_ascii=False, indent=6)}")
                
            elif response.status_code == 404:
                print("   ‚ùå –ó–∞–¥–∞—á–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ External Tasks")
                print("   üí° –í–æ–∑–º–æ–∂–Ω–æ –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                
        except requests.exceptions.Timeout:
            print("   ‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Camunda")
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞: {e}")
        
        print()
        
        # 2. –ò—â–µ–º –∑–∞–¥–∞—á—É –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞
        print("2Ô∏è‚É£ –ü–æ–∏—Å–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö...")
        url = f"{api_base_url}/external-task"
        params = {"processInstanceId": None}  # –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–Ω–∞—á–∞–ª–∞
        
        try:
            response = requests.get(url, auth=auth, timeout=10, params={})
            print(f"   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                tasks = response.json()
                print(f"   üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö External Tasks: {len(tasks)}")
                
                # –ò—â–µ–º –Ω–∞—à—É –∑–∞–¥–∞—á—É
                found_task = None
                for task in tasks:
                    if task.get('id') == task_id:
                        found_task = task
                        break
                
                if found_task:
                    print(f"   ‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
                else:
                    print(f"   ‚ùå –ó–∞–¥–∞—á–∞ {task_id} –ù–ï –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
                    
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ process instance
                print(f"\n   üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5):")
                for i, task in enumerate(tasks[:5]):
                    print(f"      {i+1}. ID: {task.get('id')}")
                    print(f"         Topic: {task.get('topicName')}")
                    print(f"         Process: {task.get('processInstanceId')}")
                    print(f"         Activity: {task.get('activityId')}")
                    print()
                
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞: {e}")
        
        print()
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        print("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏...")
        url = f"{api_base_url}/history/external-task-log"
        params = {"externalTaskId": task_id}
        
        try:
            response = requests.get(url, auth=auth, timeout=10, params=params)
            print(f"   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                history = response.json()
                print(f"   üìä –ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(history)}")
                
                for i, record in enumerate(history):
                    print(f"   üìù –ó–∞–ø–∏—Å—å {i+1}:")
                    print(f"      –í—Ä–µ–º—è: {record.get('timestamp', 'N/A')}")
                    print(f"      –°–æ—Å—Ç–æ—è–Ω–∏–µ: {record.get('state', 'N/A')}")
                    print(f"      –û—à–∏–±–∫–∞: {record.get('errorMessage', 'N/A')}")
                    print()
                    
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞: {e}")
            
    except Exception as e:
        print(f"üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) != 2:
        print("üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python check_task_status.py <task_id>")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python check_task_status.py fb57c8d1-57d5-11f0-a3a6-00b436387543")
        print("  python check_task_status.py bae9056d-57f6-11f0-a3a6-00b436387543")
        return
    
    task_id = sys.argv[1].strip()
    check_task_status(task_id)

if __name__ == "__main__":
    main() 