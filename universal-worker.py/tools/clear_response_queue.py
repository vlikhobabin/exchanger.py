#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import sys
import os
import json
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from rabbitmq_client import RabbitMQClient
from config import rabbitmq_config

def clear_response_queue():
    """–û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    client = RabbitMQClient()
    
    try:
        if not client.connect():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RabbitMQ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        queue_info = client.get_queue_info(rabbitmq_config.responses_queue_name)
        if not queue_info:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–µ—Ä–µ–¥–∏")
            return False
        
        message_count = queue_info.get("message_count", 0)
        print(f"üìä –í –æ—á–µ—Ä–µ–¥–∏ {rabbitmq_config.responses_queue_name}: {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        if message_count == 0:
            print("‚úÖ –û—á–µ—Ä–µ–¥—å —É–∂–µ –ø—É—Å—Ç–∞")
            return True
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏
        print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏!")
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ 'yes' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è): ").lower().strip()
        
        if response not in ['yes', 'y', '–¥–∞', '–¥']:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return False
        
        # –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        print(f"\nüóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏...")
        cleared_count = 0
        
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            method_frame, header_frame, body = client.channel.basic_get(
                queue=rabbitmq_config.responses_queue_name,
                auto_ack=True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º
            )
            
            if method_frame is None:
                break  # –ù–µ—Ç –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            
            cleared_count += 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            if cleared_count % 10 == 0 or cleared_count == message_count:
                print(f"   –£–¥–∞–ª–µ–Ω–æ: {cleared_count}/{message_count}")
        
        print(f"\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {cleared_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—á–µ—Ä–µ–¥—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—É—Å—Ç–∞
        final_queue_info = client.get_queue_info(rabbitmq_config.responses_queue_name)
        if final_queue_info:
            final_count = final_queue_info.get("message_count", 0)
            if final_count == 0:
                print("‚úÖ –û—á–µ—Ä–µ–¥—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞")
            else:
                print(f"‚ö†Ô∏è –í –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª–æ—Å—å {final_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        client.disconnect()

def peek_messages(count=5):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è"""
    client = RabbitMQClient()
    
    try:
        if not client.connect():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RabbitMQ")
            return
        
        print(f"\nüëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤—ã—Ö {count} —Å–æ–æ–±—â–µ–Ω–∏–π:")
        print("=" * 50)
        
        viewed_count = 0
        
        for i in range(count):
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è
            method_frame, header_frame, body = client.channel.basic_get(
                queue=rabbitmq_config.responses_queue_name,
                auto_ack=False
            )
            
            if method_frame is None:
                print("(–±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç)")
                break
            
            viewed_count += 1
            
            try:
                message_data = json.loads(body.decode('utf-8'))
                task_id = message_data.get("original_message", {}).get("task_id", "unknown")
                status = message_data.get("processing_status", "unknown")
                
                print(f"\nüì® –°–æ–æ–±—â–µ–Ω–∏–µ #{viewed_count}:")
                print(f"   Task ID: {task_id}")
                print(f"   Status: {status}")
                print(f"   Size: {len(body)} bytes")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
                client.channel.basic_nack(
                    delivery_tag=method_frame.delivery_tag, 
                    requeue=True
                )
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ
                client.channel.basic_nack(
                    delivery_tag=method_frame.delivery_tag, 
                    requeue=True
                )
        
        if viewed_count == 0:
            print("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        client.disconnect()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–≤–µ—Ç–æ–≤ Universal Camunda Worker")
    print("=" * 60)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏")
        print("2. –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        print("3. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        
        if choice == "1":
            peek_messages()
        elif choice == "2":
            clear_response_queue()
        elif choice == "3":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

if __name__ == "__main__":
    main() 