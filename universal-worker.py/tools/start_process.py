#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ Camunda
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Camunda REST API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∫–ª—é—á—É
"""

import argparse
import json
import sys
import urllib3
from datetime import datetime
from typing import Dict, List, Optional, Any
import requests
from requests.auth import HTTPBasicAuth

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import camunda_config

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π SSL –¥–ª—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class CamundaProcessStarter:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ Camunda"""
    
    def __init__(self):
        self.base_url = camunda_config.base_url.rstrip('/')
        # –ï—Å–ª–∏ base_url —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç /engine-rest, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –µ—â–µ —Ä–∞–∑
        if self.base_url.endswith('/engine-rest'):
            self.engine_url = self.base_url
        else:
            self.engine_url = f"{self.base_url}/engine-rest"
        self.auth = None
        
        if camunda_config.auth_enabled:
            self.auth = HTTPBasicAuth(
                camunda_config.auth_username,
                camunda_config.auth_password
            )
    
    def _make_request(self, method: str, endpoint: str, data: Dict = None, params: Dict = None) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ Camunda REST API"""
        url = f"{self.engine_url}/{endpoint}"
        
        try:
            if method.upper() == 'GET':
                response = requests.get(
                    url, 
                    auth=self.auth,
                    params=params or {},
                    verify=False,
                    timeout=30
                )
            elif method.upper() == 'POST':
                response = requests.post(
                    url,
                    auth=self.auth,
                    json=data or {},
                    params=params or {},
                    verify=False,
                    timeout=30
                )
            else:
                raise ValueError(f"Unsupported HTTP method: {method}")
            
            response.raise_for_status()
            return response.json()
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
            if hasattr(e, 'response') and e.response is not None:
                try:
                    error_details = e.response.json()
                    print(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_details}")
                except:
                    print(f"   HTTP —Å—Ç–∞—Ç—É—Å: {e.response.status_code}")
                    print(f"   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text[:200]}")
            return None
    
    def get_process_definition_by_key(self, process_key: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ –∫–ª—é—á—É"""
        endpoint = f"process-definition/key/{process_key}"
        return self._make_request("GET", endpoint)
    
    def get_process_definitions_by_key(self, process_key: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ –∫–ª—é—á—É"""
        endpoint = "process-definition"
        params = {"key": process_key}
        definitions = self._make_request("GET", endpoint, params=params)
        return definitions or []
    
    def start_process_by_key(self, process_key: str, variables: Dict[str, Any] = None, 
                           business_key: str = None, version: str = None) -> Optional[Dict]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ –∫–ª—é—á—É"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —É–∫–∞–∑–∞–Ω–∞ –ª–∏ –≤–µ—Ä—Å–∏—è
        if version:
            endpoint = f"process-definition/key/{process_key}/version/{version}/start"
        else:
            endpoint = f"process-definition/key/{process_key}/start"
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        start_data = {}
        
        if variables:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç Camunda
            camunda_variables = {}
            for key, value in variables.items():
                if isinstance(value, bool):
                    camunda_variables[key] = {"value": value, "type": "Boolean"}
                elif isinstance(value, int):
                    camunda_variables[key] = {"value": value, "type": "Integer"}
                elif isinstance(value, float):
                    camunda_variables[key] = {"value": value, "type": "Double"}
                elif isinstance(value, str):
                    camunda_variables[key] = {"value": value, "type": "String"}
                elif isinstance(value, dict) or isinstance(value, list):
                    camunda_variables[key] = {"value": json.dumps(value), "type": "Json"}
                else:
                    camunda_variables[key] = {"value": str(value), "type": "String"}
            
            start_data["variables"] = camunda_variables
        
        if business_key:
            start_data["businessKey"] = business_key
        
        return self._make_request("POST", endpoint, start_data)
    
    def get_process_instance(self, instance_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫–∑–µ–º–ø–ª—è—Ä–µ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        endpoint = f"process-instance/{instance_id}"
        return self._make_request("GET", endpoint)


def parse_variables(variables_str: str) -> Dict[str, Any]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    if not variables_str:
        return {}
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–∫ JSON
        return json.loads(variables_str)
    except json.JSONDecodeError:
        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∫ key=value –ø–∞—Ä—ã, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏
        variables = {}
        pairs = variables_str.split(',')
        
        for pair in pairs:
            if '=' not in pair:
                continue
            
            key, value = pair.split('=', 1)
            key = key.strip()
            value = value.strip()
            
            # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–Ω–∞—á–µ–Ω–∏—è
            if value.lower() in ('true', 'false'):
                variables[key] = value.lower() == 'true'
            elif value.isdigit():
                variables[key] = int(value)
            elif value.replace('.', '', 1).isdigit():
                variables[key] = float(value)
            elif value.startswith('{') or value.startswith('['):
                try:
                    variables[key] = json.loads(value)
                except:
                    variables[key] = value
            else:
                variables[key] = value
        
        return variables


def print_process_definition_info(definition: Dict):
    """–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    print("\n" + "="*80)
    print("üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–¶–ï–°–°–ï")
    print("="*80)
    
    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {definition.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
    print(f"–ö–ª—é—á: {definition.get('key')}")
    print(f"ID: {definition.get('id')}")
    print(f"–í–µ—Ä—Å–∏—è: {definition.get('version')}")
    print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {definition.get('category', 'N/A')}")
    print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {definition.get('description', 'N/A')}")
    print(f"Deployment ID: {definition.get('deploymentId')}")
    print(f"–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'–î–∞' if definition.get('suspended') else '–ù–µ—Ç'}")
    
    if definition.get('versionTag'):
        print(f"–¢–µ–≥ –≤–µ—Ä—Å–∏–∏: {definition.get('versionTag')}")


def print_process_instance_info(instance: Dict):
    """–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    print("\n" + "="*80)
    print("üöÄ –≠–ö–ó–ï–ú–ü–õ–Ø–† –ü–†–û–¶–ï–°–°–ê –°–û–ó–î–ê–ù")
    print("="*80)
    
    print(f"ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: {instance.get('id')}")
    print(f"Business Key: {instance.get('businessKey', 'N/A')}")
    print(f"Process Definition ID: {instance.get('definitionId')}")
    print(f"Case Instance ID: {instance.get('caseInstanceId', 'N/A')}")
    print(f"–ó–∞–≤–µ—Ä—à–µ–Ω: {'–î–∞' if instance.get('ended') else '–ù–µ—Ç'}")
    print(f"–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'–î–∞' if instance.get('suspended') else '–ù–µ—Ç'}")
    print(f"Tenant ID: {instance.get('tenantId', 'N/A')}")
    
    # –°—Å—ã–ª–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    base_url = camunda_config.base_url
    print(f"\nüîó –°—Å—ã–ª–∫–∏:")
    print(f"Cockpit: {base_url}/camunda/app/cockpit/default/#/process-instance/{instance.get('id')}")
    print(f"Tasklist: {base_url}/camunda/app/tasklist/default/")


def list_process_versions(service: CamundaProcessStarter, process_key: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    print(f"\nüîç –ü–æ–∏—Å–∫ –≤–µ—Ä—Å–∏–π –ø—Ä–æ—Ü–µ—Å—Å–∞ '{process_key}'...")
    
    definitions = service.get_process_definitions_by_key(process_key)
    
    if not definitions:
        print(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å –∫–ª—é—á–æ–º '{process_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ –≤–µ—Ä—Å–∏–π: {len(definitions)}")
    print("="*80)
    
    for i, definition in enumerate(sorted(definitions, key=lambda x: x.get('version', 0), reverse=True), 1):
        print(f"\n{i}. –í–µ—Ä—Å–∏—è {definition.get('version')}")
        print(f"   ID: {definition.get('id')}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {definition.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        print(f"   Deployment ID: {definition.get('deploymentId')}")
        print(f"   –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'–î–∞' if definition.get('suspended') else '–ù–µ—Ç'}")
        
        if definition.get('versionTag'):
            print(f"   –¢–µ–≥ –≤–µ—Ä—Å–∏–∏: {definition.get('versionTag')}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ Camunda",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  python start_process.py TestProcess

  # –ó–∞–ø—É—Å–∫ —Å business key
  python start_process.py TestProcess --business-key "ORDER-123"

  # –ó–∞–ø—É—Å–∫ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ (JSON —Ñ–æ—Ä–º–∞—Ç)
  python start_process.py TestProcess --variables '{"userName": "John", "amount": 100, "approved": true}'

  # –ó–∞–ø—É—Å–∫ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ (key=value —Ñ–æ—Ä–º–∞—Ç)
  python start_process.py TestProcess --variables "userName=John,amount=100,approved=true"

  # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
  python start_process.py TestProcess --version 2 --variables "userName=Jane"

  # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞
  python start_process.py TestProcess --info

  # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
  python start_process.py TestProcess --list-versions

–¢–∏–ø—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:
  - –°—Ç—Ä–æ–∫–∏: "userName=John"
  - –ß–∏—Å–ª–∞: "amount=100" 
  - –ë—É–ª–µ–≤—ã: "approved=true"
  - JSON: "data={\"key\": \"value\"}"
        """
    )
    
    parser.add_argument('process_key', 
                       help='–ö–ª—é—á –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, TestProcess)')
    parser.add_argument('--variables', '-v',
                       help='–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ key=value –ø–∞—Ä—ã')
    parser.add_argument('--business-key', '-b',
                       help='Business key –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞')
    parser.add_argument('--version',
                       help='–í–µ—Ä—Å–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ—Å–ª–µ–¥–Ω—è—è)')
    parser.add_argument('--info', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞')
    parser.add_argument('--list-versions', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞')
    parser.add_argument('--dry-run', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞')
    
    args = parser.parse_args()
    
    try:
        service = CamundaProcessStarter()
        
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Camunda: {service.base_url}")
        print(f"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if service.auth else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
        if args.list_versions:
            list_process_versions(service, args.process_key)
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        if args.version:
            print(f"üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ '{args.process_key}' –≤–µ—Ä—Å–∏–∏ {args.version}...")
            endpoint = f"process-definition/key/{args.process_key}/version/{args.version}"
            definition = service._make_request("GET", endpoint)
        else:
            print(f"üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ '{args.process_key}'...")
            definition = service.get_process_definition_by_key(args.process_key)
        
        if not definition:
            print(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å –∫–ª—é—á–æ–º '{args.process_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:")
            print("python camunda_processes.py --definitions")
            sys.exit(1)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        print_process_definition_info(definition)
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –≤—ã—Ö–æ–¥–∏–º
        if args.info:
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        if definition.get('suspended'):
            print(f"\n‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å.")
            response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
            if response.lower() != 'y':
                print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        variables = {}
        if args.variables:
            try:
                variables = parse_variables(args.variables)
                print(f"\nüìù –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
                for key, value in variables.items():
                    print(f"   {key}: {value} ({type(value).__name__})")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
                print("–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: 'userName=John,amount=100' –∏–ª–∏ '{\"userName\": \"John\"}'")
                sys.exit(1)
        
        # Business key
        if args.business_key:
            print(f"\nüîë Business Key: {args.business_key}")
        
        # Dry run - –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if args.dry_run:
            print(f"\nüß™ DRY RUN - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:")
            start_data = {}
            if variables:
                start_data["variables"] = variables
            if args.business_key:
                start_data["businessKey"] = args.business_key
            print(json.dumps(start_data, indent=2, ensure_ascii=False))
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
        print(f"\nüöÄ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞ '{args.process_key}'")
        if not args.variables and not args.business_key:
            response = input("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å? (Y/n): ")
            if response.lower() == 'n':
                print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
        print(f"\n‚è≥ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
        instance = service.start_process_by_key(
            args.process_key, 
            variables=variables,
            business_key=args.business_key,
            version=args.version
        )
        
        if not instance:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å")
            sys.exit(1)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
        print_process_instance_info(instance)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
        instance_info = service.get_process_instance(instance.get('id'))
        if instance_info and instance_info.get('ended'):
            print(f"\nüí° –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)")
        else:
            print(f"\nüí° –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ Camunda Cockpit")
        
        print(f"\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 