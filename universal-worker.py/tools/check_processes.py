#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ Camunda
"""

import sys
import os
import json
import requests
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import camunda_config

def get_camunda_url():
    base_url = camunda_config.base_url.rstrip('/')
    if base_url.endswith('/engine-rest'):
        return base_url
    else:
        return f"{base_url}/engine-rest"

def get_camunda_auth():
    if camunda_config.auth_enabled:
        return (camunda_config.auth_username, camunda_config.auth_password)
    return None

def make_request(method, url, **kwargs):
    try:
        auth = get_camunda_auth()
        response = requests.request(method, url, auth=auth, timeout=30, **kwargs)
        return response
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def check_process_definitions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    print("üìã –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–†–û–¶–ï–°–°–û–í")
    print("-" * 50)
    
    url = f"{get_camunda_url()}/process-definition"
    params = {"key": "TestProcess"}
    
    response = make_request("GET", url, params=params)
    if not response or response.status_code != 200:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        return
    
    definitions = response.json()
    print(f"–ù–∞–π–¥–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π TestProcess: {len(definitions)}")
    
    for definition in definitions:
        print(f"  üìÑ Version {definition.get('version')}: {definition.get('id')}")
        print(f"     Deployed: {definition.get('deploymentTime')}")
        print(f"     Resource: {definition.get('resource')}")
        print()

def check_process_instances():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    print("üîÑ –≠–ö–ó–ï–ú–ü–õ–Ø–†–´ –ü–†–û–¶–ï–°–°–û–í")
    print("-" * 50)
    
    url = f"{get_camunda_url()}/process-instance"
    params = {"processDefinitionKey": "TestProcess"}
    
    response = make_request("GET", url, params=params)
    if not response or response.status_code != 200:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        return
    
    instances = response.json()
    print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ TestProcess: {len(instances)}")
    
    for instance in instances:
        print(f"  üîÑ Instance: {instance.get('id')}")
        print(f"     Business Key: {instance.get('businessKey')}")
        print(f"     Definition: {instance.get('definitionId')}")
        print(f"     Started: {instance.get('startTime')}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activities_url = f"{get_camunda_url()}/process-instance/{instance.get('id')}/activity-instances"
        act_response = make_request("GET", activities_url)
        
        if act_response and act_response.status_code == 200:
            activities = act_response.json()
            print(f"     –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
            
            def print_activities(activities_list, level=0):
                indent = "       " + "  " * level
                for activity in activities_list:
                    print(f"{indent}üîß {activity.get('activityId')} ({activity.get('activityType')})")
                    if 'childActivityInstances' in activity:
                        print_activities(activity['childActivityInstances'], level + 1)
            
            if 'childActivityInstances' in activities:
                print_activities(activities['childActivityInstances'])
        print()

def check_external_tasks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ External Tasks"""
    print("üîß EXTERNAL TASKS")
    print("-" * 50)
    
    url = f"{get_camunda_url()}/external-task"
    
    response = make_request("GET", url)
    if not response or response.status_code != 200:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å External Tasks")
        return
    
    tasks = response.json()
    print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö External Tasks: {len(tasks)}")
    
    for task in tasks:
        print(f"  üîß Task: {task.get('id')}")
        print(f"     Topic: {task.get('topicName')}")
        print(f"     Activity: {task.get('activityId')}")
        print(f"     Process Instance: {task.get('processInstanceId')}")
        print(f"     Worker ID: {task.get('workerId')}")
        print(f"     Lock Expiration: {task.get('lockExpirationTime')}")
        
        variables = task.get('variables', {})
        if variables:
            print(f"     Variables: {list(variables.keys())}")
        print()

def start_new_process():
    """–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ TestProcess"""
    print("üöÄ –ó–ê–ü–£–°–ö –ù–û–í–û–ì–û –ü–†–û–¶–ï–°–°–ê")
    print("-" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    defs_url = f"{get_camunda_url()}/process-definition"
    params = {"key": "TestProcess", "latestVersion": "true"}
    
    response = make_request("GET", defs_url, params=params)
    if not response or response.status_code != 200:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞")
        return False
    
    definitions = response.json()
    if not definitions:
        print("‚ùå –ü—Ä–æ—Ü–µ—Å—Å TestProcess –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    latest_def = definitions[0]
    version = latest_def.get('version')
    def_id = latest_def.get('id')
    
    print(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ TestProcess –≤–µ—Ä—Å–∏–∏ {version}")
    print(f"Definition ID: {def_id}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    start_url = f"{get_camunda_url()}/process-definition/{def_id}/start"
    payload = {
        "variables": {
            "Input_2khodeq": {"value": "TestValue_v5", "type": "String"},
            "user": {"value": "TestUser_v5", "type": "String"}
        },
        "businessKey": f"manual-test-v{version}"
    }
    
    response = make_request("POST", start_url, json=payload)
    
    if response and response.status_code == 200:
        result = response.json()
        print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω!")
        print(f"   Instance ID: {result.get('id')}")
        print(f"   Business Key: {result.get('businessKey')}")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞")
        if response:
            print(f"   Status: {response.status_code}")
            print(f"   Response: {response.text}")
        return False

def main():
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø CAMUNDA")
    print("=" * 60)
    
    check_process_definitions()
    check_process_instances()
    check_external_tasks()
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π
    url = f"{get_camunda_url()}/process-instance"
    params = {"processDefinitionKey": "TestProcess"}
    response = make_request("GET", url, params=params)
    
    if response and response.status_code == 200:
        instances = response.json()
        if len(instances) == 0:
            print("\nüí° –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ TestProcess")
            choice = input("–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å? (y/N): ").strip().lower()
            if choice in ['y', 'yes']:
                start_new_process()
                print("\nüîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞:")
                check_process_instances()
                check_external_tasks()

if __name__ == "__main__":
    main() 