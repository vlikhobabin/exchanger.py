#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ BPMN –ø—Ä–æ—Ü–µ—Å—Å–∞ TestProcess v5
"""

import sys
import os
import json
import requests
import pika
import time
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import camunda_config, rabbitmq_config

class CleanupAndRestart:
    def __init__(self):
        self.camunda_base_url = self._get_camunda_url()
        self.auth = self._get_camunda_auth()
        
    def _get_camunda_url(self):
        base_url = camunda_config.base_url.rstrip('/')
        if base_url.endswith('/engine-rest'):
            return base_url
        else:
            return f"{base_url}/engine-rest"
    
    def _get_camunda_auth(self):
        if camunda_config.auth_enabled:
            return (camunda_config.auth_username, camunda_config.auth_password)
        return None
    
    def _make_request(self, method, url, **kwargs):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Camunda"""
        try:
            response = requests.request(method, url, auth=self.auth, timeout=30, **kwargs)
            return response
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {method} {url}: {e}")
            return None
    
    def cleanup_process_instances(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞ TestProcess"""
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞ TestProcess...")
        print("-" * 50)
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ TestProcess
        url = f"{self.camunda_base_url}/process-instance"
        params = {"processDefinitionKey": "TestProcess"}
        
        response = self._make_request("GET", url, params=params)
        if not response or response.status_code != 200:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞")
            return False
        
        instances = response.json()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞ TestProcess: {len(instances)}")
        
        if not instances:
            print("‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
        
        # 2. –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        deleted_count = 0
        for instance in instances:
            instance_id = instance.get('id')
            if instance_id:
                delete_url = f"{self.camunda_base_url}/process-instance/{instance_id}"
                response = self._make_request("DELETE", delete_url, 
                                            params={"reason": "Cleanup for new test"})
                
                if response and response.status_code == 204:
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä: {instance_id}")
                    deleted_count += 1
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä: {instance_id}")
        
        print(f"üìä –£–¥–∞–ª–µ–Ω–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {deleted_count}/{len(instances)}")
        return deleted_count == len(instances)
    
    def cleanup_external_tasks(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö External Tasks"""
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ External Tasks...")
        print("-" * 50)
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ External Tasks
        url = f"{self.camunda_base_url}/external-task"
        
        response = self._make_request("GET", url)
        if not response or response.status_code != 200:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ External Tasks")
            return False
        
        tasks = response.json()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ External Tasks: {len(tasks)}")
        
        if not tasks:
            print("‚úÖ External Tasks –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
        
        # 2. –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É —Å –æ—à–∏–±–∫–æ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        cleared_count = 0
        for task in tasks:
            task_id = task.get('id')
            if task_id:
                failure_url = f"{self.camunda_base_url}/external-task/{task_id}/failure"
                payload = {
                    "workerId": "cleanup-script",
                    "errorMessage": "Cleanup for new test",
                    "retries": 0,
                    "retryTimeout": 0
                }
                
                response = self._make_request("POST", failure_url, json=payload)
                
                if response and response.status_code == 204:
                    print(f"‚úÖ –û—á–∏—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task_id} (—Ç–æ–ø–∏–∫: {task.get('topicName', 'unknown')})")
                    cleared_count += 1
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É: {task_id}")
        
        print(f"üìä –û—á–∏—â–µ–Ω–æ –∑–∞–¥–∞—á: {cleared_count}/{len(tasks)}")
        return cleared_count == len(tasks)
    
    def cleanup_rabbitmq_queues(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π RabbitMQ"""
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π RabbitMQ...")
        print("-" * 50)
        
        try:
            connection = pika.BlockingConnection(
                pika.URLParameters(rabbitmq_config.connection_url)
            )
            channel = connection.channel()
            
            # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            queues_to_purge = [
                "camunda.responses.queue",
                "bitrix24.queue", 
                "openproject.queue",
                "1c.queue",
                "python-services.queue",
                "errors.camunda_tasks.queue",
                "camunda.default.queue"  # –ï—Å–ª–∏ –µ—Å—Ç—å
            ]
            
            purged_count = 0
            for queue_name in queues_to_purge:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
                    method = channel.queue_declare(queue=queue_name, passive=True)
                    message_count = method.method.message_count
                    
                    if message_count > 0:
                        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
                        channel.queue_purge(queue=queue_name)
                        print(f"‚úÖ –û—á–∏—â–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å: {queue_name} ({message_count} —Å–æ–æ–±—â–µ–Ω–∏–π)")
                        purged_count += 1
                    else:
                        print(f"‚úÖ –û—á–µ—Ä–µ–¥—å —É–∂–µ –ø—É—Å—Ç–∞: {queue_name}")
                        
                except pika.exceptions.ChannelClosedByBroker:
                    # –û—á–µ—Ä–µ–¥—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    print(f"‚ÑπÔ∏è  –û—á–µ—Ä–µ–¥—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {queue_name}")
                    # –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª
                    channel = connection.channel()
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ {queue_name}: {e}")
            
            connection.close()
            print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—á–µ—Ä–µ–¥–µ–π: {len(queues_to_purge)}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {e}")
            return False
    
    def start_new_process(self):
        """–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ TestProcess –≤–µ—Ä—Å–∏–∏ 5"""
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ TestProcess v5...")
        print("-" * 50)
        
        # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ—Ä—Å–∏–∏ 5
        url = f"{self.camunda_base_url}/process-definition"
        params = {"key": "TestProcess", "latestVersion": "true"}
        
        response = self._make_request("GET", url, params=params)
        if not response or response.status_code != 200:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞")
            return False
        
        definitions = response.json()
        if not definitions:
            print("‚ùå –ü—Ä–æ—Ü–µ—Å—Å TestProcess –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        latest_def = definitions[0]
        latest_version = latest_def.get('version', 0)
        process_def_id = latest_def.get('id')
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞: {latest_version}")
        print(f"üìã ID –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞: {process_def_id}")
        
        if latest_version < 5:
            print(f"‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è {latest_version}, –∞ –æ–∂–∏–¥–∞–ª–∞—Å—å 5")
            print("   –í–æ–∑–º–æ–∂–Ω–æ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –µ—â–µ –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞")
        
        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        start_url = f"{self.camunda_base_url}/process-definition/{process_def_id}/start"
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
        start_payload = {
            "variables": {
                "Input_2khodeq": {
                    "value": "TestInputValue_v5",
                    "type": "String"
                },
                "user": {
                    "value": "TestUser_v5",
                    "type": "String"
                }
            },
            "businessKey": f"test-process-v{latest_version}-{int(time.time())}"
        }
        
        print(f"üì§ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:")
        print(json.dumps(start_payload, ensure_ascii=False, indent=2))
        
        response = self._make_request("POST", start_url, json=start_payload)
        
        if response and response.status_code == 200:
            result = response.json()
            instance_id = result.get('id')
            business_key = result.get('businessKey')
            
            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            print(f"   Instance ID: {instance_id}")
            print(f"   Business Key: {business_key}")
            print(f"   Version: {latest_version}")
            
            return {
                "instance_id": instance_id,
                "business_key": business_key,
                "version": latest_version,
                "definition_id": process_def_id
            }
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å")
            if response:
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
    
    def verify_new_process(self, process_info):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
        print("-" * 50)
        
        if not process_info:
            return False
        
        instance_id = process_info['instance_id']
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞
        url = f"{self.camunda_base_url}/process-instance/{instance_id}"
        response = self._make_request("GET", url)
        
        if response and response.status_code == 200:
            instance = response.json()
            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω: {instance_id}")
            print(f"   Business Key: {instance.get('businessKey')}")
            print(f"   Definition ID: {instance.get('definitionId')}")
        else:
            print(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {instance_id}")
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ External Tasks
        tasks_url = f"{self.camunda_base_url}/external-task"
        params = {"processInstanceId": instance_id}
        
        response = self._make_request("GET", tasks_url, params=params)
        
        if response and response.status_code == 200:
            tasks = response.json()
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ External Tasks: {len(tasks)}")
            
            for task in tasks:
                print(f"   üîß Task ID: {task.get('id')}")
                print(f"      Topic: {task.get('topicName')}")
                print(f"      Activity: {task.get('activityId')}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å External Tasks")
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ò –ü–ï–†–ï–ó–ê–ü–£–°–ö –î–õ–Ø TESTPROCESS V5")
    print("=" * 60)
    print("üìù –¶–µ–ª—å: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ BPMN —Å —è–≤–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ Gateway")
    print("   Gateway —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç: ${result == \"ok\"} –∏ ${result != \"ok\"}")
    print()
    
    cleanup = CleanupAndRestart()
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("‚ö†Ô∏è  –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï —ç–∫–∑–µ–º–ø–ª—è—Ä—ã TestProcess –∏ –æ—á–∏—Å—Ç–∏—Ç –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/N): ").strip().lower()
    if response not in ['yes', 'y']:
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...")
    
    # 1. –û—á–∏—Å—Ç–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞
    if not cleanup.cleanup_process_instances():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞")
        return
    
    # 2. –û—á–∏—Å—Ç–∫–∞ External Tasks
    if not cleanup.cleanup_external_tasks():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å External Tasks")
        return
    
    # 3. –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π RabbitMQ
    if not cleanup.cleanup_rabbitmq_queues():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥–∏ RabbitMQ")
        return
    
    # –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
    print("\n‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏...")
    time.sleep(3)
    
    # 4. –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    process_info = cleanup.start_new_process()
    if not process_info:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å")
        return
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    if not cleanup.verify_new_process(process_info):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å")
        return
    
    print("\n" + "=" * 60)
    print("‚úÖ –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print(f"üéØ –ù–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å TestProcess v{process_info['version']} –∑–∞–ø—É—â–µ–Ω")
    print(f"üìã Instance ID: {process_info['instance_id']}")
    print()
    print("üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Universal Worker: python main.py")
    print("2. External Task –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Bitrix24")
    print("3. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ Bitrix - —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è Gateway")
    print("4. Gateway —Ç–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 'result' = \"ok\" –¥–ª—è —É—Å–ø–µ—Ö–∞")

if __name__ == "__main__":
    main() 