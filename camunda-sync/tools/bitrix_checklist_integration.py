#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–µ–∫-–ª–∏—Å—Ç–æ–≤ —Å Bitrix24 Task Handler

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
    –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è BitrixTaskHandler –∏–∑ task-creator.py –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ
    —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –≤ –∑–∞–¥–∞—á–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ checklist_parser.py

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    from bitrix_checklist_integration import BitrixChecklistIntegration
    
    integration = BitrixChecklistIntegration()
    success = integration.add_checklists_to_task(task_id, checklists_data)

–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú–ò –ú–û–î–£–õ–Ø–ú–ò:
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ task-creator.py/consumers/bitrix/config.py
    - –°–æ–≤–º–µ—Å—Ç–∏–º —Å BitrixTaskHandler 
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ –∂–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
    - checklist_parser.py –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    - task-creator.py/consumers/bitrix/config.py (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - Python 3.6+, requests
"""

import sys
import os
import json
import requests
from typing import List, Dict, Any, Optional
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç ChecklistParser –∏–∑ —Ç–æ–≥–æ –∂–µ –∫–∞—Ç–∞–ª–æ–≥–∞
try:
    from checklist_parser import ChecklistParser
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: checklist_parser.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", file=sys.stderr)
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Bitrix24
try:
    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'task-creator.py'))
    from consumers.bitrix.config import bitrix_config
    BITRIX_CONFIG_AVAILABLE = True
    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Bitrix24 –∏–∑ task-creator.py", file=sys.stderr)
except ImportError:
    BITRIX_CONFIG_AVAILABLE = False
    print(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è task-creator.py –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", file=sys.stderr)


class BitrixChecklistIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –≤ –∑–∞–¥–∞—á–∞—Ö Bitrix24"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
        if BITRIX_CONFIG_AVAILABLE:
            self.webhook_url = bitrix_config.webhook_url
            self.timeout = bitrix_config.request_timeout
        else:
            self.webhook_url = os.getenv('BITRIX_WEBHOOK_URL', '')
            self.timeout = int(os.getenv('BITRIX_REQUEST_TIMEOUT', '30'))
        
        if not self.webhook_url:
            raise ValueError("BITRIX_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü–∞—Ä—Å–µ—Ä —á–µ–∫-–ª–∏—Å—Ç–æ–≤
        self.parser = ChecklistParser()
    
    def add_checklists_to_task(self, task_id: int, checklists_data: List[Dict[str, Any]]) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–µ Bitrix24
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏ –≤ Bitrix24
            checklists_data: –°–ø–∏—Å–æ–∫ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑ checklist_parser
            
        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ —á–µ–∫-–ª–∏—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        if not checklists_data:
            print(f"‚ö†Ô∏è –ù–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–¥–∞—á—É {task_id}", file=sys.stderr)
            return True
        
        success_count = 0
        total_items = 0
        
        try:
            for checklist in checklists_data:
                checklist_name = checklist.get('name', '–ß–µ–∫-–ª–∏—Å—Ç')
                items = checklist.get('items', [])
                
                if not items:
                    continue
                
                print(f"üìã –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫-–ª–∏—Å—Ç '{checklist_name}' —Å {len(items)} –ø—É–Ω–∫—Ç–∞–º–∏ –≤ –∑–∞–¥–∞—á—É {task_id}", file=sys.stderr)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞
                for item_text in items:
                    if self._add_checklist_item(task_id, item_text):
                        success_count += 1
                    total_items += 1
            
            if success_count == total_items:
                print(f"‚úÖ –í—Å–µ —á–µ–∫-–ª–∏—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∑–∞–¥–∞—á—É {task_id}: {success_count}/{total_items}", file=sys.stderr)
                return True
            else:
                print(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ–∫-–ª–∏—Å—Ç—ã –≤ –∑–∞–¥–∞—á—É {task_id}: {success_count}/{total_items}", file=sys.stderr)
                return False
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –≤ –∑–∞–¥–∞—á—É {task_id}: {e}", file=sys.stderr)
            return False
    
    def _add_checklist_item(self, task_id: int, item_text: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ –∫ –∑–∞–¥–∞—á–µ"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
            method = 'tasks.task.checklist.add'
            params = {
                'taskId': task_id,
                'fields': {
                    'TITLE': item_text,
                    'IS_COMPLETE': 'N'
                }
            }
            
            result = self._bitrix_api_request(method, params, http_method='POST')
            
            if result:
                print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—É–Ω–∫—Ç: {item_text}", file=sys.stderr)
                return True
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞: {item_text}", file=sys.stderr)
                return False
        
        except Exception as e:
            print(f"  ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—É–Ω–∫—Ç–∞ '{item_text}': {e}", file=sys.stderr)
            return False
    
    def _bitrix_api_request(self, method: str, params: Dict[str, Any], http_method: str = 'GET') -> Optional[Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Bitrix24 API (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ checklist_parser)"""
        try:
            url = f"{self.webhook_url.rstrip('/')}/{method}.json"
            
            if http_method.upper() == 'GET':
                response = requests.get(
                    url,
                    params=params,
                    timeout=self.timeout,
                    headers={'Content-Type': 'application/json'}
                )
            else:
                response = requests.post(
                    url,
                    json=params,
                    timeout=self.timeout,
                    headers={'Content-Type': 'application/json'}
                )
            
            response.raise_for_status()
            data = response.json()
            
            if 'result' in data:
                return data['result']
            elif 'error' in data:
                error_msg = data.get('error_description', data.get('error', 'Unknown error'))
                print(f"‚ùå Bitrix24 API –æ—à–∏–±–∫–∞ ({method}): {error_msg}", file=sys.stderr)
                return None
            else:
                return data
                
        except requests.exceptions.RequestException as e:
            print(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Bitrix24 API ({method}): {e}", file=sys.stderr)
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Bitrix24 API ({method}): {e}", file=sys.stderr)
            return None
    
    def parse_and_add_checklists(self, task_id: int, assignees_json_file: str, element_id: str = None) -> bool:
        """
        –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –ø–∞—Ä—Å–∏–Ω–≥ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –∑–∞–¥–∞—á–µ
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏ –≤ Bitrix24
            assignees_json_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ (–∏ —á–µ–∫-–ª–∏—Å—Ç–∞–º–∏)
            element_id: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π element_id –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü–∞—Ä—Å–∏–º —á–µ–∫-–ª–∏—Å—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
            parsed_data = self.parser.parse_assignees_file(assignees_json_file)
            
            if not parsed_data:
                print(f"‚ö†Ô∏è –ß–µ–∫-–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ {assignees_json_file}", file=sys.stderr)
                return True  # –ù–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ element_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if element_id:
                filtered_data = [item for item in parsed_data if item.get('elementId') == element_id]
                if not filtered_data:
                    print(f"‚ö†Ô∏è –ß–µ–∫-–ª–∏—Å—Ç—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ {element_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", file=sys.stderr)
                    return True
                parsed_data = filtered_data
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —á–µ–∫-–ª–∏—Å—Ç—ã –∫ –∑–∞–¥–∞—á–µ
            total_success = True
            for element_data in parsed_data:
                checklists = element_data.get('checklists', [])
                if checklists:
                    element_name = element_data.get('elementName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç')
                    print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞: {element_name}", file=sys.stderr)
                    
                    success = self.add_checklists_to_task(task_id, checklists)
                    if not success:
                        total_success = False
            
            return total_success
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤: {e}", file=sys.stderr)
            return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def add_checklists_from_file(task_id: int, assignees_json_file: str, element_id: str = None) -> bool:
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∫ –∑–∞–¥–∞—á–µ Bitrix24
    
    Args:
        task_id: ID –∑–∞–¥–∞—á–∏ –≤ Bitrix24
        assignees_json_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ 
        element_id: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π element_id –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
    """
    try:
        integration = BitrixChecklistIntegration()
        return integration.parse_and_add_checklists(task_id, assignees_json_file, element_id)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤: {e}", file=sys.stderr)
        return False


if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if len(sys.argv) < 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python bitrix_checklist_integration.py <task_id> <assignees_json_file> [element_id]")
        print("–ü—Ä–∏–º–µ—Ä: python bitrix_checklist_integration.py 1566 assignees.json Activity_123")
        sys.exit(1)
    
    task_id = int(sys.argv[1])
    assignees_file = sys.argv[2]
    element_id = sys.argv[3] if len(sys.argv) > 3 else None
    
    print(f"üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∫ –∑–∞–¥–∞—á–µ {task_id} –∏–∑ —Ñ–∞–π–ª–∞ {assignees_file}")
    if element_id:
        print(f"   –§–∏–ª—å—Ç—Ä –ø–æ element_id: {element_id}")
    
    success = add_checklists_from_file(task_id, assignees_file, element_id)
    
    if success:
        print(f"‚úÖ –ß–µ–∫-–ª–∏—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∑–∞–¥–∞—á–µ {task_id}")
        sys.exit(0)
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∫ –∑–∞–¥–∞—á–µ {task_id}")
        sys.exit(1)
