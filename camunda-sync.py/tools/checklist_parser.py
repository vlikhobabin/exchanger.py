#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìã Checklist Parser - –ü–∞—Ä—Å–µ—Ä —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è Bitrix24

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–µ–∫-–ª–∏—Å—Ç—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π StormBPMN Activities –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Ö 
    –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤ Bitrix24. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç
    –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    python checklist_parser.py <assignees_json_file>

–ü–†–ò–ú–ï–†–´:
    # –ü–∞—Ä—Å–∏–Ω–≥ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
    python checklist_parser.py "–ü—Ä–æ—Ü–µ—Å—Å—ã –£–£. –ú–æ–¥–µ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏_assignees.json"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Bitrix24
    python checklist_parser.py assignees.json > bitrix_checklists.json

–†–ï–ó–£–õ–¨–¢–ê–¢:
    –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Bitrix24:
    {
      "elementId": "Activity_123",
      "elementName": "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", 
      "checklists": [
        {
          "name": "–ù–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞",
          "items": ["–ü—É–Ω–∫—Ç 1", "–ü—É–Ω–∫—Ç 2", ...]
        }
      ]
    }

–ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –§–û–†–ú–ê–¢–´ –í–í–û–î–ê:
    1. –ß–ï–ö–õ–ò–°–¢: –ù–∞–∑–≤–∞–Ω–∏–µ ‚Ä¢ –ü—É–Ω–∫—Ç 1 ‚Ä¢ –ü—É–Ω–∫—Ç 2 (–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô)
    2. <p>–ß–ï–ö–õ–ò–°–¢: –ù–∞–∑–≤–∞–Ω–∏–µ</p><ul><li>–ü—É–Ω–∫—Ç</li></ul> (HTML)
    3. <p>–ß–ï–ö–õ–ò–°–¢: <a href="https://bx.eg-holding.ru/tasks/task/view/1566/">—Å—Å—ã–ª–∫–∞</a></p> (Bitrix24)
    4. ** –ù–∞–∑–≤–∞–Ω–∏–µ <ul><li>–ü—É–Ω–∫—Ç</li></ul> (HTML - —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
    5. @ –ù–∞–∑–≤–∞–Ω–∏–µ [–ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã] (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
    6. # –ù–∞–∑–≤–∞–Ω–∏–µ [—Å–ø–∏—Å–∫–∏] (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
    7. ‚Äì –ù–∞–∑–≤–∞–Ω–∏–µ [—ç–ª–µ–º–µ–Ω—Ç—ã] (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)

–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø - –ó–ê–ì–†–£–ó–ö–ê –ò–ó BITRIX24:
    - –ï—Å–ª–∏ –ø–æ—Å–ª–µ "–ß–ï–ö–õ–ò–°–¢:" —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É Bitrix24, —Ç–æ —á–µ–∫-–ª–∏—Å—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞: https://bx.eg-holding.ru/.../tasks/task/view/{id}/
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ task-creator.py/consumers/bitrix/config.py
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ API –º–µ—Ç–æ–¥—ã: tasks.task.get (GET) –∏ task.checklistitem.getlist (GET)
    - –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π

–°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –ü–ê–†–°–ò–ù–ì–ê:
    - –ü—É–Ω–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –°–†–ê–ó–£ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
    - –ß–µ–∫-–ª–∏—Å—Ç—ã –±–µ–∑ –ø—É–Ω–∫—Ç–æ–≤ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è
    - –ü—É–Ω–∫—Ç—ã –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ "–ß–ï–ö–õ–ò–°–¢:" –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è
    - –ú–µ–∂–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –ø—É–Ω–∫—Ç–∞–º–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å—Ç–æ—Ä–æ–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
    - Python 3.6+
    - requests (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Bitrix24)
    - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Bitrix24 (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ task-creator.py –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
    - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ: BITRIX_WEBHOOK_URL –∏ BITRIX_REQUEST_TIMEOUT –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""

import json
import re
import html
import sys
import os
import requests
from typing import List, Dict, Any, Optional, Tuple
from pathlib import Path
from urllib.parse import urlparse, parse_qs

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Bitrix24 –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–æ–¥—É–ª—è
try:
    # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ task-creator.py –º–æ–¥—É–ª—è
    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'task-creator.py'))
    from consumers.bitrix.config import bitrix_config
    BITRIX_CONFIG_AVAILABLE = True
    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Bitrix24 –∏–∑ task-creator.py", file=sys.stderr)
except ImportError:
    BITRIX_CONFIG_AVAILABLE = False
    print(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è task-creator.py –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", file=sys.stderr)

class ChecklistParser:
    """–ü–∞—Ä—Å–µ—Ä —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è Bitrix24"""
    
    def __init__(self):
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–æ–≤
        self.header_patterns = [
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ Bitrix24
            (r'<p>–ß–ï–ö–õ–ò–°–¢:\s*<a[^>]+href=["\']([^"\']*bx\.eg-holding\.ru[^"\']*)["\'][^>]*>.*?</a></p>', 'bitrix_link'),
            (r'<p>CHECKLIST:\s*<a[^>]+href=["\']([^"\']*bx\.eg-holding\.ru[^"\']*)["\'][^>]*>.*?</a></p>', 'bitrix_link'),
            
            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç (HTML –≤–µ—Ä—Å–∏—è)
            (r'<p>–ß–ï–ö–õ–ò–°–¢:\s*([^<]+)</p>', 'optimal_html'),
            (r'<p>CHECKLIST:\s*([^<]+)</p>', 'optimal_html'),
            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç)
            (r'–ß–ï–ö–õ–ò–°–¢:\s*([^\n‚Ä¢]+)', 'optimal_text'),
            (r'CHECKLIST:\s*([^\n‚Ä¢]+)', 'optimal_text'),
            
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            (r'\*\*\s*([^<\n]+)', 'double_asterisk'),
            (r'@\s*([^<\n]+)', 'at_symbol'),
            (r'#\s*([^<\n]+)', 'hash'),
            (r'‚Äì\s*([^<\n]+)', 'dash'),
        ]
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Bitrix24 API - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if BITRIX_CONFIG_AVAILABLE:
            self.bitrix_webhook_url = bitrix_config.webhook_url
            self.bitrix_timeout = bitrix_config.request_timeout
            print(f"üîó Bitrix24 URL: {self.bitrix_webhook_url[:50]}...", file=sys.stderr)
        else:
            self.bitrix_webhook_url = os.getenv('BITRIX_WEBHOOK_URL', '')
            self.bitrix_timeout = int(os.getenv('BITRIX_REQUEST_TIMEOUT', '30'))
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—É–Ω–∫—Ç–æ–≤ —Å–ø–∏—Å–∫–æ–≤
        self.item_patterns = [
            # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –±—É–ª–ª–µ—Ç–∞–º–∏
            (r'‚Ä¢\s*([^\n‚Ä¢]+)', 'bullet'),
            
            # HTML —Å–ø–∏—Å–∫–∏
            (r'<li[^>]*>(.*?)</li>', 'html_li'),
            
            # –ü—Ä–æ—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ @ –∏ ‚Äì)
            (r'<p>([^<]+)</p>', 'paragraph'),
        ]
    
    def clean_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç HTML —Ç–µ–≥–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤"""
        if not text:
            return ""
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities
        text = html.unescape(text)
        
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
        text = re.sub(r'<[^>]+>', '', text)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = re.sub(r'\s+', ' ', text).strip()
        
        return text
    
    def extract_checklists_from_description(self, description: str) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è"""
        if not description:
            return []
        
        checklists = []
        clean_description = html.unescape(description)
        
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤
        for header_pattern, format_type in self.header_patterns:
            header_matches = list(re.finditer(header_pattern, clean_description, re.IGNORECASE | re.MULTILINE))
            
            for match in header_matches:
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ Bitrix24
                if format_type == 'bitrix_link':
                    task_url = match.group(1) if match.lastindex >= 1 else ''
                    
                    if task_url:
                        # –ü–æ–ª—É—á–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç—ã –∏–∑ Bitrix24 –∑–∞–¥–∞—á–∏ (Task ID –±—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
                        bitrix_checklists = self._get_checklists_from_bitrix_task(task_url)
                        checklists.extend(bitrix_checklists)
                    continue
                
                checklist_name = self.clean_text(match.group(1))
                if not checklist_name:
                    continue
                
                start_pos = match.end()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ (–¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ –∫–æ–Ω—Ü–∞)
                end_pos = len(clean_description)
                for next_pattern, _ in self.header_patterns:
                    next_match = re.search(next_pattern, clean_description[start_pos:], re.IGNORECASE)
                    if next_match:
                        end_pos = min(end_pos, start_pos + next_match.start())
                
                search_area = clean_description[start_pos:end_pos]
                
                # –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ø—É–Ω–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –°–†–ê–ó–£ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                items = self._extract_items_strict(search_area, format_type)
                
                if items:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—É–Ω–∫—Ç—ã
                    checklists.append({
                        'name': checklist_name,
                        'items': items,
                        'format_type': format_type,
                        'items_count': len(items)
                    })
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
        unique_checklists = []
        seen_names = set()
        for checklist in checklists:
            if checklist['name'] not in seen_names:
                unique_checklists.append(checklist)
                seen_names.add(checklist['name'])
        
        return unique_checklists
    
    def _extract_items_from_area(self, area: str, format_type: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–æ–≤ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞"""
        items = []
        
        if format_type == 'optimal_html':
            # –î–ª—è HTML —Ñ–æ—Ä–º–∞—Ç–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ –∏—â–µ–º HTML —Å–ø–∏—Å–∫–∏
            items = self._extract_html_list_items(area)
            if not items:
                items = self._extract_bullet_items(area)
            
        elif format_type == 'optimal_text':
            # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ –∏—â–µ–º –ø—É–Ω–∫—Ç—ã —Å –±—É–ª–ª–µ—Ç–∞–º–∏
            items = self._extract_bullet_items(area)
            
        elif format_type in ['double_asterisk', 'hash']:
            # –î–ª—è HTML —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º HTML —Å–ø–∏—Å–∫–∏, –ø–æ—Ç–æ–º –±—É–ª–ª–µ—Ç—ã
            items = self._extract_html_list_items(area)
            if not items:
                items = self._extract_bullet_items(area)
                
        elif format_type in ['at_symbol', 'dash']:
            # –î–ª—è @ –∏ ‚Äì —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—â–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –∏ –±—É–ª–ª–µ—Ç—ã
            items = self._extract_paragraph_items(area)
            if not items:
                items = self._extract_bullet_items(area)
        
        # –û—á–∏—â–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É–Ω–∫—Ç—ã
        clean_items = []
        for item in items:
            clean_item = self.clean_text(item)
            if clean_item and len(clean_item) > 1:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
                clean_items.append(clean_item)
        
        return clean_items[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤
    
    def _extract_items_strict(self, area: str, format_type: str) -> List[str]:
        """–°–¢–†–û–ì–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∏–¥—É—Ç –°–†–ê–ó–£ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        items = []
        
        if format_type == 'optimal_html':
            # –î–ª—è HTML: –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ–ª–∂–µ–Ω –°–†–ê–ó–£ –∏–¥—Ç–∏ <ul> —Å–ø–∏—Å–æ–∫
            items = self._extract_html_items_strict(area)
            
        elif format_type == 'optimal_text':
            # –î–ª—è —Ç–µ–∫—Å—Ç–∞: –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ–ª–∂–Ω—ã –°–†–ê–ó–£ –∏–¥—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —Å –±—É–ª–ª–µ—Ç–∞–º–∏  
            items = self._extract_text_items_strict(area)
            
        elif format_type in ['double_asterisk', 'hash']:
            # –î–ª—è —Å—Ç–∞—Ä—ã—Ö HTML —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç–æ–∂–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            items = self._extract_html_items_strict(area)
                
        elif format_type in ['at_symbol', 'dash']:
            # –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            items = self._extract_text_items_strict(area)
        
        return items
    
    def _extract_html_items_strict(self, area: str) -> List[str]:
        """–°–¢–†–û–ì–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ HTML - <ul> –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        items = []
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ
        area_stripped = area.lstrip()
        
        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –∏ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ <p>&nbsp;</p> –∏ <p></p> –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∫–æ–º
        area_cleaned = re.sub(r'^(<p>(&nbsp;|\s*)</p>\s*)*', '', area_stripped, flags=re.IGNORECASE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –æ–±–ª–∞—Å—Ç—å —Å—Ä–∞–∑—É —Å <ul> –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        ul_match = re.match(r'^<ul[^>]*>(.*?)</ul>', area_cleaned, re.DOTALL | re.IGNORECASE)
        if ul_match:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É–Ω–∫—Ç—ã –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ <ul>
            list_content = ul_match.group(1)
            li_matches = re.findall(r'<li[^>]*>(.*?)</li>', list_content, re.DOTALL)
            for li_content in li_matches:
                clean_item = self.clean_text(li_content)
                if clean_item and len(clean_item) > 1:
                    items.append(clean_item)
        
        return items[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    def _extract_text_items_strict(self, area: str) -> List[str]:
        """–°–¢–†–û–ì–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ - –±—É–ª–ª–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        items = []
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = area.strip().split('\n')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for line in lines:
            line_stripped = line.strip()
            
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if not line_stripped:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É–Ω–∫—Ç–æ–º —Å–ø–∏—Å–∫–∞
            bullet_match = re.match(r'^[‚Ä¢\-*]\s*(.+)$', line_stripped)
            if bullet_match:
                item_text = bullet_match.group(1).strip()
                if item_text:
                    items.append(item_text)
            else:
                # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–µ –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞ - –ø—Ä–µ—Ä—ã–≤–∞–µ–º (—á–µ–∫-–ª–∏—Å—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è)
                break
        
        return items[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    def _extract_task_id_from_url(self, url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Task ID –∏–∑ URL Bitrix24"""
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã URL
        patterns = [
            r'tasks/task/view/(\d+)',
            r'task/view/(\d+)',
            r'/(\d+)/?$'  # ID –≤ –∫–æ–Ω—Ü–µ URL
        ]
        
        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                return match.group(1)
        
        return None
    
    def _get_checklists_from_bitrix_task(self, task_url: str, task_id: Optional[str] = None) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∏–∑ –∑–∞–¥–∞—á–∏ Bitrix24 –ø–æ API
        –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º Task ID –∏–∑ URL –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if not task_id:
            task_id = self._extract_task_id_from_url(task_url)
        
        if not task_id:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Task ID –∏–∑ URL: {task_url}", file=sys.stderr)
            return []
        
        if not self.bitrix_webhook_url:
            print(f"‚ö†Ô∏è BITRIX_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ –∑–∞–¥–∞—á–∏ {task_id}", file=sys.stderr)
            return []
        
        try:
            print(f"üîó –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç—ã –∏–∑ –∑–∞–¥–∞—á–∏ Bitrix24: {task_id}", file=sys.stderr)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ (–∫–∞–∫ –≤ tracker.py)
            task_response = self._bitrix_api_request(
                'tasks.task.get', 
                {'taskId': int(task_id)},  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –∫–∞–∫ –≤ tracker.py
                http_method='GET'
            )
            
            if not task_response or not task_response.get('task'):
                print(f"‚ùå –ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Bitrix24", file=sys.stderr)
                return []
            
            task_data = task_response['task']
            task_title = task_data.get('title', f'–ó–∞–¥–∞—á–∞ {task_id}')
            
            # –ü–æ–ª—É—á–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç—ã –∑–∞–¥–∞—á–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞)
            print(f"üìã –ó–∞–ø—Ä–æ—Å —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}...", file=sys.stderr)
            checklist_response = self._bitrix_api_request(
                'task.checklistitem.getlist',  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
                {'taskId': int(task_id)},       # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
                http_method='GET'
            )
            
            if not checklist_response:
                print(f"‚ö†Ô∏è –ß–µ–∫-–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∑–∞–¥–∞—á–µ {task_id}", file=sys.stderr)
                return []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ
            if isinstance(checklist_response, list):
                print(f"üìù –ü–æ–ª—É—á–µ–Ω–æ {len(checklist_response)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}", file=sys.stderr)
                checklist_items = checklist_response
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∑–∞–¥–∞—á–∏ {task_id}: {type(checklist_response)}", file=sys.stderr)
                return []
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è Bitrix24: PARENT_ID –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é
            # PARENT_ID = 0 ‚Üí –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–µ–∫-–ª–∏—Å—Ç–∞
            # PARENT_ID = —á–∏—Å–ª–æ ‚Üí —ç–ª–µ–º–µ–Ω—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ —Å —ç—Ç–∏–º —Ä–æ–¥–∏—Ç–µ–ª–µ–º
            
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ (PARENT_ID = 0)
            checklists_headers = {}
            for item in checklist_items:
                if str(item.get('PARENT_ID', '0')) == '0' and item.get('TITLE'):
                    item_id = item['ID']
                    title = item['TITLE'].strip()
                    checklists_headers[item_id] = title
            
            # –ó–∞—Ç–µ–º —Å–æ–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞
            checklists_data = {}
            for header_id, header_title in checklists_headers.items():
                checklists_data[header_title] = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–æ–≤ (PARENT_ID != 0)
            for item in checklist_items:
                parent_id = str(item.get('PARENT_ID', '0'))
                if parent_id != '0' and parent_id in checklists_headers:
                    # –≠—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —á–µ–∫-–ª–∏—Å—Ç–∞
                    parent_title = checklists_headers[parent_id]
                    item_text = item.get('TITLE', '').strip()
                    
                    if item_text:
                        checklists_data[parent_title].append(item_text)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            result_checklists = []
            for title, items in checklists_data.items():
                if items:  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã
                    result_checklists.append({
                        'name': title,
                        'items': items,
                        'format_type': 'bitrix_api',
                        'items_count': len(items),
                        'source_task_id': task_id,
                        'source_url': task_url
                    })
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(result_checklists)} —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∏–∑ –∑–∞–¥–∞—á–∏ {task_id}", file=sys.stderr)
            return result_checklists
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∏–∑ Bitrix24 –∑–∞–¥–∞—á–∏ {task_id}: {e}", file=sys.stderr)
            return []
    
    def _bitrix_api_request(self, method: str, params: Dict[str, Any], http_method: str = 'GET') -> Optional[Any]:
        """
        –£–ª—É—á—à–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Bitrix24 API 
        –ù–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ task-creator.py
        """
        try:
            url = f"{self.bitrix_webhook_url.rstrip('/')}/{method}.json"
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª—è—Ö
            if http_method.upper() == 'GET':
                response = requests.get(
                    url,
                    params=params,
                    timeout=self.bitrix_timeout,
                    headers={'Content-Type': 'application/json'}
                )
            else:
                response = requests.post(
                    url,
                    json=params,
                    timeout=self.bitrix_timeout,
                    headers={'Content-Type': 'application/json'}
                )
            
            response.raise_for_status()
            data = response.json()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ –≤ tracker.py
            if 'result' in data:
                return data['result']
            elif 'error' in data:
                error_msg = data.get('error_description', data.get('error', 'Unknown error'))
                print(f"‚ùå Bitrix24 API –æ—à–∏–±–∫–∞ ({method}): {error_msg}", file=sys.stderr)
                return None
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Bitrix24 API: {method}", file=sys.stderr)
                return data
                
        except requests.exceptions.Timeout:
            print(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Bitrix24 API: {method}", file=sys.stderr)
            return None
        except requests.exceptions.RequestException as e:
            print(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Bitrix24 API ({method}): {e}", file=sys.stderr)
            return None
        except json.JSONDecodeError as e:
            print(f"üìÑ –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç Bitrix24 API ({method}): {e}", file=sys.stderr)
            return None
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Bitrix24 API ({method}): {e}", file=sys.stderr)
            return None
    
    def _extract_bullet_items(self, area: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–æ–≤ —Å –±—É–ª–ª–µ—Ç–∞–º–∏ (‚Ä¢ –∏–ª–∏ -)"""
        items = []
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –±—É–ª–ª–µ—Ç–∞–º–∏
        bullet_matches = re.findall(r'[‚Ä¢\-*]\s*([^\n‚Ä¢\-*]+)', area)
        items.extend(bullet_matches)
        return items
    
    def _extract_html_list_items(self, area: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–æ–≤ –∏–∑ HTML —Å–ø–∏—Å–∫–æ–≤"""
        items = []
        
        # –ò—â–µ–º <ul> –∏ <ol> —Å–ø–∏—Å–∫–∏
        list_matches = re.findall(r'<[uo]l[^>]*>(.*?)</[uo]l>', area, re.DOTALL)
        for list_content in list_matches:
            li_matches = re.findall(r'<li[^>]*>(.*?)</li>', list_content, re.DOTALL)
            items.extend(li_matches)
        
        return items
    
    def _extract_paragraph_items(self, area: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–æ–≤ –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤"""
        items = []
        
        # –ò—â–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã (–≤–µ—Ä–æ—è—Ç–Ω–æ –ø—É–Ω–∫—Ç—ã —Å–ø–∏—Å–∫–∞)
        paragraph_matches = re.findall(r'<p>([^<]{1,200})</p>', area)
        for p in paragraph_matches:
            clean_p = self.clean_text(p)
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if clean_p and not any(marker in clean_p.lower() for marker in ['—á–µ–∫-–ª–∏—Å—Ç', 'checklist']):
                items.append(clean_p)
                if len(items) >= 10:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
                    break
        
        return items
    
    def parse_assignees_file(self, filepath: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–æ–≤"""
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                data = json.load(f)
        except Exception as e:
            raise ValueError(f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}')
        
        results = []
        
        for item in data:
            description = item.get('description', '')
            element_id = item.get('elementId', '')
            element_name = item.get('elementName', '')
            
            if not description or not element_id:
                continue
            
            checklists = self.extract_checklists_from_description(description)
            
            if checklists:
                results.append({
                    'elementId': element_id,
                    'elementName': element_name,
                    'checklists': checklists,
                    'total_checklists': len(checklists),
                    'total_items': sum(c['items_count'] for c in checklists)
                })
        
        return results
    
    def generate_bitrix_format(self, parsed_data: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Bitrix24"""
        bitrix_data = {
            'version': '1.0',
            'created_by': 'StormBPMN Checklist Parser',
            'elements': []
        }
        
        for element_data in parsed_data:
            element_entry = {
                'element_id': element_data['elementId'],
                'element_name': element_data['elementName'],
                'checklists': []
            }
            
            for checklist in element_data['checklists']:
                checklist_entry = {
                    'title': checklist['name'],
                    'items': [
                        {
                            'text': item,
                            'is_complete': False
                        }
                        for item in checklist['items']
                    ]
                }
                element_entry['checklists'].append(checklist_entry)
            
            bitrix_data['elements'].append(element_entry)
        
        return bitrix_data

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
    if len(sys.argv) != 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python checklist_parser.py <assignees_json_file>", file=sys.stderr)
        print("üí° –ü—Ä–∏–º–µ—Ä: python checklist_parser.py assignees.json", file=sys.stderr)
        return 1
    
    filepath = sys.argv[1]
    
    if not Path(filepath).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}", file=sys.stderr)
        return 1
    
    try:
        parser = ChecklistParser()
        
        # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
        parsed_data = parser.parse_assignees_file(filepath)
        
        if not parsed_data:
            print("[]")  # –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ –Ω–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤
            return 0
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è Bitrix24
        elements = []
        for element_data in parsed_data:
            element_entry = {
                'element_id': element_data['elementId'],
                'element_name': element_data['elementName'],
                'checklists': []
            }
            
            for checklist in element_data['checklists']:
                checklist_entry = {
                    'title': checklist['name'],
                    'items': [
                        {
                            'text': item,
                            'is_complete': False
                        }
                        for item in checklist['items']
                    ]
                }
                element_entry['checklists'].append(checklist_entry)
            
            elements.append(element_entry)
        
        # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤ elements
        print(json.dumps(elements, ensure_ascii=False, indent=2))
        
        return 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}", file=sys.stderr)
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
