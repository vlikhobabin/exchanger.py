#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É—Ç–∏–ª–∏—Ç camunda-sync.py
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–æ–Ω—Å–æ–ª—å + —Ñ–∞–π–ª—ã) –¥–ª—è –≤—Å–µ—Ö —É—Ç–∏–ª–∏—Ç –≤ –ø–∞–ø–∫–µ tools/
"""
import os
import sys
from pathlib import Path
from loguru import logger


def setup_tool_logging(tool_name: str, log_level: str = "INFO") -> bool:
    """
    –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã (–∫–æ–Ω—Å–æ–ª—å + —Ñ–∞–π–ª—ã)
    –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é –≤ main.py, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —É—Ç–∏–ª–∏—Ç –≤ tools/
    
    Args:
        tool_name: –ò–º—è —É—Ç–∏–ª–∏—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ª–æ–≥–∞—Ö)
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        True –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–∞
    """
    try:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        logger.remove()
        
        # –ï–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –≤ main.py)
        log_format = (
            "<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
            "<level>{level: <8}</level> | "
            "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> | "
            "<level>{message}</level>"
        )
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ü–≤–µ—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)
        logger.add(
            sys.stdout,
            format=log_format,
            level=log_level,  # –ö–æ–Ω—Å–æ–ª—å: INFO, WARNING, ERROR
            colorize=True
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ logs (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ tools/)
        logs_dir = Path(__file__).parent.parent / "logs"
        logs_dir.mkdir(exist_ok=True)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤ (–í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–∞—è DEBUG)
        main_log_file = logs_dir / f"tool_{tool_name}.log"
        logger.add(
            str(main_log_file),
            format=log_format,
            level="DEBUG",  # –§–∞–π–ª: –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è (DEBUG, INFO, WARNING, ERROR)
            rotation="50 MB",  # –ú–µ–Ω—å—à–µ —á–µ–º –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            retention="14 days",  # –ö–æ—Ä–æ—á–µ –ø–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è —É—Ç–∏–ª–∏—Ç
            compression="zip",
            encoding="utf-8"
        )
        
        # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫
        error_log_file = logs_dir / f"tool_{tool_name}_errors.log"
        logger.add(
            str(error_log_file),
            format=log_format,
            level="ERROR",
            rotation="25 MB",
            retention="30 days",  # –û—à–∏–±–∫–∏ —Ö—Ä–∞–Ω–∏–º –¥–æ–ª—å—à–µ
            compression="zip",
            encoding="utf-8"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        logger.info(f"‚úÖ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã '{tool_name}'")
        logger.info(f"   –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥: {main_log_file} (—É—Ä–æ–≤–µ–Ω—å: DEBUG - –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)")
        logger.info(f"   –õ–æ–≥ –æ—à–∏–±–æ–∫: {error_log_file}")
        logger.info(f"   –ö–æ–Ω—Å–æ–ª—å: —É—Ä–æ–≤–µ–Ω—å {log_level} –∏ –≤—ã—à–µ")
        
        return True
        
    except Exception as e:
        # –ê–≤–∞—Ä–∏–π–Ω—ã–π fallback - –±–∞–∑–æ–≤–æ–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.remove()
        logger.add(sys.stdout, level="ERROR", format="{time:HH:mm:ss} | {level} | {message}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã '{tool_name}': {e}")
        return False


def setup_simple_console_logging(log_level: str = "INFO"):
    """
    –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ —Ñ–∞–π–ª–æ–≤)
    –î–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
    
    Args:
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    try:
        logger.remove()
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        simple_format = "{time:HH:mm:ss} | <level>{level}</level> | <level>{message}</level>"
        
        logger.add(
            sys.stdout,
            format=simple_format,
            level=log_level,
            colorize=True
        )
        
        logger.debug(f"–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (—É—Ä–æ–≤–µ–Ω—å: {log_level})")
        
    except Exception as e:
        # –°–æ–≤—Å–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–π fallback
        logger.remove()
        logger.add(sys.stdout, level="ERROR")
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


def get_logs_directory() -> Path:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ª–æ–≥–æ–≤ –¥–ª—è —É—Ç–∏–ª–∏—Ç
    
    Returns:
        Path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ logs/
    """
    return Path(__file__).parent.parent / "logs"


def list_tool_log_files() -> list:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ —É—Ç–∏–ª–∏—Ç
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ —É—Ç–∏–ª–∏—Ç
    """
    try:
        logs_dir = get_logs_directory()
        if not logs_dir.exists():
            return []
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º tool_
        tool_logs = []
        for log_file in logs_dir.glob("tool_*.log*"):
            tool_logs.append(log_file)
        
        return sorted(tool_logs, key=lambda x: x.stat().st_mtime, reverse=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: {e}")
        return []


# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è camunda-sync.py/tools/ ===\n")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    print("1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")
    setup_tool_logging("demo_tool", "INFO")  # –ö–æ–Ω—Å–æ–ª—å: INFO+, —Ñ–∞–π–ª—ã: –≤—Å–µ
    
    logger.debug("–≠—Ç–æ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–π–ª–µ)")
    logger.info("–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ–Ω—Å–æ–ª—å + —Ñ–∞–π–ª)")
    logger.warning("–≠—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–∫–æ–Ω—Å–æ–ª—å + —Ñ–∞–π–ª)") 
    logger.error("–≠—Ç–æ –æ—à–∏–±–∫–∞ (–∫–æ–Ω—Å–æ–ª—å + —Ñ–∞–π–ª)")
    
    print(f"\n2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–ø–∫–µ –ª–æ–≥–æ–≤:")
    logs_dir = get_logs_directory()
    print(f"   –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤: {logs_dir}")
    print(f"   –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {logs_dir.exists()}")
    
    if logs_dir.exists():
        tool_logs = list_tool_log_files()
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ —É—Ç–∏–ª–∏—Ç: {len(tool_logs)}")
        for log_file in tool_logs[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"     - {log_file.name}")
    
    print("\n3. –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    setup_simple_console_logging("INFO")
    logger.info("–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É 'logs/' –¥–ª—è —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ —É—Ç–∏–ª–∏—Ç.")
