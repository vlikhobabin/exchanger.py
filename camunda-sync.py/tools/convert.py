#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîÑ BPMN Converter Tool - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ö–µ–º StormBPMN –≤ —Ñ–æ—Ä–º–∞—Ç Camunda

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç BPMN –¥–∏–∞–≥—Ä–∞–º–º—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ StormBPMN –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å Camunda Platform.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: –¥–æ–±–∞–≤–ª—è–µ—Ç Camunda namespaces, —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ
    —Å–æ–±—ã—Ç–∏—è, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–∞–¥–∞—á–∏ –≤ serviceTask, –¥–æ–±–∞–≤–ª—è–µ—Ç —É—Å–ª–æ–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    python convert.py <input_file.bpmn>

–ü–†–ò–ú–ï–†–´:
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    python convert.py my_process.bpmn
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –∏–∑ –¥—Ä—É–≥–æ–π –ø–∞–ø–∫–∏
    python convert.py ../diagrams/process.bpmn
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å –ø–æ–ª–Ω—ã–º –ø—É—Ç–µ–º
    python convert.py C:\\Users\\user\\process.bpmn

–†–ï–ó–£–õ–¨–¢–ê–¢:
    –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 'camunda_' –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:
    my_process.bpmn ‚Üí camunda_my_process.bpmn

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª *_assignees.json)
    - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
    - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
    - Python 3.6+
    - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Python (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
    - –ú–æ–¥—É–ª—å bpmn_converter.py –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ

–ü–û–î–†–û–ë–ù–ï–ï:
    –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ BPMN_CONVERTER_README.md
"""

import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
parent_dir = Path(__file__).parent.parent
sys.path.insert(0, str(parent_dir))

from bpmn_converter import BPMNConverter


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    print("üîÑ BPMN Converter - StormBPMN ‚Üí Camunda")
    print("=" * 50)
    
    if len(sys.argv) != 2:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!")
        print("\nüìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("   python convert.py <input_file.bpmn>")
        print("\nüí° –ü—Ä–∏–º–µ—Ä—ã:")
        print("   python convert.py ../my_process.bpmn")
        print("   python convert.py process_diagram.bpmn")
        print("\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:")
        print("   –°–∫—Ä–∏–ø—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç BPMN —Å—Ö–µ–º—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ StormBPMN –≤ —Ñ–æ—Ä–º–∞—Ç Camunda.")
        print("   –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 'camunda_'.")
        return 1
        
    input_file = sys.argv[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        return 1
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not input_file.lower().endswith('.bpmn'):
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ñ–∞–π–ª –Ω–µ –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .bpmn")
        print(f"   –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    
    try:
        # –ò—â–µ–º JSON —Ñ–∞–π–ª —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏
        assignees_data = None
        input_path = Path(input_file)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è JSON —Ñ–∞–π–ª–∞: –±–µ—Ä–µ–º –∏–º—è BPMN —Ñ–∞–π–ª–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å _assignees.json
        base_name = input_path.stem  # –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        assignees_json_path = input_path.parent / f"{base_name}_assignees.json"
        
        if assignees_json_path.exists():
            try:
                print(f"üìã –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏: {assignees_json_path}")
                with open(assignees_json_path, 'r', encoding='utf-8') as f:
                    assignees_data = json.load(f)
                print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(assignees_data)} –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {e}")
                print(f"   –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö...")
        else:
            print(f"üìã –§–∞–π–ª —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {assignees_json_path}")
            print(f"   –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
        converter = BPMNConverter()
        output_file = converter.convert_file(input_file, assignees_data)
        
        print(f"\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {input_file}")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
        input_size = os.path.getsize(input_file)
        output_size = os.path.getsize(output_file)
        print(f"üìä –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {input_size:,} –±–∞–π—Ç")
        print(f"üìä –†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {output_size:,} –±–∞–π—Ç")
        
        return 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        print(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if hasattr(e, '__traceback__'):
            import traceback
            print(f"üìç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
            traceback.print_exc()
            
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code) 