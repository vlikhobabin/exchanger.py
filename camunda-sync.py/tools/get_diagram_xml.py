#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è XML —Å—Ö–µ–º—ã –ø–æ ID –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python get_diagram_xml.py <diagram_id>
"""
import json
import sys
import os
import re
from pathlib import Path
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from stormbpmn_client import StormBPMNClient, StormBPMNAuthError, StormBPMNNotFoundError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add(sys.stdout, level="INFO", format="{time:HH:mm:ss} | {level} | {message}")

def sanitize_filename(filename: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    # –£–¥–∞–ª—è–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    sanitized = re.sub(r'[<>:"/\\|?*]', '_', filename)
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
    sanitized = sanitized.strip('. ')
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(sanitized) > 200:
        sanitized = sanitized[:200]
    return sanitized

def save_diagram_xml(diagram_id: str) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å XML —Å—Ö–µ–º—ã –ø–æ ID"""
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        client = StormBPMNClient()
        logger.info(f"StormBPMN Client —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ö–µ–º—ã
        logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ö–µ–º—ã —Å ID: {diagram_id}")
        result = client.get_diagram_by_id(diagram_id)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        diagram = result.get('diagram', {})
        if not diagram:
            logger.error("–î–∞–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ")
            sys.exit(1)
        
        diagram_name = diagram.get('name', 'diagram')
        diagram_body = diagram.get('body', '')
        
        if not diagram_body:
            logger.error("XML –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            sys.exit(1)
        
        # –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        safe_filename = sanitize_filename(diagram_name)
        filename = f"{safe_filename}.bpmn"
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –æ—Ç camunda-sync.py)
        root_path = Path(__file__).parent.parent.parent
        file_path = root_path / filename
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ XML —Ñ–∞–π–ª–∞
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(diagram_body)
            
            logger.info(f"‚úÖ XML —Å—Ö–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {file_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ XML —Ñ–∞–π–ª–∞: {e}")
            sys.exit(1)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
        logger.info(f"üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö...")
        try:
            assignees = client.get_diagram_assignees(diagram_id)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞ —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏
            assignees_filename = f"{safe_filename}_assignees.json"
            assignees_file_path = root_path / assignees_filename
            
            with open(assignees_file_path, 'w', encoding='utf-8') as f:
                json.dump(assignees, f, ensure_ascii=False, indent=2)
            
            logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {assignees_file_path}")
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(assignees)} –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {e}")
            logger.info("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö...")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ö–µ–º–µ:")
        logger.info(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {diagram_name}")
        logger.info(f"   - ID: {diagram.get('id', 'N/A')}")
        logger.info(f"   - –°—Ç–∞—Ç—É—Å: {diagram.get('status', 'N/A')}")
        logger.info(f"   - –¢–∏–ø: {diagram.get('type', 'N/A')}")
        logger.info(f"   - –ê–≤—Ç–æ—Ä: {diagram.get('authorUsername', 'N/A')}")
        logger.info(f"   - –†–∞–∑–º–µ—Ä XML: {len(diagram_body)} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except StormBPMNNotFoundError:
        logger.error(f"‚ùå –°—Ö–µ–º–∞ —Å ID '{diagram_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        sys.exit(1)
    except StormBPMNAuthError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ STORMBPMN_BEARER_TOKEN")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(sys.argv) != 2:
        logger.error("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python get_diagram_xml.py <diagram_id>")
        logger.error("–ü—Ä–∏–º–µ—Ä: python get_diagram_xml.py 9d5687e5-6108-4f05-b46a-2d24b120ba9d")
        sys.exit(1)
    
    diagram_id = sys.argv[1].strip()
    
    if not diagram_id:
        logger.error("ID –¥–∏–∞–≥—Ä–∞–º–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        sys.exit(1)
    
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É XML —Å—Ö–µ–º—ã...")
    save_diagram_xml(diagram_id)

if __name__ == "__main__":
    main() 