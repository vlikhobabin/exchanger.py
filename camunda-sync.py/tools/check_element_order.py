#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Ä—è–¥–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ BPMN —Ñ–∞–π–ª–∞—Ö
–ü–æ–º–æ–≥–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ ENGINE-09005 "Invalid content was found starting with element"
"""
import sys
import os
import xml.etree.ElementTree as ET
from pathlib import Path

def check_bpmn_element_order(file_path):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ BPMN —Ñ–∞–π–ª–µ"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—è–¥–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ: {file_path}")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False
    
    try:
        # –ß—Ç–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        root = ET.fromstring(content)
        namespaces = {
            'bpmn': 'http://www.omg.org/spec/BPMN/20100524/MODEL'
        }
        
        print(f"üìÑ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(content):,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        elements_to_check = [
            'task', 'serviceTask', 'userTask', 'manualTask', 'businessRuleTask',
            'scriptTask', 'sendTask', 'receiveTask', 'callActivity',
            'startEvent', 'endEvent', 'intermediateCatchEvent', 'intermediateThrowEvent',
            'exclusiveGateway', 'parallelGateway', 'inclusiveGateway', 'eventBasedGateway',
            'complexGateway', 'subProcess'
        ]
        
        total_elements = 0
        problematic_elements = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for element_type in elements_to_check:
            elements = root.findall(f'.//bpmn:{element_type}', namespaces)
            total_elements += len(elements)
            
            for element in elements:
                issues = check_single_element_order(element, element_type)
                if issues:
                    problematic_elements.extend(issues)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º sequenceFlow —ç–ª–µ–º–µ–Ω—Ç—ã
        sequence_flows = root.findall('.//bpmn:sequenceFlow', namespaces)
        total_elements += len(sequence_flows)
        
        for flow in sequence_flows:
            issues = check_sequence_flow_order(flow)
            if issues:
                problematic_elements.extend(issues)
        
        print(f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {total_elements}")
        print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(problematic_elements)}")
        
        if problematic_elements:
            print("\nüö® –ü–†–û–ë–õ–ï–ú–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´:")
            print("-" * 50)
            
            for issue in problematic_elements:
                print(f"‚ùå {issue}")
            
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä BPMN")
            print("2. –ò–ª–∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é:")
            print("   - –í—Å–µ <bpmn:incoming> –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –î–û <bpmn:outgoing>")
            print("   - –í sequenceFlow: <conditionExpression> –ø–æ—Å–ª–µ <extensionElements>")
            
            return False
        else:
            print("\n‚úÖ –í–°–ï –≠–õ–ï–ú–ï–ù–¢–´ –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –ü–û–†–Ø–î–ö–ï!")
            print("üöÄ –§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è –≤ Camunda")
            
            return True
            
    except ET.ParseError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False

def check_single_element_order(element, element_type):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º BPMN —É–∑–ª–µ"""
    issues = []
    children = list(element)
    
    if len(children) <= 1:
        return issues
    
    element_id = element.get('id', 'unknown')
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    incoming_positions = []
    outgoing_positions = []
    
    for i, child in enumerate(children):
        tag_name = child.tag.split('}')[-1] if '}' in child.tag else child.tag
        
        if tag_name == 'incoming':
            incoming_positions.append(i)
        elif tag_name == 'outgoing':
            outgoing_positions.append(i)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ incoming –∏–¥—É—Ç –î–û –≤—Å–µ—Ö outgoing
    if incoming_positions and outgoing_positions:
        max_incoming_pos = max(incoming_positions)
        min_outgoing_pos = min(outgoing_positions)
        
        if max_incoming_pos > min_outgoing_pos:
            issues.append(
                f"–≠–ª–µ–º–µ–Ω—Ç {element_type} (ID: {element_id}) - "
                f"<incoming> –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {max_incoming_pos} –∏–¥–µ—Ç –ø–æ—Å–ª–µ <outgoing> –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {min_outgoing_pos}"
            )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É incoming —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if len(incoming_positions) > 1:
        for i in range(1, len(incoming_positions)):
            if incoming_positions[i] != incoming_positions[i-1] + 1:
                # –ï—Å—Ç—å —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É incoming —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
                gap_start = incoming_positions[i-1] + 1
                gap_end = incoming_positions[i] - 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–∂–¥—É –Ω–∏–º–∏
                gap_elements = []
                for pos in range(gap_start, gap_end + 1):
                    gap_tag = children[pos].tag.split('}')[-1] if '}' in children[pos].tag else children[pos].tag
                    gap_elements.append(gap_tag)
                
                if gap_elements:
                    issues.append(
                        f"–≠–ª–µ–º–µ–Ω—Ç {element_type} (ID: {element_id}) - "
                        f"<incoming> —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏: {', '.join(gap_elements)}"
                    )
    
    return issues

def check_sequence_flow_order(flow):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ sequenceFlow"""
    issues = []
    children = list(flow)
    
    if len(children) <= 1:
        return issues
    
    flow_id = flow.get('id', 'unknown')
    
    # –î–ª—è sequenceFlow –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: extensionElements -> conditionExpression -> –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    extension_pos = None
    condition_pos = None
    
    for i, child in enumerate(children):
        tag_name = child.tag.split('}')[-1] if '}' in child.tag else child.tag
        
        if tag_name == 'extensionElements':
            extension_pos = i
        elif tag_name == 'conditionExpression':
            condition_pos = i
    
    if extension_pos is not None and condition_pos is not None:
        if extension_pos > condition_pos:
            issues.append(
                f"SequenceFlow (ID: {flow_id}) - "
                f"<extensionElements> –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {extension_pos} –∏–¥–µ—Ç –ø–æ—Å–ª–µ <conditionExpression> –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {condition_pos}"
            )
    
    return issues

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) != 2:
        print("üîç BPMN Element Order Checker")
        print("=" * 40)
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Ä—è–¥–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ BPMN —Ñ–∞–π–ª–∞—Ö")
        print()
        print("üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("   python check_element_order.py <file.bpmn>")
        print()
        print("üí° –ü—Ä–∏–º–µ—Ä—ã:")
        print("   python check_element_order.py ../my_process.bpmn")
        print("   python check_element_order.py camunda_converted.bpmn")
        print()
        print("üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:")
        print("   –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ ENGINE-09005 –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –≤ Camunda")
        print("   'Invalid content was found starting with element...'")
        return 1
    
    file_path = sys.argv[1]
    
    success = check_bpmn_element_order(file_path)
    
    if success:
        print("\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("\nüí• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—Ä—è–¥–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤!")
        print("üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 