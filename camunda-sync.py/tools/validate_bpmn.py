#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ BPMN —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º –≤ Camunda
"""
import sys
import os
import xml.etree.ElementTree as ET
from pathlib import Path

def validate_bpmn_file(file_path):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è BPMN —Ñ–∞–π–ª–∞"""
    print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞: {file_path}")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False
    
    file_size = os.path.getsize(file_path)
    print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:,} –±–∞–π—Ç")
    
    try:
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {len(content):,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ XML –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏
        if content.strip().startswith('<?xml'):
            print("‚úÖ XML –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("‚ö†Ô∏è  XML –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ BPMN namespace
        if 'bpmn:definitions' in content:
            print("‚úÖ BPMN definitions –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå BPMN definitions –ù–ï –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Camunda namespace
        if 'xmlns:camunda' in content:
            print("‚úÖ Camunda namespace –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ö†Ô∏è  Camunda namespace –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ XML
        try:
            root = ET.fromstring(content)
            print("‚úÖ XML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–º–µ–Ω
            namespaces = {
                'bpmn': 'http://www.omg.org/spec/BPMN/20100524/MODEL',
                'camunda': 'http://camunda.org/schema/1.0/bpmn'
            }
            
            # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            processes = root.findall('.//bpmn:process', namespaces)
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(processes)}")
            
            for i, process in enumerate(processes, 1):
                process_id = process.get('id', 'N/A')
                process_name = process.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                is_executable = process.get('isExecutable', 'false')
                
                print(f"   {i}. {process_name}")
                print(f"      ID: {process_id}")
                print(f"      –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π: {is_executable}")
                
                # –ü–æ–¥—Å—á–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
                tasks = process.findall('.//bpmn:serviceTask', namespaces) + \
                        process.findall('.//bpmn:userTask', namespaces) + \
                        process.findall('.//bpmn:task', namespaces)
                
                gateways = process.findall('.//bpmn:exclusiveGateway', namespaces) + \
                          process.findall('.//bpmn:parallelGateway', namespaces) + \
                          process.findall('.//bpmn:inclusiveGateway', namespaces)
                
                events = process.findall('.//bpmn:startEvent', namespaces) + \
                        process.findall('.//bpmn:endEvent', namespaces) + \
                        process.findall('.//bpmn:intermediateCatchEvent', namespaces) + \
                        process.findall('.//bpmn:intermediateThrowEvent', namespaces)
                
                flows = process.findall('.//bpmn:sequenceFlow', namespaces)
                
                print(f"      –ó–∞–¥–∞—á–∏: {len(tasks)}")
                print(f"      –®–ª—é–∑—ã: {len(gateways)}")
                print(f"      –°–æ–±—ã—Ç–∏—è: {len(events)}")
                print(f"      –ü–æ—Ç–æ–∫–∏: {len(flows)}")
                print()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã
            diagrams = root.findall('.//bpmndi:BPMNDiagram', {
                'bpmndi': 'http://www.omg.org/spec/BPMN/20100524/DI'
            })
            print(f"üé® –î–∏–∞–≥—Ä–∞–º–º: {len(diagrams)}")
            
            return True
            
        except ET.ParseError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
            print(f"   –°—Ç—Ä–æ–∫–∞: {e.lineno if hasattr(e, 'lineno') else 'N/A'}")
            print(f"   –ü–æ–∑–∏—Ü–∏—è: {e.offset if hasattr(e, 'offset') else 'N/A'}")
            return False
        
    except UnicodeDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {e}")
        print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –≤ UTF-8")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python validate_bpmn.py <file.bpmn>")
        return 1
    
    file_path = sys.argv[1]
    
    if validate_bpmn_file(file_path):
        print("‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é!")
        print("üöÄ –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–µ–ø–ª–æ–π –≤ Camunda")
        return 0
    else:
        print("‚ùå –§–∞–π–ª –ù–ï –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é!")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 