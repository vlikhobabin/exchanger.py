#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è BPMN —Å—Ö–µ–º –≤ Camunda
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python deploy.py <input_file.bpmn>
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
parent_dir = Path(__file__).parent.parent
sys.path.insert(0, str(parent_dir))

from camunda_client import CamundaClient, CamundaAuthError, CamundaValidationError, CamundaDeployError, CamundaAPIError


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    print("üöÄ BPMN Deploy - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ö–µ–º –≤ Camunda")
    print("=" * 50)
    
    if len(sys.argv) != 2:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!")
        print("\nüìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("   python deploy.py <input_file.bpmn>")
        print("\nüí° –ü—Ä–∏–º–µ—Ä—ã:")
        print("   python deploy.py ../my_process.bpmn")
        print("   python deploy.py camunda_converted_process.bpmn")
        print("\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:")
        print("   –°–∫—Ä–∏–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç BPMN —Å—Ö–µ–º—É –≤ Camunda —á–µ—Ä–µ–∑ REST API.")
        print("   –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –¥–µ–ø–ª–æ–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.")
        print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞:")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print("   - CAMUNDA_BASE_URL")
        print("   - CAMUNDA_AUTH_USERNAME")
        print("   - CAMUNDA_AUTH_PASSWORD")
        return 1
        
    input_file = sys.argv[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(input_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        return 1
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not input_file.lower().endswith('.bpmn'):
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ñ–∞–π–ª –Ω–µ –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .bpmn")
        print(f"   –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Camunda
        print("üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Camunda Client...")
        client = CamundaClient()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Camunda...")
        if not client.test_connection():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Camunda!")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Camunda —Å–µ—Ä–≤–µ—Ä–∞")
            print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL (CAMUNDA_BASE_URL)")
            print("   - –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (CAMUNDA_AUTH_USERNAME/PASSWORD)")
            return 1
        
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Camunda —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π —Å—Ö–µ–º—ã...")
        result = client.deploy_diagram(input_file)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"" + "=" * 60)
        print(f"üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {input_file}")
        print(f"üÜî ID –¥–µ–ø–ª–æ—è: {result.get('id')}")
        print(f"üìÖ –î–∞—Ç–∞ –¥–µ–ø–ª–æ—è: {result.get('deploymentTime')}")
        print(f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ø–ª–æ—è: {result.get('name')}")
        print(f"üì¶ –ò—Å—Ç–æ—á–Ω–∏–∫: {result.get('source', 'camunda-sync')}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
        deployed_processes = result.get('deployedProcessDefinitions', {})
        if deployed_processes:
            print(f"\nüìã –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã ({len(deployed_processes)}):")
            print("-" * 40)
            
            for process_key, process_def in deployed_processes.items():
                process_name = process_def.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                process_id = process_def.get('id')
                process_version = process_def.get('version')
                is_executable = process_def.get('executable', False)
                
                print(f"   üìã {process_name}")
                print(f"      Key: {process_key}")
                print(f"      ID: {process_id}")
                print(f"      –í–µ—Ä—Å–∏—è: {process_version}")
                print(f"      –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π: {'‚úÖ –î–∞' if is_executable else '‚ùå –ù–µ—Ç'}")
                print()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—É—Ä—Å–∞—Ö –¥–µ–ø–ª–æ—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        deployed_resources = result.get('deployedCaseDefinitions', {})
        if deployed_resources:
            print(f"üìÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã: {len(deployed_resources)}")
        
        print("=" * 60)
        print("‚úÖ –°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –≤ Camunda!")
        print("üåê –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—ë –≤ Camunda Cockpit:")
        print(f"   https://camunda.eg-holding.ru/camunda/app/cockpit/")
        
        return 0
        
    except CamundaAuthError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª–µ:")
        print("   - CAMUNDA_AUTH_USERNAME")
        print("   - CAMUNDA_AUTH_PASSWORD")
        return 1
        
    except CamundaValidationError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ BPMN: {e}")
        print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π XML —Ñ–æ—Ä–º–∞—Ç")
        print("   - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã BPMN")
        print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        print("   - –ù–∞—Ä—É—à–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ö–µ–º—É –≤ BPMN —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ")
        print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ö–µ–º–∞ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è Camunda")
        print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ convert.py –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑ StormBPMN")
        return 1
        
    except CamundaDeployError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {e}")
        print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        print("   - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ Camunda")
        return 1
        
    except FileNotFoundError as e:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        return 1
        
    except CamundaAPIError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API Camunda: {e}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ Camunda")
        print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL API")
        print("   - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏")
        return 1
        
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if hasattr(e, '__traceback__'):
            import traceback
            print(f"üìç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
            traceback.print_exc()
            
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code) 