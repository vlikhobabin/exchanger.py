#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìä BPMN Diagram Analyzer - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∏–∞–≥—Ä–∞–º–º StormBPMN

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç BPMN –¥–∏–∞–≥—Ä–∞–º–º—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ StormBPMN,
    —Å–æ–∑–¥–∞–≤–∞—è –¥–µ—Ç–∞–ª—å–Ω—ã–π CSV –æ—Ç—á–µ—Ç —Å–æ –≤—Å–µ–º–∏ –∑–∞–¥–∞—á–∞–º–∏, –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –∏ –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞–º–∏.
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ XML –¥–∏–∞–≥—Ä–∞–º–º—ã –∏ JSON —Ñ–∞–π–ª–∞ —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏.

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    python diagram_analyzer.py <bpmn_file> [assignees_json_file]

–ü–†–ò–ú–ï–†–´:
    # –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º assignees —Ñ–∞–π–ª–∞
    python diagram_analyzer.py "–ü—Ä–æ—Ü–µ—Å—Å—ã –£–£. –ú–æ–¥–µ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.bpmn"
    
    # –ê–Ω–∞–ª–∏–∑ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º assignees —Ñ–∞–π–ª–∞
    python diagram_analyzer.py process.bpmn process_assignees.json
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ BPMN —Ñ–∞–π–ª–∞ (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
    python diagram_analyzer.py process.bpmn --no-assignees

–†–ï–ó–£–õ–¨–¢–ê–¢:
    –°–æ–∑–¥–∞–µ—Ç—Å—è CSV —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º <diagram_name>_analysis.csv —Å–æ–¥–µ—Ä–∂–∞—â–∏–π:
    - elementId: ID —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ BPMN –¥–∏–∞–≥—Ä–∞–º–º—ã
    - elementType: –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ (callActivity, task, subProcess, etc.)
    - elementName: –ù–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞  
    - assigneeEdgeId: ID —Å–≤—è–∑–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ (–∏–∑ StormBPMN)
    - description: –û–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ (HTML –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)

–§–û–†–ú–ê–¢ CSV:
    elementId;elementType;elementName;assigneeEdgeId;description
    Activity_1nptpu5;callActivity;"–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ –¥–æ–≥–æ–≤–æ—Ä–∞–º –î–î–£ –∏ –î–ö–ü –≤ –£–£";22602054;"–ß–ï–ö–õ–ò–°–¢: https://..."
    Activity_1vpjw6a;callActivity;"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏";"";""

–ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –≠–õ–ï–ú–ï–ù–¢–´ BPMN:
    - callActivity (–≤—ã–∑–æ–≤ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–æ–≤)
    - task, userTask, serviceTask, scriptTask, etc. (–≤—Å–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á)
    - subProcess (–ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å—ã)

–û–°–û–ë–ï–ù–ù–û–°–¢–ò:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ assignees —Ñ–∞–π–ª–∞ –ø–æ –∏–º–µ–Ω–∏ BPMN —Ñ–∞–π–ª–∞
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ assignees —Ñ–∞–π–ª–µ
    - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ Bitrix24 –∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π
    - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ XML –∏ JSON —Ñ–∞–π–ª–∞–º–∏
    - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
    - Python 3.6+
    - –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ loguru (pip install loguru)
    - –ú–æ–¥—É–ª–∏: xml.etree.ElementTree, json, csv, pathlib

–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø:
    –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è:
    - –ê—É–¥–∏—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
    - –ú–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏
    - –°–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏

WORKFLOW –° –î–†–£–ì–ò–ú–ò –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–ú–ò:
    1. python get_diagrams_list.py > list.json      # –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–≥—Ä–∞–º–º
    2. python get_diagram_xml.py <diagram_id>       # —Å–∫–∞—á–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É –∏ assignees
    3. python diagram_analyzer.py <diagram>.bpmn    # –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    4. python checklist_parser.py <assignees>.json  # –∏–∑–≤–ª–µ—á—å —á–µ–∫-–ª–∏—Å—Ç—ã

–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
    - –í—Å–µ –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    - –í–∞–ª–∏–¥–∞—Ü–∏—è XML –∏ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä
    - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
"""

import xml.etree.ElementTree as ET
import json
import csv
import sys
import os
import re
import html
from pathlib import Path
from typing import List, Dict, Any, Optional, Set
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add(sys.stdout, level="INFO", format="{time:HH:mm:ss} | {level} | {message}")

class BPMNDiagramAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä BPMN –¥–∏–∞–≥—Ä–∞–º–º —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π StormBPMN –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ BPMN
        self.supported_elements = {
            'callActivity',
            'task', 'userTask', 'serviceTask', 'scriptTask', 
            'businessRuleTask', 'receiveTask', 'sendTask',
            'manualTask', 'subProcess'
        }
        
        # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω BPMN
        self.namespaces = {
            'bpmn': 'http://www.omg.org/spec/BPMN/20100524/MODEL',
            'bpmndi': 'http://www.omg.org/spec/BPMN/20100524/DI'
        }
    
    def parse_bpmn_file(self, bpmn_file_path: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ BPMN —Ñ–∞–π–ª–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        
        logger.info(f"üìñ –ü–∞—Ä—Å–∏–Ω–≥ BPMN —Ñ–∞–π–ª–∞: {bpmn_file_path}")
        
        try:
            tree = ET.parse(bpmn_file_path)
            root = tree.getroot()
            
            elements = []
            
            # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            for element_type in self.supported_elements:
                xpath = f".//bpmn:{element_type}"
                found_elements = root.findall(xpath, self.namespaces)
                
                for element in found_elements:
                    element_id = element.get('id', '')
                    element_name = element.get('name', '')
                    
                    if element_id:  # –¢–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å ID
                        elements.append({
                            'elementId': element_id,
                            'elementName': element_name,
                            'elementType': element_type,
                            'assigneeEdgeId': '',  # –ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –∏–∑ assignees —Ñ–∞–π–ª–∞
                            'description': ''      # –ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –∏–∑ assignees —Ñ–∞–π–ª–∞
                        })
                        
                        logger.debug(f"  –ù–∞–π–¥–µ–Ω {element_type}: {element_id} - '{element_name}'")
            
            logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ BPMN —Ñ–∞–π–ª–∞")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            type_counts = {}
            for element in elements:
                element_type = element['elementType']
                type_counts[element_type] = type_counts.get(element_type, 0) + 1
            
            logger.info("üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
            for element_type, count in sorted(type_counts.items()):
                logger.info(f"   {element_type}: {count}")
            
            return elements
            
        except ET.ParseError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML —Ñ–∞–π–ª–∞: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ BPMN: {e}")
            raise
    
    def parse_assignees_file(self, assignees_file_path: str) -> Dict[str, Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ JSON —Ñ–∞–π–ª–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —ç–ª–µ–º–µ–Ω—Ç–∞—Ö"""
        
        logger.info(f"üìñ –ü–∞—Ä—Å–∏–Ω–≥ assignees —Ñ–∞–π–ª–∞: {assignees_file_path}")
        
        try:
            with open(assignees_file_path, 'r', encoding='utf-8') as f:
                assignees_data = json.load(f)
            
            if not isinstance(assignees_data, list):
                logger.warning("‚ö†Ô∏è Assignees —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö")
                return {}
            
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ elementId –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            assignees_dict = {}
            for item in assignees_data:
                element_id = item.get('elementId')
                if element_id:
                    assignees_dict[element_id] = {
                        'assigneeEdgeId': item.get('assigneeEdgeId', ''),
                        'description': item.get('description', ''),
                        'assigneeName': item.get('assigneeName', ''),
                        'assigneeId': item.get('assigneeId', ''),
                        'elementName': item.get('elementName', ''),  # –ú–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç BPMN
                        'updatedOn': item.get('updatedOn', ''),
                        'updatedBy': item.get('updatedBy', '')
                    }
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(assignees_dict)} –∑–∞–ø–∏—Å–µ–π –∏–∑ assignees —Ñ–∞–π–ª–∞")
            return assignees_dict
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ñ–∞–π–ª–∞: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ assignees: {e}")
            raise
    
    def merge_data(self, bpmn_elements: List[Dict[str, Any]], 
                   assignees_dict: Dict[str, Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ BPMN –∏ assignees —Ñ–∞–π–ª–æ–≤"""
        
        logger.info("üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ BPMN –∏ assignees —Ñ–∞–π–ª–æ–≤")
        
        merged_elements = []
        found_in_assignees = 0
        
        for element in bpmn_elements:
            element_id = element['elementId']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ assignees
            if element_id in assignees_dict:
                assignee_info = assignees_dict[element_id]
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É assignees —Ñ–∞–π–ª–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª–µ–π
                merged_element = {
                    'elementId': element_id,
                    'elementName': assignee_info.get('elementName') or element['elementName'],
                    'elementType': element['elementType'],
                    'assigneeEdgeId': str(assignee_info.get('assigneeEdgeId', '')),
                    'description': assignee_info.get('description', ''),
                    'assigneeName': assignee_info.get('assigneeName', ''),
                    'assigneeId': assignee_info.get('assigneeId', ''),
                    'updatedOn': assignee_info.get('updatedOn', ''),
                    'updatedBy': assignee_info.get('updatedBy', ''),
                    'source': 'bpmn+assignees'
                }
                found_in_assignees += 1
                logger.debug(f"  –û–±—ä–µ–¥–∏–Ω–µ–Ω: {element_id} (–µ—Å—Ç—å –≤ assignees)")
                
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ BPMN
                merged_element = {
                    'elementId': element_id,
                    'elementName': element['elementName'],
                    'elementType': element['elementType'],
                    'assigneeEdgeId': '',
                    'description': '',
                    'assigneeName': '',
                    'assigneeId': '',
                    'updatedOn': '',
                    'updatedBy': '',
                    'source': 'bpmn_only'
                }
                logger.debug(f"  –¢–æ–ª—å–∫–æ BPMN: {element_id} (–Ω–µ—Ç –≤ assignees)")
            
            merged_elements.append(merged_element)
        
        logger.info(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
        logger.info(f"   –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(merged_elements)}")
        logger.info(f"   –° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π: {found_in_assignees}")
        logger.info(f"   –¢–æ–ª—å–∫–æ –∏–∑ BPMN: {len(merged_elements) - found_in_assignees}")
        
        return merged_elements
    
    def clean_description(self, description: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è HTML –æ–ø–∏—Å–∞–Ω–∏—è –≤ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è CSV"""
        if not description:
            return ""
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities (–Ω–∞–ø—Ä–∏–º–µ—Ä, &nbsp; &amp; –∏ —Ç.–¥.)
        cleaned = html.unescape(description)
        
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ –Ω–∏—Ö
        cleaned = re.sub(r'<[^>]+>', '', cleaned)
        
        # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        cleaned = re.sub(r'\s+', ' ', cleaned.strip())
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –¥–ª—è CSV
        cleaned = cleaned.replace('"', '""')
        
        return cleaned
    
    def generate_csv_report(self, merged_elements: List[Dict[str, Any]], 
                           output_file: str) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ ANSI –¥–ª—è Excel"""
        
        logger.info(f"üìÑ –°–æ–∑–¥–∞–Ω–∏–µ CSV –æ—Ç—á–µ—Ç–∞: {output_file}")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É cp1251 (ANSI) –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Excel –Ω–∞ Windows
            with open(output_file, 'w', newline='', encoding='cp1251') as csvfile:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ';' –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
                writer = csv.writer(csvfile, delimiter=';', quotechar='"', 
                                  quoting=csv.QUOTE_MINIMAL)
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–æ–π elementType
                headers = ['elementId', 'elementType', 'elementName', 'assigneeEdgeId', 'description']
                writer.writerow(headers)
                
                # –î–∞–Ω–Ω—ã–µ
                for element in merged_elements:
                    row = [
                        element['elementId'],
                        element['elementType'],
                        element['elementName'],
                        element['assigneeEdgeId'],
                        self.clean_description(element['description'])
                    ]
                    writer.writerow(row)
            
            logger.info(f"‚úÖ CSV –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {output_file}")
            logger.info(f"   –ö–æ–¥–∏—Ä–æ–≤–∫–∞: ANSI (cp1251) –¥–ª—è Excel")
            logger.info(f"   –ó–∞–ø–∏—Å–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(merged_elements) + 1}")  # +1 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            
        except UnicodeEncodeError as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ ANSI, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ UTF-8: {e}")
            # Fallback –∫ UTF-8 –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ cp1251
            with open(output_file, 'w', newline='', encoding='utf-8-sig') as csvfile:
                writer = csv.writer(csvfile, delimiter=';', quotechar='"', 
                                  quoting=csv.QUOTE_MINIMAL)
                headers = ['elementId', 'elementType', 'elementName', 'assigneeEdgeId', 'description']
                writer.writerow(headers)
                
                for element in merged_elements:
                    row = [
                        element['elementId'],
                        element['elementType'],
                        element['elementName'],
                        element['assigneeEdgeId'],
                        self.clean_description(element['description'])
                    ]
                    writer.writerow(row)
            logger.info(f"‚úÖ CSV –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ UTF-8 —Å BOM")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞: {e}")
            raise
    
    def find_assignees_file(self, bpmn_file_path: str) -> Optional[str]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ assignees —Ñ–∞–π–ª–∞ –ø–æ –∏–º–µ–Ω–∏ BPMN —Ñ–∞–π–ª–∞"""
        
        bpmn_path = Path(bpmn_file_path)
        base_name = bpmn_path.stem  # –ò–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω assignees —Ñ–∞–π–ª–∞
        possible_names = [
            f"{base_name}_assignees.json",
            f"{base_name}.assignees.json",
            f"{base_name}_–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ.json"
        ]
        
        # –ò—â–µ–º –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —á—Ç–æ –∏ BPMN —Ñ–∞–π–ª
        bpmn_dir = bpmn_path.parent
        
        for possible_name in possible_names:
            assignees_path = bpmn_dir / possible_name
            if assignees_path.exists():
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω assignees —Ñ–∞–π–ª: {assignees_path}")
                return str(assignees_path)
        
        logger.info(f"‚ö†Ô∏è Assignees —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è: {base_name}")
        return None
    
    def analyze_diagram(self, bpmn_file_path: str, 
                       assignees_file_path: Optional[str] = None) -> str:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ—Ç—á–µ—Ç–∞"""
        
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ BPMN –¥–∏–∞–≥—Ä–∞–º–º—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è BPMN —Ñ–∞–π–ª–∞
        if not Path(bpmn_file_path).exists():
            raise FileNotFoundError(f"BPMN —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {bpmn_file_path}")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ BPMN —Ñ–∞–π–ª–∞
        bpmn_elements = self.parse_bpmn_file(bpmn_file_path)
        
        # –ü–æ–∏—Å–∫ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ assignees —Ñ–∞–π–ª–∞
        assignees_dict = {}
        if assignees_file_path is None:
            assignees_file_path = self.find_assignees_file(bpmn_file_path)
        
        if assignees_file_path and Path(assignees_file_path).exists():
            assignees_dict = self.parse_assignees_file(assignees_file_path)
        elif assignees_file_path:
            logger.warning(f"‚ö†Ô∏è Assignees —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {assignees_file_path}")
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        merged_elements = self.merge_data(bpmn_elements, assignees_dict)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        bpmn_path = Path(bpmn_file_path)
        output_file = f"{bpmn_path.stem}_analysis.csv"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV –æ—Ç—á–µ—Ç–∞
        self.generate_csv_report(merged_elements, output_file)
        
        logger.info("üéâ –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return output_file

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(sys.argv) < 2:
        print("üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä BPMN –¥–∏–∞–≥—Ä–∞–º–º StormBPMN")
        print("=" * 60)
        print("üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("   python diagram_analyzer.py <bpmn_file> [assignees_json_file]")
        print()
        print("üí° –ü—Ä–∏–º–µ—Ä—ã:")
        print('   python diagram_analyzer.py "–ü—Ä–æ—Ü–µ—Å—Å—ã –£–£. –ú–æ–¥–µ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.bpmn"')
        print('   python diagram_analyzer.py process.bpmn process_assignees.json')
        print()
        print("üìù –û–ø–∏—Å–∞–Ω–∏–µ:")
        print("   –°–æ–∑–¥–∞–µ—Ç CSV –æ—Ç—á–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–∏–∞–≥—Ä–∞–º–º—ã.")
        print("   –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ BPMN —Ñ–∞–π–ª–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ StormBPMN.")
        print()
        print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print("   CSV —Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: elementId, elementType, elementName, assigneeEdgeId, description")
        print("   –ö–æ–¥–∏—Ä–æ–≤–∫–∞: ANSI (cp1251) –¥–ª—è Excel –Ω–∞ Windows")
        print("   –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π (;)")
        sys.exit(1)
    
    bpmn_file = sys.argv[1]
    assignees_file = sys.argv[2] if len(sys.argv) > 2 else None
    
    try:
        analyzer = BPMNDiagramAnalyzer()
        output_file = analyzer.analyze_diagram(bpmn_file, assignees_file)
        
        print()
        print("=" * 60)
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê")
        print("=" * 60)
        print(f"‚úÖ CSV –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {output_file}")
        print(f"üìä –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Excel –∏–ª–∏ –ª—é–±–æ–º CSV —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ")
        print(f"üîß –ö–æ–¥–∏—Ä–æ–≤–∫–∞: ANSI (cp1251), —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π (;)")
        print(f"üéØ HTML –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
