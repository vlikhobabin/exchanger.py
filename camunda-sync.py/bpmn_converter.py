#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
BPMN Converter - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ö–µ–º –∏–∑ StormBPMN –≤ Camunda —Ñ–æ—Ä–º–∞—Ç
–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2024
"""

import sys
import os
import xml.etree.ElementTree as ET
from typing import Dict, List, Set, Optional
import uuid
import re
from pathlib import Path


class BPMNConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ BPMN —Å—Ö–µ–º –∏–∑ StormBPMN –≤ Camunda —Ñ–æ—Ä–º–∞—Ç"""
    
    def __init__(self):
        self.namespaces = {
            'bpmn': 'http://www.omg.org/spec/BPMN/20100524/MODEL',
            'bpmndi': 'http://www.omg.org/spec/BPMN/20100524/DI',
            'di': 'http://www.omg.org/spec/DD/20100524/DI',
            'dc': 'http://www.omg.org/spec/DD/20100524/DC',
            'camunda': 'http://camunda.org/schema/1.0/bpmn',
            'xsi': 'http://www.w3.org/2001/XMLSchema-instance'
        }
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω –¥–ª—è ElementTree
        for prefix, uri in self.namespaces.items():
            ET.register_namespace(prefix, uri)
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        self.elements_to_remove = {
            'intermediateCatchEvent',
            'intermediateThrowEvent', 
            'messageEventDefinition',
            'timerEventDefinition'
        }
        
        # –¢–∏–ø—ã –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ serviceTask
        self.task_types_to_convert = {
            'userTask', 'manualTask', 'callActivity', 'task'
        }
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.removed_elements: Set[str] = set()
        self.removed_flows: Set[str] = set()
        
    def convert_file(self, input_file: str, assignees_data: Optional[List[Dict]] = None) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å BPMN —Ñ–∞–π–ª"""
        print(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {input_file}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
        self.assignees_data = assignees_data or []
        if self.assignees_data:
            print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.assignees_data)} –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(input_file):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        input_path = Path(input_file)
        output_file = str(input_path.parent / f"camunda_{input_path.name}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º XML
        try:
            tree = ET.parse(input_file)
            root = tree.getroot()
        except ET.ParseError as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
        
        print("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self._add_camunda_namespaces(root)
        self._update_process_attributes(root)
        self._remove_collaboration_section(root)
        self._remove_intermediate_events(root)
        self._convert_tasks_to_service_tasks(root)
        self._add_assignee_properties(root)
        self._add_condition_expressions(root)
        self._fix_element_order(root)
        self._fix_default_flows(root)
        self._clean_diagram_elements(root)
        self._update_bpmn_plane(root)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self._save_result(tree, output_file)
        
        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        
        return output_file
    
    def _find_parent(self, root, element):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è ElementTree"""
        for parent in root.iter():
            if element in parent:
                return parent
        return None
    
    def _add_camunda_namespaces(self, root):
        """–î–æ–±–∞–≤–∏—Ç—å Camunda namespaces"""
        print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Camunda namespaces...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        current_attribs = dict(root.attrib)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        camunda_ns = "xmlns:camunda"
        xsi_ns = "xmlns:xsi"
        
        if camunda_ns not in current_attribs:
            root.set(camunda_ns, self.namespaces['camunda'])
        
        if xsi_ns not in current_attribs:
            root.set(xsi_ns, self.namespaces['xsi'])
        
        print("‚úÖ Namespaces –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    def _update_process_attributes(self, root):
        """–û–±–Ω–æ–≤–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
        
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç process
        process = root.find('.//bpmn:process', self.namespaces)
        if process is not None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID (–Ω–µ –∏–∑–º–µ–Ω—è–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º)
            original_id = process.get('id', 'Process_1d4oa6g46')
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isExecutable –≤ true
            process.set('isExecutable', 'true')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ Camunda –∞—Ç—Ä–∏–±—É—Ç—ã
            process.set('{http://camunda.org/schema/1.0/bpmn}historyTimeToLive', '1')
            
            # –î–æ–±–∞–≤–ª—è–µ–º name –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ö–µ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if not process.get('name'):
                process.set('name', '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏')
            
            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω (ID: {original_id})")
        else:
            print("‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç process –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def _remove_collaboration_section(self, root):
        """–£–¥–∞–ª–∏—Ç—å —Å–µ–∫—Ü–∏—é collaboration"""
        print("üîß –£–¥–∞–ª–µ–Ω–∏–µ collaboration —Å–µ–∫—Ü–∏–∏...")
        
        removed_count = 0
        
        # –£–¥–∞–ª—è–µ–º collaboration –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for element in root.findall('.//bpmn:collaboration', self.namespaces):
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID —É–¥–∞–ª—è–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            collab_id = element.get('id')
            if collab_id:
                self.removed_elements.add(collab_id)
            
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for child in element.iter():
                child_id = child.get('id')
                if child_id:
                    self.removed_elements.add(child_id)
            
            root.remove(element)
            removed_count += 1
        
        # –£–¥–∞–ª—è–µ–º textAnnotation, group, association
        for tag in ['textAnnotation', 'group', 'association']:
            for element in root.findall(f'.//bpmn:{tag}', self.namespaces):
                element_id = element.get('id')
                if element_id:
                    self.removed_elements.add(element_id)
                
                parent = self._find_parent(root, element)
                if parent is not None:
                    parent.remove(element)
                    removed_count += 1
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ collaboration")
    
    def _remove_intermediate_events(self, root):
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"""
        print("üîß –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...")
        
        removed_count = 0
        flows_to_redirect = {}  # incoming_flow_id -> new_target_ref
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        for event_type in self.elements_to_remove:
            for event in root.findall(f'.//bpmn:{event_type}', self.namespaces):
                event_id = event.get('id')
                if event_id:
                    self.removed_elements.add(event_id)
                    
                    # –î–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞—Ö–æ–¥–∏–º –≤—Ö–æ–¥—è—â–∏–µ –∏ –∏—Å—Ö–æ–¥—è—â–∏–µ –ø–æ—Ç–æ–∫–∏
                    if event_type in ['intermediateCatchEvent', 'intermediateThrowEvent']:
                        incoming = event.find('bpmn:incoming', self.namespaces)
                        outgoing = event.find('bpmn:outgoing', self.namespaces)
                        
                        if incoming is not None and outgoing is not None:
                            incoming_flow_id = incoming.text
                            outgoing_flow_id = outgoing.text
                            
                            # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è target
                            outgoing_seq = root.find(f'.//bpmn:sequenceFlow[@id="{outgoing_flow_id}"]', self.namespaces)
                            if outgoing_seq is not None:
                                new_target_ref = outgoing_seq.get('targetRef')
                                if new_target_ref:
                                    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫
                                    flows_to_redirect[incoming_flow_id] = new_target_ref
                            
                            # –ü–æ–º–µ—á–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                            self.removed_flows.add(outgoing_flow_id)
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                parent = self._find_parent(root, event)
                if parent is not None:
                    parent.remove(event)
                    removed_count += 1
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –ø–æ—Ç–æ–∫–∏ –Ω–∞ –Ω–æ–≤—ã–µ —Ü–µ–ª–∏
        for flow_id, new_target in flows_to_redirect.items():
            flow = root.find(f'.//bpmn:sequenceFlow[@id="{flow_id}"]', self.namespaces)
            if flow is not None:
                old_target = flow.get('targetRef')
                flow.set('targetRef', new_target)
                print(f"   ‚Ü™Ô∏è –ü–æ—Ç–æ–∫ {flow_id} –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω: {old_target} ‚Üí {new_target}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                self._update_flow_diagram_coordinates(root, flow_id, new_target)
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ –ø–æ—Ç–æ–∫–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        for flow in root.findall('.//bpmn:sequenceFlow', self.namespaces):
            flow_id = flow.get('id')
            if flow_id in self.removed_flows:
                parent = self._find_parent(root, flow)
                if parent is not None:
                    parent.remove(flow)
                    removed_count += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞
        self._update_element_references(root)
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –ø–æ—Ç–æ–∫–æ–≤")
        
    def _update_flow_diagram_coordinates(self, root, flow_id, new_target_ref):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Ç–æ–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        print(f"   üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø–æ—Ç–æ–∫–∞ {flow_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Ç–æ–∫–∞
        flow_edge = root.find(f'.//bpmndi:BPMNEdge[@bpmnElement="{flow_id}"]', self.namespaces)
        if flow_edge is None:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–æ–≤–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        target_shape = root.find(f'.//bpmndi:BPMNShape[@bpmnElement="{new_target_ref}"]', self.namespaces)
        if target_shape is None:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–æ–≤–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        bounds = target_shape.find('dc:Bounds', self.namespaces)
        if bounds is None:
            return
        
        target_x = int(bounds.get('x', 0))
        target_y = int(bounds.get('y', 0))
        target_height = int(bounds.get('height', 80))
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –ª–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        new_x = target_x
        new_y = target_y + target_height // 2
        
        # –û–±–Ω–æ–≤–ª—è–µ–º waypoints –ø–æ—Ç–æ–∫–∞
        waypoints = flow_edge.findall('di:waypoint', self.namespaces)
        if len(waypoints) >= 2:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π waypoint (–∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É)
            last_waypoint = waypoints[-1]
            last_waypoint.set('x', str(new_x))
            last_waypoint.set('y', str(new_y))
            print(f"      üìç Waypoint –æ–±–Ω–æ–≤–ª–µ–Ω: x={new_x}, y={new_y}")
    
    def _update_element_references(self, root):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ incoming/outgoing –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
        
        updated_count = 0
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
        for element in root.findall('.//*[@id]', self.namespaces):
            # –û–±–Ω–æ–≤–ª—è–µ–º incoming —Å—Å—ã–ª–∫–∏
            for incoming in element.findall('bpmn:incoming', self.namespaces):
                flow_id = incoming.text
                if flow_id in self.removed_flows:
                    # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫
                    element.remove(incoming)
                    updated_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º outgoing —Å—Å—ã–ª–∫–∏
            for outgoing in element.findall('bpmn:outgoing', self.namespaces):
                flow_id = outgoing.text
                if flow_id in self.removed_flows:
                    # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫
                    element.remove(outgoing)
                    updated_count += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ incoming —Å—Å—ã–ª–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–ø–µ—Ä—å —É–∫–∞–∑—ã–≤–∞—é—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        for flow in root.findall('.//bpmn:sequenceFlow', self.namespaces):
            flow_id = flow.get('id')
            target_ref = flow.get('targetRef')
            
            if target_ref:
                # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
                target_element = root.find(f'.//*[@id="{target_ref}"]', self.namespaces)
                if target_element is not None:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫
                    has_incoming = False
                    for incoming in target_element.findall('bpmn:incoming', self.namespaces):
                        if incoming.text == flow_id:
                            has_incoming = True
                            break
                    
                    if not has_incoming:
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Å—Å—ã–ª–∫—É
                        incoming_element = ET.SubElement(target_element, f'{{{self.namespaces["bpmn"]}}}incoming')
                        incoming_element.text = flow_id
                        updated_count += 1
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Å—Å—ã–ª–æ–∫")
    
    def _convert_tasks_to_service_tasks(self, root):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á –≤ serviceTask"""
        print("üîß –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–¥–∞—á –≤ serviceTask...")
        
        converted_count = 0
        
        for task_type in self.task_types_to_convert:
            for task in root.findall(f'.//bpmn:{task_type}', self.namespaces):
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π serviceTask —ç–ª–µ–º–µ–Ω—Ç
                service_task = ET.Element(f'{{{self.namespaces["bpmn"]}}}serviceTask')
                
                # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                for key, value in task.attrib.items():
                    service_task.set(key, value)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ Camunda –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è external tasks
                service_task.set(f'{{{self.namespaces["camunda"]}}}type', 'external')
                service_task.set(f'{{{self.namespaces["camunda"]}}}topic', 'bitrix_create_task')
                
                # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                for child in task:
                    service_task.append(child)
                
                # –ó–∞–º–µ–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
                parent = self._find_parent(root, task)
                if parent is not None:
                    parent.insert(list(parent).index(task), service_task)
                    parent.remove(task)
                    converted_count += 1
        
        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {converted_count} –∑–∞–¥–∞—á")
    
    def _add_assignee_properties(self, root):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫ serviceTask —ç–ª–µ–º–µ–Ω—Ç–∞–º"""
        if not self.assignees_data:
            print("üìã –î–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ")
            return
        
        print("üîß –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤ serviceTask —ç–ª–µ–º–µ–Ω—Ç—ã...")
        
        added_count = 0
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ elementId
        assignees_by_element = {}
        for assignee in self.assignees_data:
            element_id = assignee.get('elementId')
            if element_id:
                if element_id not in assignees_by_element:
                    assignees_by_element[element_id] = []
                assignees_by_element[element_id].append(assignee)
        
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–ª—è {len(assignees_by_element)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ serviceTask —ç–ª–µ–º–µ–Ω—Ç—ã
        for service_task in root.findall('.//bpmn:serviceTask', self.namespaces):
            task_id = service_task.get('id')
            
            if task_id and task_id in assignees_by_element:
                assignees_list = assignees_by_element[task_id]
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ (–æ–±—ã—á–Ω–æ –æ–¥–∏–Ω –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç)
                assignee = assignees_list[0]
                assignee_name = assignee.get('assigneeName', '')
                assignee_id = str(assignee.get('assigneeId', ''))
                
                if assignee_name and assignee_id:
                    # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º extensionElements
                    extension_elements = service_task.find('bpmn:extensionElements', self.namespaces)
                    if extension_elements is None:
                        extension_elements = ET.SubElement(
                            service_task, 
                            f'{{{self.namespaces["bpmn"]}}}extensionElements'
                        )
                    
                    # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º camunda:properties
                    properties = extension_elements.find('camunda:properties', self.namespaces)
                    if properties is None:
                        properties = ET.SubElement(
                            extension_elements,
                            f'{{{self.namespaces["camunda"]}}}properties'
                        )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ assigneeName
                    assignee_name_prop = ET.SubElement(
                        properties,
                        f'{{{self.namespaces["camunda"]}}}property'
                    )
                    assignee_name_prop.set('name', 'assigneeName')
                    assignee_name_prop.set('value', assignee_name)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ assigneeId
                    assignee_id_prop = ET.SubElement(
                        properties,
                        f'{{{self.namespaces["camunda"]}}}property'
                    )
                    assignee_id_prop.set('name', 'assigneeId')
                    assignee_id_prop.set('value', assignee_id)
                    
                    print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–ª—è {task_id}: {assignee_name} ({assignee_id})")
                    added_count += 1
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
                    if len(assignees_list) > 1:
                        print(f"   ‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç {task_id} –∏–º–µ–µ—Ç {len(assignees_list)} –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π")
        
        print(f"‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–æ {added_count} –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö")
    
    def _add_condition_expressions(self, root):
        """–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∫ –ø–æ—Ç–æ–∫–∞–º"""
        print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π...")
        
        added_count = 0
        
        for flow in root.findall('.//bpmn:sequenceFlow', self.namespaces):
            name = flow.get('name', '').lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ conditionExpression
            existing_condition = flow.find('bpmn:conditionExpression', self.namespaces)
            
            if not existing_condition:
                condition_expr = None
                
                if name == '–¥–∞':
                    condition_expr = '${result == "ok"}'
                elif name == '–Ω–µ—Ç':
                    condition_expr = '${result != "ok"}'
                
                if condition_expr:
                    # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç conditionExpression
                    condition_element = ET.SubElement(
                        flow, 
                        f'{{{self.namespaces["bpmn"]}}}conditionExpression'
                    )
                    condition_element.set(
                        f'{{{self.namespaces["xsi"]}}}type',
                        'bpmn:tFormalExpression'
                    )
                    condition_element.text = condition_expr
                    added_count += 1
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —É—Å–ª–æ–≤–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π")
    
    def _fix_element_order(self, root):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ BPMN —É–∑–ª–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
        
        fixed_count = 0
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å incoming/outgoing
        process_elements = [
            'task', 'serviceTask', 'userTask', 'manualTask', 'businessRuleTask',
            'scriptTask', 'sendTask', 'receiveTask', 'callActivity',
            'startEvent', 'endEvent', 'intermediateCatchEvent', 'intermediateThrowEvent',
            'exclusiveGateway', 'parallelGateway', 'inclusiveGateway', 'eventBasedGateway',
            'complexGateway', 'subProcess'
        ]
        
        for element_type in process_elements:
            for element in root.findall(f'.//bpmn:{element_type}', self.namespaces):
                if self._fix_single_element_order(element):
                    fixed_count += 1
        
        # –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º sequenceFlow —ç–ª–µ–º–µ–Ω—Ç—ã
        for flow in root.findall('.//bpmn:sequenceFlow', self.namespaces):
            if self._fix_sequence_flow_order(flow):
                fixed_count += 1
        
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ {fixed_count} —É–∑–ª–∞—Ö")
    
    def _fix_single_element_order(self, element):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º BPMN —É–∑–ª–µ"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        children = list(element)
        
        if len(children) <= 1:
            return False  # –ù–µ—á–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        extension_elements = []
        io_specification = []
        properties = []
        data_associations = []
        resource_roles = []
        loop_characteristics = []
        incoming_elements = []
        outgoing_elements = []
        other_elements = []
        
        for child in children:
            tag_name = child.tag.split('}')[-1] if '}' in child.tag else child.tag
            
            if tag_name == 'extensionElements':
                extension_elements.append(child)
            elif tag_name == 'ioSpecification':
                io_specification.append(child)
            elif tag_name == 'property':
                properties.append(child)
            elif tag_name in ['dataInputAssociation', 'dataOutputAssociation']:
                data_associations.append(child)
            elif tag_name in ['resourceRole', 'performer', 'humanPerformer', 'potentialOwner']:
                resource_roles.append(child)
            elif tag_name in ['loopCharacteristics', 'multiInstanceLoopCharacteristics']:
                loop_characteristics.append(child)
            elif tag_name == 'incoming':
                incoming_elements.append(child)
            elif tag_name == 'outgoing':
                outgoing_elements.append(child)
            else:
                other_elements.append(child)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        current_order = [child.tag.split('}')[-1] if '}' in child.tag else child.tag for child in children]
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        correct_order = []
        
        # 1. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –Ω–∞—á–∞–ª–µ
        correct_order.extend(extension_elements)
        correct_order.extend(io_specification)
        correct_order.extend(properties)
        correct_order.extend(data_associations)
        correct_order.extend(resource_roles)
        correct_order.extend(loop_characteristics)
        
        # 2. –í—Å–µ incoming —ç–ª–µ–º–µ–Ω—Ç—ã
        correct_order.extend(incoming_elements)
        
        # 3. –í—Å–µ outgoing —ç–ª–µ–º–µ–Ω—Ç—ã
        correct_order.extend(outgoing_elements)
        
        # 4. –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        correct_order.extend(other_elements)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –ø–æ—Ä—è–¥–æ–∫
        new_order = [child.tag.split('}')[-1] if '}' in child.tag else child.tag for child in correct_order]
        
        if current_order != new_order:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for child in children:
                element.remove(child)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            for child in correct_order:
                element.append(child)
            
            return True
        
        return False
    
    def _fix_sequence_flow_order(self, flow):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ sequenceFlow"""
        children = list(flow)
        
        if len(children) <= 1:
            return False
        
        # –î–ª—è sequenceFlow –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫:
        # 1. extensionElements (–µ—Å–ª–∏ –µ—Å—Ç—å)
        # 2. conditionExpression (–µ—Å–ª–∏ –µ—Å—Ç—å)
        # 3. –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        
        extension_elements = []
        condition_expressions = []
        other_elements = []
        
        for child in children:
            tag_name = child.tag.split('}')[-1] if '}' in child.tag else child.tag
            
            if tag_name == 'extensionElements':
                extension_elements.append(child)
            elif tag_name == 'conditionExpression':
                condition_expressions.append(child)
            else:
                other_elements.append(child)
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        correct_order = []
        correct_order.extend(extension_elements)
        correct_order.extend(condition_expressions)
        correct_order.extend(other_elements)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if len(correct_order) != len(children) or any(correct_order[i] != children[i] for i in range(len(children))):
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for child in children:
                flow.remove(child)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            for child in correct_order:
                flow.append(child)
            
            return True
        
        return False
    
    def _fix_default_flows(self, root):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã default flow - —É–±—Ä–∞—Ç—å –∞—Ç—Ä–∏–±—É—Ç default —É –ø–æ—Ç–æ–∫–æ–≤ —Å —É—Å–ª–æ–≤–∏—è–º–∏"""
        print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ default flow –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
        
        fixed_count = 0
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ exclusiveGateway —ç–ª–µ–º–µ–Ω—Ç—ã
        for gateway in root.findall('.//bpmn:exclusiveGateway', self.namespaces):
            gateway_id = gateway.get('id')
            default_flow_id = gateway.get('default')
            
            # –ï—Å–ª–∏ —É —à–ª—é–∑–∞ –µ—Å—Ç—å –∞—Ç—Ä–∏–±—É—Ç default
            if default_flow_id:
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π sequenceFlow
                default_flow = root.find(f'.//bpmn:sequenceFlow[@id="{default_flow_id}"]', self.namespaces)
                
                if default_flow is not None:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ—Ç–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ
                    condition = default_flow.find('bpmn:conditionExpression', self.namespaces)
                    
                    if condition is not None:
                        # –ü–æ—Ç–æ–∫ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ default –ò –∏–º–µ–µ—Ç —É—Å–ª–æ–≤–∏–µ - —ç—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç!
                        print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç: Gateway '{gateway_id}' ‚Üí Flow '{default_flow_id}' (default + —É—Å–ª–æ–≤–∏–µ)")
                        
                        # –£–±–∏—Ä–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç default —É —à–ª—é–∑–∞
                        gateway.attrib.pop('default', None)
                        
                        print(f"   ‚úÖ –£–±—Ä–∞–Ω –∞—Ç—Ä–∏–±—É—Ç default —É —à–ª—é–∑–∞ '{gateway_id}'")
                        fixed_count += 1
                
                else:
                    print(f"   ‚ö†Ô∏è Default flow '{default_flow_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —à–ª—é–∑–∞ '{gateway_id}'")
        
        if fixed_count > 0:
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ default flow")
        else:
            print("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ default flow –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def _clean_diagram_elements(self, root):
        """–û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —Å—Å—ã–ª–∞—é—â–∏–µ—Å—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã"""
        print("üîß –û—á–∏—Å—Ç–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
        
        removed_count = 0
        
        # –ù–∞—Ö–æ–¥–∏–º BPMNDiagram
        bpmn_diagram = root.find('.//bpmndi:BPMNDiagram', self.namespaces)
        if bpmn_diagram is None:
            print("‚ö†Ô∏è BPMNDiagram –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –£–¥–∞–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞
        for shape in bpmn_diagram.findall('.//bpmndi:BPMNShape', self.namespaces):
            bpmn_element = shape.get('bpmnElement')
            if bpmn_element in self.removed_elements:
                parent = self._find_parent(root, shape)
                if parent is not None:
                    parent.remove(shape)
                    removed_count += 1
        
        for edge in bpmn_diagram.findall('.//bpmndi:BPMNEdge', self.namespaces):
            bpmn_element = edge.get('bpmnElement')
            if bpmn_element in self.removed_elements or bpmn_element in self.removed_flows:
                parent = self._find_parent(root, edge)
                if parent is not None:
                    parent.remove(edge)
                    removed_count += 1
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    
    def _update_bpmn_plane(self, root):
        """–û–±–Ω–æ–≤–∏—Ç—å BPMNPlane —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º bpmnElement"""
        print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ BPMNPlane...")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ü–µ—Å—Å
        process = root.find('.//bpmn:process', self.namespaces)
        if process is None:
            print("‚ö†Ô∏è Process –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        process_id = process.get('id')
        if not process_id:
            print("‚ö†Ô∏è Process ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º BPMNPlane
        bpmn_plane = root.find('.//bpmndi:BPMNPlane', self.namespaces)
        if bpmn_plane is None:
            print("‚ö†Ô∏è BPMNPlane –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π bpmnElement
        bpmn_plane.set('bpmnElement', process_id)
        
        print(f"‚úÖ BPMNPlane –æ–±–Ω–æ–≤–ª–µ–Ω (bpmnElement: {process_id})")
    
    def _save_result(self, tree, output_file):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        tree.write(
            output_file,
            encoding='utf-8',
            xml_declaration=True,
            method='xml'
        )
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        with open(output_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        content = content.replace(
            "<?xml version='1.0' encoding='utf-8'?>",
            '<?xml version="1.0" encoding="UTF-8"?>'
        )
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ namespace-—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        content = self._remove_duplicate_namespaces(content)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    
    def _remove_duplicate_namespaces(self, content):
        """–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ namespace-—ã"""
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å definitions
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if '<bpmn:definitions' in line:
                # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ xmlns:camunda –∏ xmlns:xsi –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
                # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–¥–Ω–æ
                import re
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è xmlns:camunda –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
                camunda_matches = list(re.finditer(r'xmlns:camunda="[^"]*"', line))
                if len(camunda_matches) > 1:
                    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
                    for match in reversed(camunda_matches[1:]):
                        line = line[:match.start()] + line[match.end():]
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è xmlns:xsi –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
                xsi_matches = list(re.finditer(r'xmlns:xsi="[^"]*"', line))
                if len(xsi_matches) > 1:
                    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
                    for match in reversed(xsi_matches[1:]):
                        line = line[:match.start()] + line[match.end():]
                
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                line = re.sub(r'\s+', ' ', line)
                
                lines[i] = line
                break
        
        return '\n'.join(lines)


def main():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if len(sys.argv) > 1:
        converter = BPMNConverter()
        try:
            result = converter.convert_file(sys.argv[1])
            print(f"\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {result}")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            print(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            import traceback
            print("üìç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
            traceback.print_exc(limit=3)
            return 1
    else:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python bpmn_converter.py <input_file.bpmn>")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main()) 