#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
BPMN Converter - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ö–µ–º –∏–∑ StormBPMN –≤ Camunda —Ñ–æ—Ä–º–∞—Ç
–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2024
"""

import sys
import os
import xml.etree.ElementTree as ET
from typing import Dict, List, Set, Optional
import uuid
import re
from pathlib import Path


class BPMNConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ BPMN —Å—Ö–µ–º –∏–∑ StormBPMN –≤ Camunda —Ñ–æ—Ä–º–∞—Ç"""
    
    def __init__(self):
        self.namespaces = {
            'bpmn': 'http://www.omg.org/spec/BPMN/20100524/MODEL',
            'bpmndi': 'http://www.omg.org/spec/BPMN/20100524/DI',
            'di': 'http://www.omg.org/spec/DD/20100524/DI',
            'dc': 'http://www.omg.org/spec/DD/20100524/DC',
            'camunda': 'http://camunda.org/schema/1.0/bpmn',
            'xsi': 'http://www.w3.org/2001/XMLSchema-instance'
        }
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω –¥–ª—è ElementTree
        for prefix, uri in self.namespaces.items():
            ET.register_namespace(prefix, uri)
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        self.elements_to_remove = {
            'intermediateCatchEvent',
            'intermediateThrowEvent', 
            'messageEventDefinition',
            'timerEventDefinition'
        }
        
        # –¢–∏–ø—ã –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ serviceTask
        self.task_types_to_convert = {
            'userTask', 'manualTask', 'callActivity', 'task'
        }
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.removed_elements: Set[str] = set()
        self.removed_flows: Set[str] = set()
        
    def convert_file(self, input_file: str, assignees_data: Optional[List[Dict]] = None) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å BPMN —Ñ–∞–π–ª"""
        print(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {input_file}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
        self.assignees_data = assignees_data or []
        if self.assignees_data:
            print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.assignees_data)} –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(input_file):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        input_path = Path(input_file)
        output_file = str(input_path.parent / f"camunda_{input_path.name}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º XML
        try:
            tree = ET.parse(input_file)
            root = tree.getroot()
        except ET.ParseError as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
        
        print("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–´: –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        # process_id = self._get_process_id(root)
        # extension_module = None
        
        # if process_id:
        #     extension_module = self._load_process_extension(process_id)
        
        # # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ)  
        # if extension_module:
        #     try:
        #         print("üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...")
        #         extension_module.pre_process(root, self)
        #         print("‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        #     except Exception as e:
        #         print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        #         print("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        
        # –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è Process_1d4oa6g46 (–ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞)
        self._insert_intermediate_tasks_for_yes_flows(root)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self._add_camunda_namespaces(root)
        self._update_process_attributes(root)
        self._remove_collaboration_section(root)
        self._remove_intermediate_events(root)
        self._convert_tasks_to_service_tasks(root)
        self._add_assignee_properties(root)
        self._add_condition_expressions(root)
        self._fix_element_order(root)
        self._fix_default_flows(root)
        self._clean_diagram_elements(root)
        self._update_bpmn_plane(root)
        
        # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ)
        # if extension_module:
        #     try:
        #         print("üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...")
        #         extension_module.post_process(root, self)
        #         print("‚úÖ –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        #     except Exception as e:
        #         print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        #         print("–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
        
        # –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è Process_1d4oa6g46 (–ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞)
        self._assign_responsible_to_unassigned_tasks(root)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self._save_result(tree, output_file)
        
        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        
        return output_file
    
    def _find_parent(self, root, element):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è ElementTree"""
        for parent in root.iter():
            if element in parent:
                return parent
        return None
    
    def _add_camunda_namespaces(self, root):
        """–î–æ–±–∞–≤–∏—Ç—å Camunda namespaces"""
        print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Camunda namespaces...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        current_attribs = dict(root.attrib)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        camunda_ns = "xmlns:camunda"
        xsi_ns = "xmlns:xsi"
        
        if camunda_ns not in current_attribs:
            root.set(camunda_ns, self.namespaces['camunda'])
        
        if xsi_ns not in current_attribs:
            root.set(xsi_ns, self.namespaces['xsi'])
        
        print("‚úÖ Namespaces –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    def _update_process_attributes(self, root):
        """–û–±–Ω–æ–≤–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Collaboration/Participant
        process_data = self._extract_process_data_from_collaboration(root)
        
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç process
        process = root.find('.//bpmn:process', self.namespaces)
        if process is not None:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ—Ü–µ—Å—Å–∞
            current_id = process.get('id')
            
            # –ï—Å–ª–∏ –∏–∑ Collaboration –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if process_data['id'] and process_data['id'] != current_id:
                print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º ID –ø—Ä–æ—Ü–µ—Å—Å–∞: {current_id} ‚Üí {process_data['id']}")
                process.set('id', process_data['id'])
                current_id = process_data['id']
            elif not current_id:
                # –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç ID, —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
                current_id = 'Process_default'
                process.set('id', current_id)
                print(f"‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π ID –ø—Ä–æ—Ü–µ—Å—Å–∞: {current_id}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isExecutable –≤ true
            process.set('isExecutable', 'true')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ Camunda –∞—Ç—Ä–∏–±—É—Ç—ã
            process.set('{http://camunda.org/schema/1.0/bpmn}historyTimeToLive', '1')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º name –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö Collaboration/Participant
            if process_data['name']:
                print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {process_data['name']}")
                process.set('name', process_data['name'])
            elif not process.get('name'):
                # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –≤–æ–æ–±—â–µ, —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
                default_name = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å'
                process.set('name', default_name)
                print(f"‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {default_name}")
            
            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω (ID: {current_id})")
        else:
            print("‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç process –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def _remove_collaboration_section(self, root):
        """–£–¥–∞–ª–∏—Ç—å —Å–µ–∫—Ü–∏—é collaboration"""
        print("üîß –£–¥–∞–ª–µ–Ω–∏–µ collaboration —Å–µ–∫—Ü–∏–∏...")
        
        removed_count = 0
        
        # –£–¥–∞–ª—è–µ–º collaboration –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for element in root.findall('.//bpmn:collaboration', self.namespaces):
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID —É–¥–∞–ª—è–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            collab_id = element.get('id')
            if collab_id:
                self.removed_elements.add(collab_id)
            
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for child in element.iter():
                child_id = child.get('id')
                if child_id:
                    self.removed_elements.add(child_id)
            
            root.remove(element)
            removed_count += 1
        
        # –£–¥–∞–ª—è–µ–º textAnnotation, group, association
        for tag in ['textAnnotation', 'group', 'association']:
            for element in root.findall(f'.//bpmn:{tag}', self.namespaces):
                element_id = element.get('id')
                if element_id:
                    self.removed_elements.add(element_id)
                
                parent = self._find_parent(root, element)
                if parent is not None:
                    parent.remove(element)
                    removed_count += 1
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ collaboration")
    
    def _remove_intermediate_events(self, root):
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"""
        print("üîß –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...")
        
        removed_count = 0
        flows_to_redirect = {}  # incoming_flow_id -> new_target_ref
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        for event_type in self.elements_to_remove:
            for event in root.findall(f'.//bpmn:{event_type}', self.namespaces):
                event_id = event.get('id')
                if event_id:
                    self.removed_elements.add(event_id)
                    
                    # –î–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞—Ö–æ–¥–∏–º –≤—Ö–æ–¥—è—â–∏–µ –∏ –∏—Å—Ö–æ–¥—è—â–∏–µ –ø–æ—Ç–æ–∫–∏
                    if event_type in ['intermediateCatchEvent', 'intermediateThrowEvent']:
                        incoming = event.find('bpmn:incoming', self.namespaces)
                        outgoing = event.find('bpmn:outgoing', self.namespaces)
                        
                        if incoming is not None and outgoing is not None:
                            incoming_flow_id = incoming.text
                            outgoing_flow_id = outgoing.text
                            
                            # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è target
                            outgoing_seq = root.find(f'.//bpmn:sequenceFlow[@id="{outgoing_flow_id}"]', self.namespaces)
                            if outgoing_seq is not None:
                                new_target_ref = outgoing_seq.get('targetRef')
                                if new_target_ref:
                                    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫
                                    flows_to_redirect[incoming_flow_id] = new_target_ref
                            
                            # –ü–æ–º–µ—á–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                            self.removed_flows.add(outgoing_flow_id)
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                parent = self._find_parent(root, event)
                if parent is not None:
                    parent.remove(event)
                    removed_count += 1
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –ø–æ—Ç–æ–∫–∏ –Ω–∞ –Ω–æ–≤—ã–µ —Ü–µ–ª–∏
        for flow_id, new_target in flows_to_redirect.items():
            flow = root.find(f'.//bpmn:sequenceFlow[@id="{flow_id}"]', self.namespaces)
            if flow is not None:
                old_target = flow.get('targetRef')
                flow.set('targetRef', new_target)
                print(f"   ‚Ü™Ô∏è –ü–æ—Ç–æ–∫ {flow_id} –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω: {old_target} ‚Üí {new_target}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                self._update_flow_diagram_coordinates(root, flow_id, new_target)
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ –ø–æ—Ç–æ–∫–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        for flow in root.findall('.//bpmn:sequenceFlow', self.namespaces):
            flow_id = flow.get('id')
            if flow_id in self.removed_flows:
                parent = self._find_parent(root, flow)
                if parent is not None:
                    parent.remove(flow)
                    removed_count += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞
        self._update_element_references(root)
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –ø–æ—Ç–æ–∫–æ–≤")
        
    def _update_flow_diagram_coordinates(self, root, flow_id, new_target_ref):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Ç–æ–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        print(f"   üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø–æ—Ç–æ–∫–∞ {flow_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Ç–æ–∫–∞
        flow_edge = root.find(f'.//bpmndi:BPMNEdge[@bpmnElement="{flow_id}"]', self.namespaces)
        if flow_edge is None:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–æ–≤–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        target_shape = root.find(f'.//bpmndi:BPMNShape[@bpmnElement="{new_target_ref}"]', self.namespaces)
        if target_shape is None:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–æ–≤–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        bounds = target_shape.find('dc:Bounds', self.namespaces)
        if bounds is None:
            return
        
        target_x = int(bounds.get('x', 0))
        target_y = int(bounds.get('y', 0))
        target_height = int(bounds.get('height', 80))
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –ª–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã —Ü–µ–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        new_x = target_x
        new_y = target_y + target_height // 2
        
        # –û–±–Ω–æ–≤–ª—è–µ–º waypoints –ø–æ—Ç–æ–∫–∞
        waypoints = flow_edge.findall('di:waypoint', self.namespaces)
        if len(waypoints) >= 2:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π waypoint (–∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É)
            last_waypoint = waypoints[-1]
            last_waypoint.set('x', str(new_x))
            last_waypoint.set('y', str(new_y))
            print(f"      üìç Waypoint –æ–±–Ω–æ–≤–ª–µ–Ω: x={new_x}, y={new_y}")
    
    def _update_element_references(self, root):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ incoming/outgoing –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
        
        updated_count = 0
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
        for element in root.findall('.//*[@id]', self.namespaces):
            # –û–±–Ω–æ–≤–ª—è–µ–º incoming —Å—Å—ã–ª–∫–∏
            for incoming in element.findall('bpmn:incoming', self.namespaces):
                flow_id = incoming.text
                if flow_id in self.removed_flows:
                    # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫
                    element.remove(incoming)
                    updated_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º outgoing —Å—Å—ã–ª–∫–∏
            for outgoing in element.findall('bpmn:outgoing', self.namespaces):
                flow_id = outgoing.text
                if flow_id in self.removed_flows:
                    # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫
                    element.remove(outgoing)
                    updated_count += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ incoming —Å—Å—ã–ª–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–ø–µ—Ä—å —É–∫–∞–∑—ã–≤–∞—é—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        for flow in root.findall('.//bpmn:sequenceFlow', self.namespaces):
            flow_id = flow.get('id')
            target_ref = flow.get('targetRef')
            
            if target_ref:
                # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
                target_element = root.find(f'.//*[@id="{target_ref}"]', self.namespaces)
                if target_element is not None:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫
                    has_incoming = False
                    for incoming in target_element.findall('bpmn:incoming', self.namespaces):
                        if incoming.text == flow_id:
                            has_incoming = True
                            break
                    
                    if not has_incoming:
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Å—Å—ã–ª–∫—É
                        incoming_element = ET.SubElement(target_element, f'{{{self.namespaces["bpmn"]}}}incoming')
                        incoming_element.text = flow_id
                        updated_count += 1
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Å—Å—ã–ª–æ–∫")
    
    def _convert_tasks_to_service_tasks(self, root):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á –≤ serviceTask"""
        print("üîß –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–¥–∞—á –≤ serviceTask...")
        
        converted_count = 0
        
        for task_type in self.task_types_to_convert:
            for task in root.findall(f'.//bpmn:{task_type}', self.namespaces):
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π serviceTask —ç–ª–µ–º–µ–Ω—Ç
                service_task = ET.Element(f'{{{self.namespaces["bpmn"]}}}serviceTask')
                
                # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                for key, value in task.attrib.items():
                    service_task.set(key, value)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ Camunda –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è external tasks
                service_task.set(f'{{{self.namespaces["camunda"]}}}type', 'external')
                service_task.set(f'{{{self.namespaces["camunda"]}}}topic', 'bitrix_create_task')
                
                # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                for child in task:
                    service_task.append(child)
                
                # –ó–∞–º–µ–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
                parent = self._find_parent(root, task)
                if parent is not None:
                    parent.insert(list(parent).index(task), service_task)
                    parent.remove(task)
                    converted_count += 1
        
        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {converted_count} –∑–∞–¥–∞—á")
    
    def _add_assignee_properties(self, root):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫ serviceTask —ç–ª–µ–º–µ–Ω—Ç–∞–º"""
        if not self.assignees_data:
            print("üìã –î–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ")
            return
        
        print("üîß –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤ serviceTask —ç–ª–µ–º–µ–Ω—Ç—ã...")
        
        added_count = 0
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ elementId
        assignees_by_element = {}
        for assignee in self.assignees_data:
            element_id = assignee.get('elementId')
            if element_id:
                if element_id not in assignees_by_element:
                    assignees_by_element[element_id] = []
                assignees_by_element[element_id].append(assignee)
        
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–ª—è {len(assignees_by_element)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ serviceTask —ç–ª–µ–º–µ–Ω—Ç—ã
        for service_task in root.findall('.//bpmn:serviceTask', self.namespaces):
            task_id = service_task.get('id')
            
            if task_id and task_id in assignees_by_element:
                assignees_list = assignees_by_element[task_id]
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ (–æ–±—ã—á–Ω–æ –æ–¥–∏–Ω –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç)
                assignee = assignees_list[0]
                assignee_name = assignee.get('assigneeName', '')
                assignee_id = str(assignee.get('assigneeId', ''))
                
                if assignee_name and assignee_id:
                    # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º extensionElements
                    extension_elements = service_task.find('bpmn:extensionElements', self.namespaces)
                    if extension_elements is None:
                        extension_elements = ET.SubElement(
                            service_task, 
                            f'{{{self.namespaces["bpmn"]}}}extensionElements'
                        )
                    
                    # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º camunda:properties
                    properties = extension_elements.find('camunda:properties', self.namespaces)
                    if properties is None:
                        properties = ET.SubElement(
                            extension_elements,
                            f'{{{self.namespaces["camunda"]}}}properties'
                        )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ assigneeName
                    assignee_name_prop = ET.SubElement(
                        properties,
                        f'{{{self.namespaces["camunda"]}}}property'
                    )
                    assignee_name_prop.set('name', 'assigneeName')
                    assignee_name_prop.set('value', assignee_name)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ assigneeId
                    assignee_id_prop = ET.SubElement(
                        properties,
                        f'{{{self.namespaces["camunda"]}}}property'
                    )
                    assignee_id_prop.set('name', 'assigneeId')
                    assignee_id_prop.set('value', assignee_id)
                    
                    print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–ª—è {task_id}: {assignee_name} ({assignee_id})")
                    added_count += 1
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
                    if len(assignees_list) > 1:
                        print(f"   ‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç {task_id} –∏–º–µ–µ—Ç {len(assignees_list)} –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π")
        
        print(f"‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–æ {added_count} –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö")
    
    def _add_condition_expressions(self, root):
        """–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∫ –ø–æ—Ç–æ–∫–∞–º"""
        print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π...")
        
        added_count = 0
        updated_tasks = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á, –∫ –∫–æ—Ç–æ—Ä—ã–º —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤–æ–π—Å—Ç–≤–∞
        
        for flow in root.findall('.//bpmn:sequenceFlow', self.namespaces):
            name = flow.get('name', '').lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ conditionExpression
            existing_condition = flow.find('bpmn:conditionExpression', self.namespaces)
            
            if not existing_condition and name in ['–¥–∞', '–Ω–µ—Ç']:
                source_ref = flow.get('sourceRef')
                
                if source_ref:
                    # –ò—â–µ–º serviceTask, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–µ–ª –∫ —ç—Ç–æ–º—É —à–ª—é–∑—É
                    service_task_id = self._find_source_service_task(root, source_ref)
                    
                    if service_task_id:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ID serviceTask
                        if name == '–¥–∞':
                            condition_expr = '${' + service_task_id + ' == "ok"}'
                        elif name == '–Ω–µ—Ç':
                            condition_expr = '${' + service_task_id + ' != "ok"}'
                        
                        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç conditionExpression
                        condition_element = ET.SubElement(
                            flow, 
                            f'{{{self.namespaces["bpmn"]}}}conditionExpression'
                        )
                        condition_element.set(
                            f'{{{self.namespaces["xsi"]}}}type',
                            'bpmn:tFormalExpression'
                        )
                        condition_element.text = condition_expr
                        added_count += 1
                        
                        print(f"   ‚úÖ –ü–æ—Ç–æ–∫ {flow.get('id')} ({name}): {condition_expr}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ
                        if service_task_id not in updated_tasks:
                            gateway_name = self._get_gateway_name(root, source_ref)
                            if gateway_name:
                                self._add_result_properties_to_task(root, service_task_id, gateway_name)
                                updated_tasks.add(service_task_id)
                                print(f"   üîß –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–≤–æ–π—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫ –∑–∞–¥–∞—á–µ {service_task_id}")
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω serviceTask –¥–ª—è –ø–æ—Ç–æ–∫–∞ {flow.get('id')} –∏–∑ —à–ª—é–∑–∞ {source_ref}")
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —É—Å–ª–æ–≤–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π")
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(updated_tasks)} –∑–∞–¥–∞—á —Å —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    
    def _find_source_service_task(self, root, gateway_id, visited=None):
        """–ù–∞–π—Ç–∏ serviceTask, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–µ–ª –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —à–ª—é–∑—É (—Å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º)"""
        if visited is None:
            visited = set()
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
        if gateway_id in visited:
            print(f"   ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è {gateway_id}")
            return None
        
        visited.add(gateway_id)
        
        # –ù–∞—Ö–æ–¥–∏–º —à–ª—é–∑ (inclusiveGateway –∏–ª–∏ exclusiveGateway)
        gateway = None
        for gateway_type in ['inclusiveGateway', 'exclusiveGateway']:
            gateway = root.find(f'.//bpmn:{gateway_type}[@id="{gateway_id}"]', self.namespaces)
            if gateway is not None:
                break
        
        if gateway is None:
            print(f"   ‚ö†Ô∏è –®–ª—é–∑ {gateway_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ —à–ª—é–∑–∞ (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ)
        incoming_element = gateway.find('bpmn:incoming', self.namespaces)
        if incoming_element is None:
            print(f"   ‚ö†Ô∏è –í—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è —à–ª—é–∑–∞ {gateway_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        incoming_flow_id = incoming_element.text
        
        # –ù–∞—Ö–æ–¥–∏–º sequenceFlow —Å —ç—Ç–∏–º ID
        incoming_flow = root.find(f'.//bpmn:sequenceFlow[@id="{incoming_flow_id}"]', self.namespaces)
        if incoming_flow is None:
            print(f"   ‚ö†Ô∏è –í—Ö–æ–¥—è—â–∏–π sequenceFlow {incoming_flow_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º sourceRef –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
        source_ref = incoming_flow.get('sourceRef')
        if not source_ref:
            print(f"   ‚ö†Ô∏è sourceRef –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ {incoming_flow_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –∑–∞–¥–∞—á—É
        return self._find_task_recursively(root, source_ref, visited.copy())
    
    def _find_task_recursively(self, root, element_id, visited):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –∑–∞–¥–∞—á—É –≤ —Ü–µ–ø–æ—á–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
        if element_id in visited:
            print(f"   ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ {element_id}")
            return None
        
        visited.add(element_id)
        
        # –¢–∏–ø—ã –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        task_types = ['task', 'serviceTask', 'userTask', 'manualTask', 'businessRuleTask',
                     'scriptTask', 'sendTask', 'receiveTask', 'callActivity']
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∑–∞–¥–∞—á–µ–π
        for task_type in task_types:
            task = root.find(f'.//bpmn:{task_type}[@id="{element_id}"]', self.namespaces)
            if task is not None:
                task_name = task.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                print(f"   üîç –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task_type} {element_id} ({task_name})")
                return element_id
        
        # –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞—á–∞, –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ —Ç–∏–ø
        element = root.find(f'.//*[@id="{element_id}"]', self.namespaces)
        if element is None:
            print(f"   ‚ùå –≠–ª–µ–º–µ–Ω—Ç {element_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        element_type = element.tag.split('}')[-1] if '}' in element.tag else element.tag
        element_name = element.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        
        print(f"   üîó –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: {element_type} {element_id} ({element_name})")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if element_type in ['inclusiveGateway', 'exclusiveGateway', 'parallelGateway']:
            # –î–ª—è —à–ª—é–∑–æ–≤ –∏—â–µ–º –∏—Ö –≤—Ö–æ–¥—è—â–∏–µ –ø–æ—Ç–æ–∫–∏
            return self._find_source_through_gateway(root, element_id, element_type, visited)
        
        elif element_type in ['intermediateCatchEvent', 'intermediateThrowEvent', 'startEvent']:
            # –î–ª—è —Å–æ–±—ã—Ç–∏–π –∏—â–µ–º –∏—Ö –≤—Ö–æ–¥—è—â–∏–µ –ø–æ—Ç–æ–∫–∏
            return self._find_source_through_event(root, element_id, element_type, visited)
        
        else:
            print(f"   ‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞: {element_type}")
            return None
    
    def _find_source_through_gateway(self, root, gateway_id, gateway_type, visited):
        """–ù–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —à–ª—é–∑"""
        
        gateway = root.find(f'.//bpmn:{gateway_type}[@id="{gateway_id}"]', self.namespaces)
        if gateway is None:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –ø–æ—Ç–æ–∫–∏
        incoming_elements = gateway.findall('bpmn:incoming', self.namespaces)
        
        if not incoming_elements:
            print(f"   ‚ö†Ô∏è –ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è {gateway_type} {gateway_id}")
            return None
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É
        for incoming in incoming_elements:
            flow_id = incoming.text
            flow = root.find(f'.//bpmn:sequenceFlow[@id="{flow_id}"]', self.namespaces)
            
            if flow is not None:
                source_ref = flow.get('sourceRef')
                if source_ref:
                    print(f"   üîÑ –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø–æ—Ç–æ–∫ {flow_id} ‚Üí {source_ref}")
                    result = self._find_task_recursively(root, source_ref, visited.copy())
                    if result:
                        return result
        
        return None
    
    def _find_source_through_event(self, root, event_id, event_type, visited):
        """–ù–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"""
        
        event = root.find(f'.//bpmn:{event_type}[@id="{event_id}"]', self.namespaces)
        if event is None:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –ø–æ—Ç–æ–∫–∏ —Å–æ–±—ã—Ç–∏—è
        incoming_elements = event.findall('bpmn:incoming', self.namespaces)
        
        if not incoming_elements:
            print(f"   ‚ö†Ô∏è –ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è {event_type} {event_id}")
            return None
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ (—Å–æ–±—ã—Ç–∏—è –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –æ–¥–∏–Ω –≤—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫)
        flow_id = incoming_elements[0].text
        flow = root.find(f'.//bpmn:sequenceFlow[@id="{flow_id}"]', self.namespaces)
        
        if flow is not None:
            source_ref = flow.get('sourceRef')
            if source_ref:
                print(f"   üîÑ –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ {flow_id} ‚Üí {source_ref}")
                return self._find_task_recursively(root, source_ref, visited.copy())
        
        return None
    
    def _get_gateway_name(self, root, gateway_id):
        """–ü–æ–ª—É—á–∏—Ç—å name —à–ª—é–∑–∞ –ø–æ –µ–≥–æ ID"""
        for gateway_type in ['inclusiveGateway', 'exclusiveGateway', 'parallelGateway']:
            gateway = root.find(f'.//bpmn:{gateway_type}[@id="{gateway_id}"]', self.namespaces)
            if gateway is not None:
                return gateway.get('name', '')
        return None
    
    def _add_result_properties_to_task(self, root, service_task_id, gateway_name):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ UF_RESULT_EXPECTED –∏ UF_RESULT_QUESTION –∫ serviceTask"""
        
        # –ù–∞—Ö–æ–¥–∏–º serviceTask
        service_task = root.find(f'.//bpmn:serviceTask[@id="{service_task_id}"]', self.namespaces)
        if service_task is None:
            print(f"   ‚ö†Ô∏è ServiceTask {service_task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º extensionElements
        extension_elements = service_task.find('bpmn:extensionElements', self.namespaces)
        if extension_elements is None:
            extension_elements = ET.SubElement(
                service_task, 
                f'{{{self.namespaces["bpmn"]}}}extensionElements'
            )
        
        # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º camunda:properties
        properties = extension_elements.find('camunda:properties', self.namespaces)
        if properties is None:
            properties = ET.SubElement(
                extension_elements,
                f'{{{self.namespaces["camunda"]}}}properties'
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å–≤–æ–π—Å—Ç–≤–∞ UF_RESULT_EXPECTED
        existing_expected = None
        existing_question = None
        for prop in properties.findall('camunda:property', self.namespaces):
            prop_name = prop.get('name')
            if prop_name == 'UF_RESULT_EXPECTED':
                existing_expected = prop
            elif prop_name == 'UF_RESULT_QUESTION':
                existing_question = prop
        
        # –î–æ–±–∞–≤–ª—è–µ–º UF_RESULT_EXPECTED –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if existing_expected is None:
            result_expected_prop = ET.SubElement(
                properties,
                f'{{{self.namespaces["camunda"]}}}property'
            )
            result_expected_prop.set('name', 'UF_RESULT_EXPECTED')
            result_expected_prop.set('value', 'true')
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            existing_expected.set('value', 'true')
        
        # –î–æ–±–∞–≤–ª—è–µ–º UF_RESULT_QUESTION –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if existing_question is None:
            result_question_prop = ET.SubElement(
                properties,
                f'{{{self.namespaces["camunda"]}}}property'
            )
            result_question_prop.set('name', 'UF_RESULT_QUESTION')
            result_question_prop.set('value', gateway_name)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            existing_question.set('value', gateway_name)
    
    def _fix_element_order(self, root):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ BPMN —É–∑–ª–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
        
        fixed_count = 0
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å incoming/outgoing
        process_elements = [
            'task', 'serviceTask', 'userTask', 'manualTask', 'businessRuleTask',
            'scriptTask', 'sendTask', 'receiveTask', 'callActivity',
            'startEvent', 'endEvent', 'intermediateCatchEvent', 'intermediateThrowEvent',
            'exclusiveGateway', 'parallelGateway', 'inclusiveGateway', 'eventBasedGateway',
            'complexGateway', 'subProcess'
        ]
        
        for element_type in process_elements:
            for element in root.findall(f'.//bpmn:{element_type}', self.namespaces):
                if self._fix_single_element_order(element):
                    fixed_count += 1
        
        # –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º sequenceFlow —ç–ª–µ–º–µ–Ω—Ç—ã
        for flow in root.findall('.//bpmn:sequenceFlow', self.namespaces):
            if self._fix_sequence_flow_order(flow):
                fixed_count += 1
        
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ {fixed_count} —É–∑–ª–∞—Ö")
    
    def _fix_single_element_order(self, element):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º BPMN —É–∑–ª–µ"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        children = list(element)
        
        if len(children) <= 1:
            return False  # –ù–µ—á–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        extension_elements = []
        io_specification = []
        properties = []
        data_associations = []
        resource_roles = []
        loop_characteristics = []
        incoming_elements = []
        outgoing_elements = []
        other_elements = []
        
        for child in children:
            tag_name = child.tag.split('}')[-1] if '}' in child.tag else child.tag
            
            if tag_name == 'extensionElements':
                extension_elements.append(child)
            elif tag_name == 'ioSpecification':
                io_specification.append(child)
            elif tag_name == 'property':
                properties.append(child)
            elif tag_name in ['dataInputAssociation', 'dataOutputAssociation']:
                data_associations.append(child)
            elif tag_name in ['resourceRole', 'performer', 'humanPerformer', 'potentialOwner']:
                resource_roles.append(child)
            elif tag_name in ['loopCharacteristics', 'multiInstanceLoopCharacteristics']:
                loop_characteristics.append(child)
            elif tag_name == 'incoming':
                incoming_elements.append(child)
            elif tag_name == 'outgoing':
                outgoing_elements.append(child)
            else:
                other_elements.append(child)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        current_order = [child.tag.split('}')[-1] if '}' in child.tag else child.tag for child in children]
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        correct_order = []
        
        # 1. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –Ω–∞—á–∞–ª–µ
        correct_order.extend(extension_elements)
        correct_order.extend(io_specification)
        correct_order.extend(properties)
        correct_order.extend(data_associations)
        correct_order.extend(resource_roles)
        correct_order.extend(loop_characteristics)
        
        # 2. –í—Å–µ incoming —ç–ª–µ–º–µ–Ω—Ç—ã
        correct_order.extend(incoming_elements)
        
        # 3. –í—Å–µ outgoing —ç–ª–µ–º–µ–Ω—Ç—ã
        correct_order.extend(outgoing_elements)
        
        # 4. –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        correct_order.extend(other_elements)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –ø–æ—Ä—è–¥–æ–∫
        new_order = [child.tag.split('}')[-1] if '}' in child.tag else child.tag for child in correct_order]
        
        if current_order != new_order:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for child in children:
                element.remove(child)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            for child in correct_order:
                element.append(child)
            
            return True
        
        return False
    
    def _fix_sequence_flow_order(self, flow):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ sequenceFlow"""
        children = list(flow)
        
        if len(children) <= 1:
            return False
        
        # –î–ª—è sequenceFlow –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫:
        # 1. extensionElements (–µ—Å–ª–∏ –µ—Å—Ç—å)
        # 2. conditionExpression (–µ—Å–ª–∏ –µ—Å—Ç—å)
        # 3. –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        
        extension_elements = []
        condition_expressions = []
        other_elements = []
        
        for child in children:
            tag_name = child.tag.split('}')[-1] if '}' in child.tag else child.tag
            
            if tag_name == 'extensionElements':
                extension_elements.append(child)
            elif tag_name == 'conditionExpression':
                condition_expressions.append(child)
            else:
                other_elements.append(child)
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        correct_order = []
        correct_order.extend(extension_elements)
        correct_order.extend(condition_expressions)
        correct_order.extend(other_elements)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if len(correct_order) != len(children) or any(correct_order[i] != children[i] for i in range(len(children))):
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for child in children:
                flow.remove(child)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            for child in correct_order:
                flow.append(child)
            
            return True
        
        return False
    
    def _fix_default_flows(self, root):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã default flow - —É–±—Ä–∞—Ç—å –∞—Ç—Ä–∏–±—É—Ç default —É –ø–æ—Ç–æ–∫–æ–≤ —Å —É—Å–ª–æ–≤–∏—è–º–∏"""
        print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ default flow –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
        
        fixed_count = 0
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ exclusiveGateway —ç–ª–µ–º–µ–Ω—Ç—ã
        for gateway in root.findall('.//bpmn:exclusiveGateway', self.namespaces):
            gateway_id = gateway.get('id')
            default_flow_id = gateway.get('default')
            
            # –ï—Å–ª–∏ —É —à–ª—é–∑–∞ –µ—Å—Ç—å –∞—Ç—Ä–∏–±—É—Ç default
            if default_flow_id:
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π sequenceFlow
                default_flow = root.find(f'.//bpmn:sequenceFlow[@id="{default_flow_id}"]', self.namespaces)
                
                if default_flow is not None:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ—Ç–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ
                    condition = default_flow.find('bpmn:conditionExpression', self.namespaces)
                    
                    if condition is not None:
                        # –ü–æ—Ç–æ–∫ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ default –ò –∏–º–µ–µ—Ç —É—Å–ª–æ–≤–∏–µ - —ç—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç!
                        print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç: Gateway '{gateway_id}' ‚Üí Flow '{default_flow_id}' (default + —É—Å–ª–æ–≤–∏–µ)")
                        
                        # –£–±–∏—Ä–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç default —É —à–ª—é–∑–∞
                        gateway.attrib.pop('default', None)
                        
                        print(f"   ‚úÖ –£–±—Ä–∞–Ω –∞—Ç—Ä–∏–±—É—Ç default —É —à–ª—é–∑–∞ '{gateway_id}'")
                        fixed_count += 1
                
                else:
                    print(f"   ‚ö†Ô∏è Default flow '{default_flow_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —à–ª—é–∑–∞ '{gateway_id}'")
        
        if fixed_count > 0:
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ default flow")
        else:
            print("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ default flow –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def _clean_diagram_elements(self, root):
        """–û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —Å—Å—ã–ª–∞—é—â–∏–µ—Å—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã"""
        print("üîß –û—á–∏—Å—Ç–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
        
        removed_count = 0
        
        # –ù–∞—Ö–æ–¥–∏–º BPMNDiagram
        bpmn_diagram = root.find('.//bpmndi:BPMNDiagram', self.namespaces)
        if bpmn_diagram is None:
            print("‚ö†Ô∏è BPMNDiagram –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –£–¥–∞–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞
        for shape in bpmn_diagram.findall('.//bpmndi:BPMNShape', self.namespaces):
            bpmn_element = shape.get('bpmnElement')
            if bpmn_element in self.removed_elements:
                parent = self._find_parent(root, shape)
                if parent is not None:
                    parent.remove(shape)
                    removed_count += 1
        
        for edge in bpmn_diagram.findall('.//bpmndi:BPMNEdge', self.namespaces):
            bpmn_element = edge.get('bpmnElement')
            if bpmn_element in self.removed_elements or bpmn_element in self.removed_flows:
                parent = self._find_parent(root, edge)
                if parent is not None:
                    parent.remove(edge)
                    removed_count += 1
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    
    def _update_bpmn_plane(self, root):
        """–û–±–Ω–æ–≤–∏—Ç—å BPMNPlane —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º bpmnElement"""
        print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ BPMNPlane...")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ü–µ—Å—Å
        process = root.find('.//bpmn:process', self.namespaces)
        if process is None:
            print("‚ö†Ô∏è Process –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        process_id = process.get('id')
        if not process_id:
            print("‚ö†Ô∏è Process ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º BPMNPlane
        bpmn_plane = root.find('.//bpmndi:BPMNPlane', self.namespaces)
        if bpmn_plane is None:
            print("‚ö†Ô∏è BPMNPlane –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π bpmnElement
        bpmn_plane.set('bpmnElement', process_id)
        
        print(f"‚úÖ BPMNPlane –æ–±–Ω–æ–≤–ª–µ–Ω (bpmnElement: {process_id})")
    
    def _get_process_id(self, root) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á—å ID –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑ BPMN XML"""
        try:
            process = root.find('.//bpmn:process', self.namespaces)
            if process is not None:
                process_id = process.get('id')
                if process_id:
                    print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å —Å ID: {process_id}")
                    return process_id
            print("‚ö†Ô∏è ID –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ BPMN —Å—Ö–µ–º–µ")
            return None
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ ID –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            return None

    def _extract_process_data_from_collaboration(self, root) -> Dict[str, Optional[str]]:
        """
        –ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑ Collaboration/Participant
        
        Returns:
            Dict —Å –∫–ª—é—á–∞–º–∏ 'id' –∏ 'name' –ø—Ä–æ—Ü–µ—Å—Å–∞, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ participant
        """
        try:
            # –ò—â–µ–º collaboration
            collaboration = root.find('.//bpmn:collaboration', self.namespaces)
            if collaboration is None:
                print("üìã Collaboration –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–∞")
                # –ï—Å–ª–∏ –Ω–µ—Ç collaboration, –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∞–º–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                process = root.find('.//bpmn:process', self.namespaces)
                if process is not None:
                    return {
                        'id': process.get('id'),
                        'name': process.get('name')
                    }
                return {'id': None, 'name': None}
            
            # –ò—â–µ–º –ø–µ—Ä–≤–æ–≥–æ participant
            participants = collaboration.findall('bpmn:participant', self.namespaces)
            if not participants:
                print("‚ö†Ô∏è Participant –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Collaboration")
                return {'id': None, 'name': None}
            
            first_participant = participants[0]
            participant_id = first_participant.get('id')
            participant_name = first_participant.get('name', '')
            process_ref = first_participant.get('processRef')
            
            print(f"üîç –ù–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π participant:")
            print(f"   ID: {participant_id}")
            print(f"   Name: {participant_name}")
            print(f"   ProcessRef: {process_ref}")
            
            # –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ –æ—Ç HTML —Å–∏–º–≤–æ–ª–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
            if participant_name:
                import html
                participant_name = html.unescape(participant_name)
                # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
                participant_name = participant_name.replace('\n', ' ').replace('\r', ' ')
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                participant_name = ' '.join(participant_name.split())
            
            return {
                'id': participant_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Å–∞–º–æ–≥–æ participant –∫–∞–∫ ID –ø—Ä–æ—Ü–µ—Å—Å–∞
                'name': participant_name
            }
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Collaboration: {e}")
            return {'id': None, 'name': None}
    
    def _load_process_extension(self, process_id: str):
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        
        Args:
            process_id: ID –ø—Ä–æ—Ü–µ—Å—Å–∞
            
        Returns:
            –ú–æ–¥—É–ª—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            import importlib.util
            from pathlib import Path
            
            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            extension_path = Path(__file__).parent / "extensions" / process_id / "process_extension.py"
            
            if not extension_path.exists():
                print(f"üìã –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {process_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return None
            
            print(f"üîß –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {process_id}...")
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è
            spec = importlib.util.spec_from_file_location(
                f"process_extension_{process_id}", 
                extension_path
            )
            
            if spec is None or spec.loader is None:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –º–æ–¥—É–ª—è {process_id}")
                return None
            
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
            if not hasattr(module, 'pre_process') or not hasattr(module, 'post_process'):
                print(f"‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ {process_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥–æ–≤ pre_process/post_process")
                return None
            
            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if hasattr(module, 'EXTENSION_INFO'):
                info = module.EXTENSION_INFO
                print(f"   üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {info.get('process_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print(f"   üì¶ –í–µ—Ä—Å–∏—è: {info.get('version', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {info.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            
            print(f"   ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return module
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è {process_id}: {e}")
            return None
    
    def _save_result(self, tree, output_file):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        tree.write(
            output_file,
            encoding='utf-8',
            xml_declaration=True,
            method='xml'
        )
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        with open(output_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        content = content.replace(
            "<?xml version='1.0' encoding='utf-8'?>",
            '<?xml version="1.0" encoding="UTF-8"?>'
        )
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ namespace-—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        content = self._remove_duplicate_namespaces(content)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    
    def _remove_duplicate_namespaces(self, content):
        """–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ namespace-—ã"""
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å definitions
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if '<bpmn:definitions' in line:
                # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ xmlns:camunda –∏ xmlns:xsi –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
                # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–¥–Ω–æ
                import re
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è xmlns:camunda –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
                camunda_matches = list(re.finditer(r'xmlns:camunda="[^"]*"', line))
                if len(camunda_matches) > 1:
                    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
                    for match in reversed(camunda_matches[1:]):
                        line = line[:match.start()] + line[match.end():]
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è xmlns:xsi –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
                xsi_matches = list(re.finditer(r'xmlns:xsi="[^"]*"', line))
                if len(xsi_matches) > 1:
                    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
                    for match in reversed(xsi_matches[1:]):
                        line = line[:match.start()] + line[match.end():]
                
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                line = re.sub(r'\s+', ' ', line)
                
                lines[i] = line
                break
        
        return '\n'.join(lines)

    def _insert_intermediate_tasks_for_yes_flows(self, root):
        """
        –í—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É —à–ª—é–∑–∞–º–∏ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ —Ü–µ–ø–æ—á–µ–∫ Gateway ‚Üí Gateway
        (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è Process_1d4oa6g46)
        """
        print("üîß –í—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á –º–µ–∂–¥—É —à–ª—é–∑–∞–º–∏...")
        
        # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö sequenceFlow —Å name="–¥–∞" –∏ –≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á
        inserted_tasks = self._insert_intermediate_tasks_for_yes_flows_impl(root)
        
        if inserted_tasks > 0:
            print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á: {inserted_tasks}")
        else:
            print("‚úÖ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
    
    def _insert_intermediate_tasks_for_yes_flows_impl(self, root) -> int:
        """
        –ù–∞–π—Ç–∏ –≤—Å–µ sequenceFlow —Å name="–¥–∞" –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É —à–ª—é–∑–∞–º–∏
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        """
        print("   üîç –ü–æ–∏—Å–∫ sequenceFlow —Å name='–¥–∞' –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á...")
        
        inserted_count = 0
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ sequenceFlow —Å name="–¥–∞"
        yes_flows = []
        for flow in root.findall('.//bpmn:sequenceFlow', self.namespaces):
            name = flow.get('name', '').lower()
            if name == '–¥–∞':
                yes_flows.append(flow)
        
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ sequenceFlow —Å name='–¥–∞': {len(yes_flows)}")
        
        for flow in yes_flows:
            flow_id = flow.get('id')
            source_ref = flow.get('sourceRef')
            
            if not source_ref:
                print(f"      ‚ö†Ô∏è –ü–æ—Ç–æ–∫ {flow_id} –Ω–µ –∏–º–µ–µ—Ç sourceRef")
                continue
            
            print(f"   üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ {flow_id}: sourceRef={source_ref}")
            
            # –ù–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã–π Gateway
            source_gateway = self._find_gateway_by_id(root, source_ref)
            if not source_gateway:
                print(f"      ‚ö†Ô∏è Gateway {source_ref} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue
            
            print(f"      ‚úÖ Gateway {source_ref} –Ω–∞–π–¥–µ–Ω: {source_gateway.tag}")
            
            # –ü–æ–ª—É—á–∏—Ç—å incoming flows —ç—Ç–æ–≥–æ Gateway
            incoming_flows = source_gateway.findall('bpmn:incoming', self.namespaces)
            print(f"      üìä –ù–∞–π–¥–µ–Ω–æ incoming –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è {source_ref}: {len(incoming_flows)}")
            
            for i, incoming_element in enumerate(incoming_flows):
                incoming_flow_id = incoming_element.text
                print(f"      üîó –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º incoming –ø–æ—Ç–æ–∫ #{i+1}: {incoming_flow_id}")
                
                # –ù–∞–π—Ç–∏ incoming sequenceFlow
                incoming_flow = root.find(f'.//bpmn:sequenceFlow[@id="{incoming_flow_id}"]', self.namespaces)
                
                if incoming_flow is None:
                    print(f"         ‚ùå sequenceFlow {incoming_flow_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue
                
                incoming_source_ref = incoming_flow.get('sourceRef')
                print(f"         üìç –ò—Å—Ç–æ—á–Ω–∏–∫ incoming –ø–æ—Ç–æ–∫–∞: {incoming_source_ref}")
                
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ Gateway
                if incoming_source_ref and incoming_source_ref.startswith('Gateway_'):
                    print(f"         üéØ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ Gateway‚ÜíGateway: {incoming_source_ref} ‚Üí {source_ref}")
                    
                    # –í—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –∑–∞–¥–∞—á—É
                    print(f"         üîß –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –∑–∞–¥–∞—á–∏...")
                    task_inserted = self._insert_task_between_gateways(
                        root, incoming_flow, source_gateway, source_ref
                    )
                    
                    if task_inserted:
                        inserted_count += 1
                        print(f"         ‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞ (–≤—Å–µ–≥–æ: {inserted_count})")
                    else:
                        print(f"         ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –∑–∞–¥–∞—á—É")
                else:
                    print(f"         ‚ÑπÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ Gateway ('{incoming_source_ref}'), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
        print(f"   üìä –ò—Ç–æ–≥–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á: {inserted_count}")
        return inserted_count

    def _find_gateway_by_id(self, root, gateway_id: str):
        """–ù–∞–π—Ç–∏ Gateway –ø–æ ID"""
        for gateway_type in ['exclusiveGateway', 'inclusiveGateway', 'parallelGateway']:
            gateway = root.find(f'.//bpmn:{gateway_type}[@id="{gateway_id}"]', self.namespaces)
            if gateway is not None:
                return gateway
        return None

    def _insert_task_between_gateways(self, root, incoming_flow, target_gateway, target_gateway_id: str) -> bool:
        """
        –í—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –∑–∞–¥–∞—á—É –º–µ–∂–¥—É –¥–≤—É–º—è Gateway
        
        Args:
            root: –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç BPMN XML
            incoming_flow: sequenceFlow –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å
            target_gateway: Gateway, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
            target_gateway_id: ID —Ü–µ–ª–µ–≤–æ–≥–æ Gateway
        
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞
        """
        try:
            incoming_flow_id = incoming_flow.get('id')
            print(f"         üîß –ù–∞—á–∏–Ω–∞–µ–º –≤—Å—Ç–∞–≤–∫—É –∑–∞–¥–∞—á–∏ –¥–ª—è incoming_flow: {incoming_flow_id}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
            new_task_id = self._generate_unique_activity_id(root)
            new_flow_id = self._generate_unique_flow_id(root)
            print(f"         üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã ID: task={new_task_id}, flow={new_flow_id}")
            
            # –ü–æ–ª—É—á–∏—Ç—å name —Ü–µ–ª–µ–≤–æ–≥–æ Gateway –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏
            gateway_name = target_gateway.get('name', '—É—Å–ª–æ–≤–∏–µ')
            task_name = f"–í—ã—è—Å–Ω–∏—Ç—å: {gateway_name}"
            
            print(f"         üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ {new_task_id}: '{task_name}'")
            
            # –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç process –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
            process_element = root.find('.//bpmn:process', self.namespaces)
            if not process_element:
                print(f"         ‚ùå –≠–ª–µ–º–µ–Ω—Ç process –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            print(f"         ‚úÖ Process —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω")
            
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É (serviceTask –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Camunda)
            new_task = ET.SubElement(process_element, f'{{{self.namespaces["bpmn"]}}}serviceTask')
            new_task.set('id', new_task_id)
            new_task.set('name', task_name)
            new_task.set(f'{{{self.namespaces["camunda"]}}}type', 'external')
            new_task.set(f'{{{self.namespaces["camunda"]}}}topic', 'bitrix_create_task')
            
            # –°–æ–∑–¥–∞—Ç—å extensionElements —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
            extension_elements = ET.SubElement(new_task, f'{{{self.namespaces["bpmn"]}}}extensionElements')
            properties = ET.SubElement(extension_elements, f'{{{self.namespaces["camunda"]}}}properties')
            
            # –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_expected_prop = ET.SubElement(properties, f'{{{self.namespaces["camunda"]}}}property')
            result_expected_prop.set('name', 'UF_RESULT_EXPECTED')
            result_expected_prop.set('value', 'true')
            
            result_question_prop = ET.SubElement(properties, f'{{{self.namespaces["camunda"]}}}property')
            result_question_prop.set('name', 'UF_RESULT_QUESTION')
            result_question_prop.set('value', gateway_name)
            
            # –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            assignee_name_prop = ET.SubElement(properties, f'{{{self.namespaces["camunda"]}}}property')
            assignee_name_prop.set('name', 'assigneeName')
            assignee_name_prop.set('value', '–†—É–∫. –æ—Ç–¥–µ–ª–∞ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–∫-—Ü–∏–∏')
            
            assignee_id_prop = ET.SubElement(properties, f'{{{self.namespaces["camunda"]}}}property')
            assignee_id_prop.set('name', 'assigneeId')
            assignee_id_prop.set('value', '15297786')
            
            print(f"         ‚úÖ –°–æ–∑–¥–∞–Ω —ç–ª–µ–º–µ–Ω—Ç serviceTask —Å extensionElements: {new_task_id}")
            
            # –î–æ–±–∞–≤–∏—Ç—å incoming –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞)
            task_incoming = ET.SubElement(new_task, f'{{{self.namespaces["bpmn"]}}}incoming')
            task_incoming.text = incoming_flow_id
            print(f"         ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω incoming: {incoming_flow_id}")
            
            # –î–æ–±–∞–≤–∏—Ç—å outgoing –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∫ —Ü–µ–ª–µ–≤–æ–º—É Gateway)
            task_outgoing = ET.SubElement(new_task, f'{{{self.namespaces["bpmn"]}}}outgoing')
            task_outgoing.text = new_flow_id
            print(f"         ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω outgoing: {new_flow_id}")
            
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π sequenceFlow –æ—Ç –∑–∞–¥–∞—á–∏ –∫ —Ü–µ–ª–µ–≤–æ–º—É Gateway
            new_sequence_flow = ET.SubElement(process_element, f'{{{self.namespaces["bpmn"]}}}sequenceFlow')
            new_sequence_flow.set('id', new_flow_id)
            new_sequence_flow.set('sourceRef', new_task_id)
            new_sequence_flow.set('targetRef', target_gateway_id)
            print(f"         ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π sequenceFlow: {new_flow_id} ({new_task_id} ‚Üí {target_gateway_id})")
            
            # –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π incoming_flow: —Ç–µ–ø–µ—Ä—å –æ–Ω –≤–µ–¥–µ—Ç –∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
            old_target = incoming_flow.get('targetRef')
            incoming_flow.set('targetRef', new_task_id)
            print(f"         ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω incoming_flow {incoming_flow_id}: {old_target} ‚Üí {new_task_id}")
            
            # –û–±–Ω–æ–≤–∏—Ç—å incoming –ø–æ—Ç–æ–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ Gateway
            self._update_gateway_incoming_flows(target_gateway, incoming_flow_id, new_flow_id)
            print(f"         ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã incoming –ø–æ—Ç–æ–∫–∏ Gateway {target_gateway_id}")
            
            # –°–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            self._create_diagram_elements_for_task(root, new_task_id, new_flow_id, target_gateway_id, incoming_flow_id)
            
            print(f"         üéâ –ó–∞–¥–∞—á–∞ {new_task_id} —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞")
            print(f"         üìé –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–ø–æ—á–∫–∞: ...‚Üí{new_task_id}‚Üí{target_gateway_id}")
            
            return True
            
        except Exception as e:
            print(f"         ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∑–∞–¥–∞—á–∏: {e}")
            import traceback
            print(f"         üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
            traceback.print_exc(limit=2)
            return False

    def _update_gateway_incoming_flows(self, gateway, old_flow_id: str, new_flow_id: str):
        """–û–±–Ω–æ–≤–∏—Ç—å incoming –ø–æ—Ç–æ–∫–∏ Gateway"""
        
        # –ù–∞–π—Ç–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π incoming —ç–ª–µ–º–µ–Ω—Ç
        for incoming in gateway.findall('bpmn:incoming', self.namespaces):
            if incoming.text == old_flow_id:
                incoming.text = new_flow_id
                break

    def _create_diagram_elements_for_task(self, root, new_task_id: str, new_flow_id: str, 
                                        target_gateway_id: str, incoming_flow_id: str) -> None:
        """–°–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∏ –ø–æ—Ç–æ–∫–∞"""
        
        try:
            # –ù–∞–π—Ç–∏ BPMNDiagram
            bpmn_diagram = root.find('.//bpmndi:BPMNDiagram', self.namespaces)
            if bpmn_diagram is None:
                print(f"         ‚ö†Ô∏è BPMNDiagram –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                return
            
            bpmn_plane = bpmn_diagram.find('.//bpmndi:BPMNPlane', self.namespaces)
            if bpmn_plane is None:
                print(f"         ‚ö†Ô∏è BPMNPlane –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                return
            
            # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            source_coords, target_coords = self._get_positioning_coordinates_for_task(
                root, incoming_flow_id, target_gateway_id
            )
            
            if source_coords is None or target_coords is None:
                print(f"         ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            # –í—ã—á–∏—Å–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
            task_width = 100
            task_height = 80
            
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            distance_from_source = 120  # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            distance_to_target = 120   # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
            if source_coords[0] + distance_from_source + task_width + distance_to_target <= target_coords[0]:
                # –ï—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏ —Ü–µ–ª—å—é
                task_x = source_coords[0] + distance_from_source
                task_y = (source_coords[1] + target_coords[1]) // 2 - task_height // 2
            else:
                # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞, —Ä–∞–∑–º–µ—â–∞–µ–º –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
                available_space = target_coords[0] - source_coords[0]
                if available_space > task_width + 40:  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∑–æ—Ä 20 –ø–∏–∫—Å–µ–ª–µ–π —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
                    task_x = source_coords[0] + (available_space - task_width) // 2
                else:
                    # –°–æ–≤—Å–µ–º –º–∞–ª–æ –º–µ—Å—Ç–∞, —Ä–∞–∑–º–µ—â–∞–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                    task_x = source_coords[0] + 20
                task_y = (source_coords[1] + target_coords[1]) // 2 - task_height // 2
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–∑—É–º–Ω—ã–µ
            if task_x < 0:
                task_x = 50
            if task_y < 0:
                task_y = 50
            
            print(f"         üìê –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: x={task_x}, y={task_y} (—Ä–∞–∑–º–µ—Ä: {task_width}x{task_height})")
            print(f"         üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏—è: –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞={task_x - source_coords[0]}, –¥–æ —Ü–µ–ª–∏={target_coords[0] - (task_x + task_width)}")
            
            # –°–æ–∑–¥–∞—Ç—å BPMNShape –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
            task_shape = ET.SubElement(bpmn_plane, f'{{{self.namespaces["bpmndi"]}}}BPMNShape')
            task_shape.set('id', f'{new_task_id}_di')
            task_shape.set('bpmnElement', new_task_id)
            
            task_bounds = ET.SubElement(task_shape, f'{{{self.namespaces["dc"]}}}Bounds')
            task_bounds.set('x', str(task_x))
            task_bounds.set('y', str(task_y))
            task_bounds.set('width', str(task_width))
            task_bounds.set('height', str(task_height))
            
            print(f"         ‚úÖ –°–æ–∑–¥–∞–Ω BPMNShape –¥–ª—è –∑–∞–¥–∞—á–∏ {new_task_id}")
            
            # –°–æ–∑–¥–∞—Ç—å BPMNEdge –¥–ª—è –Ω–æ–≤–æ–≥–æ sequenceFlow
            flow_edge = ET.SubElement(bpmn_plane, f'{{{self.namespaces["bpmndi"]}}}BPMNEdge')
            flow_edge.set('id', f'{new_flow_id}_di')
            flow_edge.set('bpmnElement', new_flow_id)
            
            # Waypoints –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (–æ—Ç –∑–∞–¥–∞—á–∏ –∫ —Ü–µ–ª–µ–≤–æ–º—É Gateway)
            start_waypoint = ET.SubElement(flow_edge, f'{{{self.namespaces["di"]}}}waypoint')
            start_waypoint.set('x', str(task_x + task_width))
            start_waypoint.set('y', str(task_y + task_height // 2))
            
            end_waypoint = ET.SubElement(flow_edge, f'{{{self.namespaces["di"]}}}waypoint')
            end_waypoint.set('x', str(target_coords[0]))
            end_waypoint.set('y', str(target_coords[1]))
            
            print(f"         ‚úÖ –°–æ–∑–¥–∞–Ω BPMNEdge –¥–ª—è –ø–æ—Ç–æ–∫–∞ {new_flow_id}")
            
            # –û–±–Ω–æ–≤–∏—Ç—å waypoints —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ incoming –ø–æ—Ç–æ–∫–∞
            self._update_existing_flow_waypoints(root, incoming_flow_id, task_x, task_y, task_height)
            
            print(f"         ‚úÖ –î–∏–∞–≥—Ä–∞–º–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"         ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")

    def _get_positioning_coordinates_for_task(self, root, incoming_flow_id: str, 
                                           target_gateway_id: str) -> tuple:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        
        try:
            print(f"         üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è incoming_flow_id={incoming_flow_id}, target_gateway_id={target_gateway_id}")
            
            # –ù–∞–π—Ç–∏ incoming sequenceFlow –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            incoming_flow = root.find(f'.//bpmn:sequenceFlow[@id="{incoming_flow_id}"]', self.namespaces)
            if incoming_flow is None:
                print(f"         ‚ö†Ô∏è Incoming flow {incoming_flow_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None, None
            
            source_ref = incoming_flow.get('sourceRef')
            if not source_ref:
                print(f"         ‚ö†Ô∏è sourceRef –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è incoming flow {incoming_flow_id}")
                return None, None
            
            print(f"         üìç –ò—Å—Ç–æ—á–Ω–∏–∫: {source_ref}")
            
            # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            source_shape = root.find(f'.//bpmndi:BPMNShape[@bpmnElement="{source_ref}"]', self.namespaces)
            source_coords = None
            if source_shape is not None:
                bounds = source_shape.find('dc:Bounds', self.namespaces)
                if bounds is not None:
                    source_x = int(bounds.get('x', 0))
                    source_y = int(bounds.get('y', 0))
                    source_width = int(bounds.get('width', 100))
                    source_height = int(bounds.get('height', 80))
                    # –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (—Ç–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∞)
                    source_coords = (source_x + source_width, source_y + source_height // 2)
                    print(f"         üìê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source_ref} = ({source_x}, {source_y}, {source_width}x{source_height}) ‚Üí exit=({source_coords[0]}, {source_coords[1]})")
                else:
                    print(f"         ‚ö†Ô∏è Bounds –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_ref}")
            else:
                print(f"         ‚ö†Ô∏è Shape –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_ref}")
            
            # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–ª–µ–≤–æ–≥–æ Gateway
            target_shape = root.find(f'.//bpmndi:BPMNShape[@bpmnElement="{target_gateway_id}"]', self.namespaces)
            target_coords = None
            if target_shape is not None:
                bounds = target_shape.find('dc:Bounds', self.namespaces)
                if bounds is not None:
                    target_x = int(bounds.get('x', 0))
                    target_y = int(bounds.get('y', 0))
                    target_width = int(bounds.get('width', 50))
                    target_height = int(bounds.get('height', 50))
                    # –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ —Ü–µ–ª–∏ (—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞)
                    target_coords = (target_x, target_y + target_height // 2)
                    print(f"         üìê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–ª–∏: {target_gateway_id} = ({target_x}, {target_y}, {target_width}x{target_height}) ‚Üí entry=({target_coords[0]}, {target_coords[1]})")
                else:
                    print(f"         ‚ö†Ô∏è Bounds –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ü–µ–ª–∏ {target_gateway_id}")
            else:
                print(f"         ‚ö†Ô∏è Shape –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ü–µ–ª–∏ {target_gateway_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if source_coords and target_coords:
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                if (abs(source_coords[0]) > 10000 or abs(source_coords[1]) > 10000 or 
                    abs(target_coords[0]) > 10000 or abs(target_coords[1]) > 10000):
                    print(f"         ‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    source_coords = (1000, 500)
                    target_coords = (1200, 500)
            
            print(f"         ‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: source={source_coords}, target={target_coords}")
            return source_coords, target_coords
            
        except Exception as e:
            print(f"         ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
            return None, None

    def _update_existing_flow_waypoints(self, root, flow_id: str, 
                                       task_x: int, task_y: int, task_height: int) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å waypoints —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"""
        
        try:
            # –ù–∞–π—Ç–∏ –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Ç–æ–∫–∞
            flow_edge = root.find(f'.//bpmndi:BPMNEdge[@bpmnElement="{flow_id}"]', self.namespaces)
            if flow_edge is None:
                print(f"         ‚ö†Ô∏è BPMNEdge –¥–ª—è –ø–æ—Ç–æ–∫–∞ {flow_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–µ—á–Ω—ã–π waypoint (—Ç–µ–ø–µ—Ä—å –æ–Ω –≤–µ–¥–µ—Ç –∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ)
            waypoints = flow_edge.findall('di:waypoint', self.namespaces)
            if len(waypoints) >= 2:
                last_waypoint = waypoints[-1]
                last_waypoint.set('x', str(task_x))
                last_waypoint.set('y', str(task_y + task_height // 2))
                print(f"         ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω waypoint –¥–ª—è –ø–æ—Ç–æ–∫–∞ {flow_id}")
            
        except Exception as e:
            print(f"         ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ waypoints: {e}")

    def _generate_unique_activity_id(self, root) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è Activity"""
        import random
        import string
        
        existing_ids = set()
        
        # –°–æ–±—Ä–∞—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for element in root.findall('.//*[@id]', self.namespaces):
            element_id = element.get('id')
            if element_id:
                existing_ids.add(element_id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        while True:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 7 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
            random_suffix = ''.join(random.choices(string.ascii_lowercase + string.digits, k=7))
            new_id = f"Activity_{random_suffix}"
            
            if new_id not in existing_ids:
                return new_id

    def _generate_unique_flow_id(self, root) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è sequenceFlow"""
        import random
        import string
        
        existing_ids = set()
        
        # –°–æ–±—Ä–∞—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for element in root.findall('.//*[@id]', self.namespaces):
            element_id = element.get('id')
            if element_id:
                existing_ids.add(element_id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        while True:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 7 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
            random_suffix = ''.join(random.choices(string.ascii_lowercase + string.digits, k=7))
            new_id = f"Flow_{random_suffix}"
            
            if new_id not in existing_ids:
                return new_id
            
    def _assign_responsible_to_unassigned_tasks(self, root):
        """
        –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö Activity –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
        (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è Process_1d4oa6g46)
        """
        print("üîß –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞—á –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö...")
        
        # –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞)
        DEFAULT_ASSIGNEE_NAME = "–†—É–∫. –æ—Ç–¥–µ–ª–∞ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–∫-—Ü–∏–∏"
        DEFAULT_ASSIGNEE_ID = "15297786"
        
        assigned_count = 0
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ serviceTask —ç–ª–µ–º–µ–Ω—Ç—ã
        for service_task in root.findall('.//bpmn:serviceTask', self.namespaces):
            task_id = service_task.get('id')
            task_name = service_task.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
            has_assignee = self._has_assignee_properties(service_task)
            
            if not has_assignee:
                print(f"   üéØ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: {task_id} ({task_name})")
                
                # –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
                success = self._add_assignee_to_task(service_task, DEFAULT_ASSIGNEE_NAME, DEFAULT_ASSIGNEE_ID)
                
                if success:
                    assigned_count += 1
                    print(f"   ‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–ª—è {task_id}: {DEFAULT_ASSIGNEE_NAME}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–ª—è {task_id}")
            else:
                print(f"   ‚ÑπÔ∏è –ó–∞–¥–∞—á–∞ {task_id} —É–∂–µ –∏–º–µ–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
        if assigned_count > 0:
            print(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {assigned_count}")
        else:
            print("‚úÖ –í—Å–µ Activity —É–∂–µ –∏–º–µ—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö")

    def _has_assignee_properties(self, service_task) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É serviceTask –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
        
        Args:
            service_task: –≠–ª–µ–º–µ–Ω—Ç serviceTask
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞–∑–Ω–∞—á–µ–Ω
        """
        try:
            # –ù–∞–π—Ç–∏ extensionElements
            extension_elements = service_task.find('bpmn:extensionElements', self.namespaces)
            if extension_elements is None:
                return False
            
            # –ù–∞–π—Ç–∏ camunda:properties
            properties = extension_elements.find('camunda:properties', self.namespaces)
            if properties is None:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ assigneeId
            for prop in properties.findall('camunda:property', self.namespaces):
                if prop.get('name') == 'assigneeId':
                    return True
            
            return False
            
        except Exception as e:
            print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: {e}")
            return False

    def _add_assignee_to_task(self, service_task, assignee_name: str, assignee_id: str) -> bool:
        """
        –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫ serviceTask
        
        Args:
            service_task: –≠–ª–µ–º–µ–Ω—Ç serviceTask
            assignee_name: –ò–º—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
            assignee_id: ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
        """
        try:
            # –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å extensionElements
            extension_elements = service_task.find('bpmn:extensionElements', self.namespaces)
            if extension_elements is None:
                extension_elements = ET.SubElement(
                    service_task, 
                    f'{{{self.namespaces["bpmn"]}}}extensionElements'
                )
            
            # –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å camunda:properties
            properties = extension_elements.find('camunda:properties', self.namespaces)
            if properties is None:
                properties = ET.SubElement(
                    extension_elements,
                    f'{{{self.namespaces["camunda"]}}}properties'
                )
            
            # –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ assigneeName
            assignee_name_prop = ET.SubElement(
                properties,
                f'{{{self.namespaces["camunda"]}}}property'
            )
            assignee_name_prop.set('name', 'assigneeName')
            assignee_name_prop.set('value', assignee_name)
            
            # –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ assigneeId
            assignee_id_prop = ET.SubElement(
                properties,
                f'{{{self.namespaces["camunda"]}}}property'
            )
            assignee_id_prop.set('name', 'assigneeId')
            assignee_id_prop.set('value', assignee_id)
            
            return True
            
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: {e}")
            return False


def main():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if len(sys.argv) > 1:
        converter = BPMNConverter()
        try:
            result = converter.convert_file(sys.argv[1])
            print(f"\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {result}")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            print(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            import traceback
            print("üìç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
            traceback.print_exc(limit=3)
            return 1
    else:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python bpmn_converter.py <input_file.bpmn>")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main()) 