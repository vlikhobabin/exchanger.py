#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞: Process_1d4oa6g46
–ù–∞–∑–≤–∞–Ω–∏–µ: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ BPMN —Å—Ö–µ–º—ã
–¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º—É—é –¥–æ –∏ –ø–æ—Å–ª–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π.
"""

import xml.etree.ElementTree as ET
from typing import Optional, Any


def pre_process(root: ET.Element, converter) -> None:
    """
    –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ö–µ–º—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –î–û —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π)
    
    Args:
        root: –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç BPMN XML
        converter: –≠–∫–∑–µ–º–ø–ª—è—Ä BPMNConverter –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–æ–¥–∞–º –∏ namespaces
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á –º–µ–∂–¥—É —à–ª—é–∑–∞–º–∏ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ —Ü–µ–ø–æ—á–µ–∫ Gateway ‚Üí Gateway
    """
    print("üîß [EXTENSION] –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ Process_1d4oa6g46...")
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö sequenceFlow —Å name="–¥–∞" –∏ –≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á
    inserted_tasks = _insert_intermediate_tasks_for_yes_flows(root, converter)
    
    if inserted_tasks > 0:
        print(f"   ‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–≤—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á: {inserted_tasks})")
    else:
        print("   ‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è)")


def _insert_intermediate_tasks_for_yes_flows(root: ET.Element, converter) -> int:
    """
    –ù–∞–π—Ç–∏ –≤—Å–µ sequenceFlow —Å name="–¥–∞" –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É —à–ª—é–∑–∞–º–∏
    
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    """
    print("   üîç –ü–æ–∏—Å–∫ sequenceFlow —Å name='–¥–∞' –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á...")
    
    inserted_count = 0
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ sequenceFlow —Å name="–¥–∞"
    yes_flows = []
    for flow in root.findall('.//bpmn:sequenceFlow', converter.namespaces):
        name = flow.get('name', '').lower()
        if name == '–¥–∞':
            yes_flows.append(flow)
    
    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ sequenceFlow —Å name='–¥–∞': {len(yes_flows)}")
    
    for flow in yes_flows:
        flow_id = flow.get('id')
        source_ref = flow.get('sourceRef')
        
        if not source_ref:
            print(f"      ‚ö†Ô∏è –ü–æ—Ç–æ–∫ {flow_id} –Ω–µ –∏–º–µ–µ—Ç sourceRef")
            continue
        
        print(f"   üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ {flow_id}: sourceRef={source_ref}")
        
        # –ù–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã–π Gateway
        source_gateway = _find_gateway_by_id(root, source_ref, converter.namespaces)
        if not source_gateway:
            print(f"      ‚ö†Ô∏è Gateway {source_ref} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
        
        print(f"      ‚úÖ Gateway {source_ref} –Ω–∞–π–¥–µ–Ω: {source_gateway.tag}")
        
        # –ü–æ–ª—É—á–∏—Ç—å incoming flows —ç—Ç–æ–≥–æ Gateway
        incoming_flows = source_gateway.findall('bpmn:incoming', converter.namespaces)
        print(f"      üìä –ù–∞–π–¥–µ–Ω–æ incoming –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è {source_ref}: {len(incoming_flows)}")
        
        for i, incoming_element in enumerate(incoming_flows):
            incoming_flow_id = incoming_element.text
            print(f"      üîó –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º incoming –ø–æ—Ç–æ–∫ #{i+1}: {incoming_flow_id}")
            
            # –ù–∞–π—Ç–∏ incoming sequenceFlow
            incoming_flow = root.find(f'.//bpmn:sequenceFlow[@id="{incoming_flow_id}"]', converter.namespaces)
            
            if incoming_flow is None:
                print(f"         ‚ùå sequenceFlow {incoming_flow_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue
            
            incoming_source_ref = incoming_flow.get('sourceRef')
            print(f"         üìç –ò—Å—Ç–æ—á–Ω–∏–∫ incoming –ø–æ—Ç–æ–∫–∞: {incoming_source_ref}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ Gateway
            if incoming_source_ref and incoming_source_ref.startswith('Gateway_'):
                print(f"         üéØ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ Gateway‚ÜíGateway: {incoming_source_ref} ‚Üí {source_ref}")
                
                # –í—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –∑–∞–¥–∞—á—É
                print(f"         üîß –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –∑–∞–¥–∞—á–∏...")
                task_inserted = _insert_task_between_gateways(
                    root, converter, incoming_flow, source_gateway, source_ref
                )
                
                if task_inserted:
                    inserted_count += 1
                    print(f"         ‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞ (–≤—Å–µ–≥–æ: {inserted_count})")
                else:
                    print(f"         ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –∑–∞–¥–∞—á—É")
            else:
                print(f"         ‚ÑπÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ Gateway ('{incoming_source_ref}'), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
    
    print(f"   üìä –ò—Ç–æ–≥–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á: {inserted_count}")
    return inserted_count


def _find_gateway_by_id(root: ET.Element, gateway_id: str, namespaces: dict) -> Optional[ET.Element]:
    """–ù–∞–π—Ç–∏ Gateway –ø–æ ID"""
    for gateway_type in ['exclusiveGateway', 'inclusiveGateway', 'parallelGateway']:
        gateway = root.find(f'.//bpmn:{gateway_type}[@id="{gateway_id}"]', namespaces)
        if gateway is not None:
            return gateway
    return None


def _insert_task_between_gateways(root: ET.Element, converter, incoming_flow: ET.Element, 
                                 target_gateway: ET.Element, target_gateway_id: str) -> bool:
    """
    –í—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –∑–∞–¥–∞—á—É –º–µ–∂–¥—É –¥–≤—É–º—è Gateway
    
    Args:
        root: –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç BPMN XML
        converter: –≠–∫–∑–µ–º–ø–ª—è—Ä BPMNConverter 
        incoming_flow: sequenceFlow –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å
        target_gateway: Gateway, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
        target_gateway_id: ID —Ü–µ–ª–µ–≤–æ–≥–æ Gateway
    
    Returns:
        bool: True –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞
    """
    try:
        incoming_flow_id = incoming_flow.get('id')
        print(f"         üîß –ù–∞—á–∏–Ω–∞–µ–º –≤—Å—Ç–∞–≤–∫—É –∑–∞–¥–∞—á–∏ –¥–ª—è incoming_flow: {incoming_flow_id}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
        new_task_id = _generate_unique_activity_id(root, converter.namespaces)
        new_flow_id = _generate_unique_flow_id(root, converter.namespaces)
        print(f"         üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã ID: task={new_task_id}, flow={new_flow_id}")
        
        # –ü–æ–ª—É—á–∏—Ç—å name —Ü–µ–ª–µ–≤–æ–≥–æ Gateway –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏
        gateway_name = target_gateway.get('name', '—É—Å–ª–æ–≤–∏–µ')
        task_name = f"–í—ã—è—Å–Ω–∏—Ç—å: {gateway_name}"
        
        print(f"         üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ {new_task_id}: '{task_name}'")
        
        # –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç process –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        process_element = root.find('.//bpmn:process', converter.namespaces)
        if not process_element:
            print(f"         ‚ùå –≠–ª–µ–º–µ–Ω—Ç process –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print(f"         ‚úÖ Process —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω")
        
        # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        new_task = ET.SubElement(process_element, f'{{{converter.namespaces["bpmn"]}}}task')
        new_task.set('id', new_task_id)
        new_task.set('name', task_name)
        print(f"         ‚úÖ –°–æ–∑–¥–∞–Ω —ç–ª–µ–º–µ–Ω—Ç task: {new_task_id}")
        
        # –î–æ–±–∞–≤–∏—Ç—å incoming –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞)
        task_incoming = ET.SubElement(new_task, f'{{{converter.namespaces["bpmn"]}}}incoming')
        task_incoming.text = incoming_flow_id
        print(f"         ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω incoming: {incoming_flow_id}")
        
        # –î–æ–±–∞–≤–∏—Ç—å outgoing –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∫ —Ü–µ–ª–µ–≤–æ–º—É Gateway)
        task_outgoing = ET.SubElement(new_task, f'{{{converter.namespaces["bpmn"]}}}outgoing')
        task_outgoing.text = new_flow_id
        print(f"         ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω outgoing: {new_flow_id}")
        
        # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π sequenceFlow –æ—Ç –∑–∞–¥–∞—á–∏ –∫ —Ü–µ–ª–µ–≤–æ–º—É Gateway
        new_sequence_flow = ET.SubElement(process_element, f'{{{converter.namespaces["bpmn"]}}}sequenceFlow')
        new_sequence_flow.set('id', new_flow_id)
        new_sequence_flow.set('sourceRef', new_task_id)
        new_sequence_flow.set('targetRef', target_gateway_id)
        print(f"         ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π sequenceFlow: {new_flow_id} ({new_task_id} ‚Üí {target_gateway_id})")
        
        # –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π incoming_flow: —Ç–µ–ø–µ—Ä—å –æ–Ω –≤–µ–¥–µ—Ç –∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
        old_target = incoming_flow.get('targetRef')
        incoming_flow.set('targetRef', new_task_id)
        print(f"         ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω incoming_flow {incoming_flow_id}: {old_target} ‚Üí {new_task_id}")
        
        # –û–±–Ω–æ–≤–∏—Ç—å incoming –ø–æ—Ç–æ–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ Gateway
        _update_gateway_incoming_flows(target_gateway, incoming_flow_id, new_flow_id, converter.namespaces)
        print(f"         ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã incoming –ø–æ—Ç–æ–∫–∏ Gateway {target_gateway_id}")
        
        # –°–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        _create_diagram_elements(root, converter, new_task_id, new_flow_id, target_gateway_id, incoming_flow_id)
        
        print(f"         üéâ –ó–∞–¥–∞—á–∞ {new_task_id} —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞")
        print(f"         üìé –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–ø–æ—á–∫–∞: ...‚Üí{new_task_id}‚Üí{target_gateway_id}")
        
        return True
        
    except Exception as e:
        print(f"         ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∑–∞–¥–∞—á–∏: {e}")
        import traceback
        print(f"         üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        traceback.print_exc(limit=2)
        return False


def _update_gateway_incoming_flows(gateway: ET.Element, old_flow_id: str, 
                                  new_flow_id: str, namespaces: dict) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å incoming –ø–æ—Ç–æ–∫–∏ Gateway"""
    
    # –ù–∞–π—Ç–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π incoming —ç–ª–µ–º–µ–Ω—Ç
    for incoming in gateway.findall('bpmn:incoming', namespaces):
        if incoming.text == old_flow_id:
            incoming.text = new_flow_id
            break


def _generate_unique_activity_id(root: ET.Element, namespaces: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è Activity"""
    import random
    import string
    
    existing_ids = set()
    
    # –°–æ–±—Ä–∞—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    for element in root.findall('.//*[@id]', namespaces):
        element_id = element.get('id')
        if element_id:
            existing_ids.add(element_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    while True:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 7 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
        random_suffix = ''.join(random.choices(string.ascii_lowercase + string.digits, k=7))
        new_id = f"Activity_{random_suffix}"
        
        if new_id not in existing_ids:
            return new_id


def _generate_unique_flow_id(root: ET.Element, namespaces: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è sequenceFlow"""
    import random
    import string
    
    existing_ids = set()
    
    # –°–æ–±—Ä–∞—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    for element in root.findall('.//*[@id]', namespaces):
        element_id = element.get('id')
        if element_id:
            existing_ids.add(element_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    while True:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 7 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
        random_suffix = ''.join(random.choices(string.ascii_lowercase + string.digits, k=7))
        new_id = f"Flow_{random_suffix}"
        
        if new_id not in existing_ids:
            return new_id 


def _create_diagram_elements(root: ET.Element, converter, new_task_id: str, new_flow_id: str, 
                           target_gateway_id: str, incoming_flow_id: str) -> None:
    """–°–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∏ –ø–æ—Ç–æ–∫–∞"""
    
    try:
        # –ù–∞–π—Ç–∏ BPMNDiagram
        bpmn_diagram = root.find('.//bpmndi:BPMNDiagram', converter.namespaces)
        if bpmn_diagram is None:
            print(f"         ‚ö†Ô∏è BPMNDiagram –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            return
        
        bpmn_plane = bpmn_diagram.find('.//bpmndi:BPMNPlane', converter.namespaces)
        if bpmn_plane is None:
            print(f"         ‚ö†Ô∏è BPMNPlane –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        source_coords, target_coords = _get_positioning_coordinates(
            root, converter, incoming_flow_id, target_gateway_id
        )
        
        if source_coords is None or target_coords is None:
            print(f"         ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –í—ã—á–∏—Å–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        task_width = 100
        task_height = 80
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        distance_from_source = 120  # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        distance_to_target = 120   # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        if source_coords[0] + distance_from_source + task_width + distance_to_target <= target_coords[0]:
            # –ï—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏ —Ü–µ–ª—å—é
            task_x = source_coords[0] + distance_from_source
            task_y = (source_coords[1] + target_coords[1]) // 2 - task_height // 2
        else:
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞, —Ä–∞–∑–º–µ—â–∞–µ–º –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
            available_space = target_coords[0] - source_coords[0]
            if available_space > task_width + 40:  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∑–æ—Ä 20 –ø–∏–∫—Å–µ–ª–µ–π —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
                task_x = source_coords[0] + (available_space - task_width) // 2
            else:
                # –°–æ–≤—Å–µ–º –º–∞–ª–æ –º–µ—Å—Ç–∞, —Ä–∞–∑–º–µ—â–∞–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                task_x = source_coords[0] + 20
            task_y = (source_coords[1] + target_coords[1]) // 2 - task_height // 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–∑—É–º–Ω—ã–µ
        if task_x < 0:
            task_x = 50
        if task_y < 0:
            task_y = 50
        
        print(f"         üìê –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: x={task_x}, y={task_y} (—Ä–∞–∑–º–µ—Ä: {task_width}x{task_height})")
        print(f"         üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏—è: –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞={task_x - source_coords[0]}, –¥–æ —Ü–µ–ª–∏={target_coords[0] - (task_x + task_width)}")
        
        # –°–æ–∑–¥–∞—Ç—å BPMNShape –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        task_shape = ET.SubElement(bpmn_plane, f'{{{converter.namespaces["bpmndi"]}}}BPMNShape')
        task_shape.set('id', f'{new_task_id}_di')
        task_shape.set('bpmnElement', new_task_id)
        
        task_bounds = ET.SubElement(task_shape, f'{{{converter.namespaces["dc"]}}}Bounds')
        task_bounds.set('x', str(task_x))
        task_bounds.set('y', str(task_y))
        task_bounds.set('width', str(task_width))
        task_bounds.set('height', str(task_height))
        
        print(f"         ‚úÖ –°–æ–∑–¥–∞–Ω BPMNShape –¥–ª—è –∑–∞–¥–∞—á–∏ {new_task_id}")
        
        # –°–æ–∑–¥–∞—Ç—å BPMNEdge –¥–ª—è –Ω–æ–≤–æ–≥–æ sequenceFlow
        flow_edge = ET.SubElement(bpmn_plane, f'{{{converter.namespaces["bpmndi"]}}}BPMNEdge')
        flow_edge.set('id', f'{new_flow_id}_di')
        flow_edge.set('bpmnElement', new_flow_id)
        
        # Waypoints –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (–æ—Ç –∑–∞–¥–∞—á–∏ –∫ —Ü–µ–ª–µ–≤–æ–º—É Gateway)
        start_waypoint = ET.SubElement(flow_edge, f'{{{converter.namespaces["di"]}}}waypoint')
        start_waypoint.set('x', str(task_x + task_width))
        start_waypoint.set('y', str(task_y + task_height // 2))
        
        end_waypoint = ET.SubElement(flow_edge, f'{{{converter.namespaces["di"]}}}waypoint')
        end_waypoint.set('x', str(target_coords[0]))
        end_waypoint.set('y', str(target_coords[1]))
        
        print(f"         ‚úÖ –°–æ–∑–¥–∞–Ω BPMNEdge –¥–ª—è –ø–æ—Ç–æ–∫–∞ {new_flow_id}")
        
        # –û–±–Ω–æ–≤–∏—Ç—å waypoints —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ incoming –ø–æ—Ç–æ–∫–∞
        _update_existing_flow_waypoints(root, converter, incoming_flow_id, task_x, task_y, task_height)
        
        print(f"         ‚úÖ –î–∏–∞–≥—Ä–∞–º–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"         ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")


def _get_positioning_coordinates(root: ET.Element, converter, incoming_flow_id: str, 
                               target_gateway_id: str) -> tuple:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    
    try:
        print(f"         üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è incoming_flow_id={incoming_flow_id}, target_gateway_id={target_gateway_id}")
        
        # –ù–∞–π—Ç–∏ incoming sequenceFlow –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        incoming_flow = root.find(f'.//bpmn:sequenceFlow[@id="{incoming_flow_id}"]', converter.namespaces)
        if incoming_flow is None:
            print(f"         ‚ö†Ô∏è Incoming flow {incoming_flow_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None, None
        
        source_ref = incoming_flow.get('sourceRef')
        if not source_ref:
            print(f"         ‚ö†Ô∏è sourceRef –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è incoming flow {incoming_flow_id}")
            return None, None
        
        print(f"         üìç –ò—Å—Ç–æ—á–Ω–∏–∫: {source_ref}")
        
        # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        source_shape = root.find(f'.//bpmndi:BPMNShape[@bpmnElement="{source_ref}"]', converter.namespaces)
        source_coords = None
        if source_shape is not None:
            bounds = source_shape.find('dc:Bounds', converter.namespaces)
            if bounds is not None:
                source_x = int(bounds.get('x', 0))
                source_y = int(bounds.get('y', 0))
                source_width = int(bounds.get('width', 100))
                source_height = int(bounds.get('height', 80))
                # –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (—Ç–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∞)
                source_coords = (source_x + source_width, source_y + source_height // 2)
                print(f"         üìê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source_ref} = ({source_x}, {source_y}, {source_width}x{source_height}) ‚Üí exit=({source_coords[0]}, {source_coords[1]})")
            else:
                print(f"         ‚ö†Ô∏è Bounds –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_ref}")
        else:
            print(f"         ‚ö†Ô∏è Shape –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_ref}")
        
        # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–ª–µ–≤–æ–≥–æ Gateway
        target_shape = root.find(f'.//bpmndi:BPMNShape[@bpmnElement="{target_gateway_id}"]', converter.namespaces)
        target_coords = None
        if target_shape is not None:
            bounds = target_shape.find('dc:Bounds', converter.namespaces)
            if bounds is not None:
                target_x = int(bounds.get('x', 0))
                target_y = int(bounds.get('y', 0))
                target_width = int(bounds.get('width', 50))
                target_height = int(bounds.get('height', 50))
                # –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ —Ü–µ–ª–∏ (—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞)
                target_coords = (target_x, target_y + target_height // 2)
                print(f"         üìê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–ª–∏: {target_gateway_id} = ({target_x}, {target_y}, {target_width}x{target_height}) ‚Üí entry=({target_coords[0]}, {target_coords[1]})")
            else:
                print(f"         ‚ö†Ô∏è Bounds –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ü–µ–ª–∏ {target_gateway_id}")
        else:
            print(f"         ‚ö†Ô∏è Shape –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ü–µ–ª–∏ {target_gateway_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if source_coords and target_coords:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
            if (abs(source_coords[0]) > 10000 or abs(source_coords[1]) > 10000 or 
                abs(target_coords[0]) > 10000 or abs(target_coords[1]) > 10000):
                print(f"         ‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                source_coords = (1000, 500)
                target_coords = (1200, 500)
        
        print(f"         ‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: source={source_coords}, target={target_coords}")
        return source_coords, target_coords
        
    except Exception as e:
        print(f"         ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        return None, None


def _update_existing_flow_waypoints(root: ET.Element, converter, flow_id: str, 
                                   task_x: int, task_y: int, task_height: int) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å waypoints —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"""
    
    try:
        # –ù–∞–π—Ç–∏ –¥–∏–∞–≥—Ä–∞–º–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Ç–æ–∫–∞
        flow_edge = root.find(f'.//bpmndi:BPMNEdge[@bpmnElement="{flow_id}"]', converter.namespaces)
        if flow_edge is None:
            print(f"         ‚ö†Ô∏è BPMNEdge –¥–ª—è –ø–æ—Ç–æ–∫–∞ {flow_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–µ—á–Ω—ã–π waypoint (—Ç–µ–ø–µ—Ä—å –æ–Ω –≤–µ–¥–µ—Ç –∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ)
        waypoints = flow_edge.findall('di:waypoint', converter.namespaces)
        if len(waypoints) >= 2:
            last_waypoint = waypoints[-1]
            last_waypoint.set('x', str(task_x))
            last_waypoint.set('y', str(task_y + task_height // 2))
            print(f"         ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω waypoint –¥–ª—è –ø–æ—Ç–æ–∫–∞ {flow_id}")
        
    except Exception as e:
        print(f"         ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ waypoints: {e}")


def post_process(root: ET.Element, converter) -> None:
    """
    –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ö–µ–º—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ü–û–°–õ–ï —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π)
    
    Args:
        root: –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç BPMN XML (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏)
        converter: –≠–∫–∑–µ–º–ø–ª—è—Ä BPMNConverter –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–æ–¥–∞–º –∏ namespaces
    
    –ü—Ä–∏–º–µ—Ä—ã –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
    - –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–∂–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    - –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∏–ª–∏ properties
    """
    print("üîß [EXTENSION] –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ Process_1d4oa6g46...")
    
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–ª—è Activity –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
    assigned_count = _assign_responsible_to_unassigned_tasks(root, converter)
    
    # –ö–∞—Å—Ç–æ–º–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ conditionExpression –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π demolition
    # –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ, —Ç.–∫. —Ç–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π Activity –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏ —Å–Ω–æ—Å–∏—Ç—å
    # updated_count = _add_custom_demolition_conditions(root, converter)
    updated_count = 0  # –≤—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ 0, —Ç.–∫. –∫–∞—Å—Ç–æ–º–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã
    
    total_changes = assigned_count + updated_count
    if total_changes > 0:
        print(f"   ‚úÖ –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {assigned_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Ç–æ–∫–æ–≤: {updated_count})")
    else:
        print("   ‚úÖ –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è)")


def _add_custom_demolition_conditions(root: ET.Element, converter) -> int:
    """
    –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ —É—Å–ª–æ–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π demolition –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
    
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
    """
    
    # –°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    target_flows = {
        'Flow_1i3yird': {'name': '–¥–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–Ω–æ—Å)', 'condition': '${demolition == "yes"}'},
        'Flow_1ykzunp': {'name': '–Ω–µ—Ç (—Å–Ω–æ—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)', 'condition': '${demolition == "no"}'}
    }
    
    updated_count = 0
    
    for flow_id, flow_config in target_flows.items():
        # –ù–∞–π—Ç–∏ –ø–æ—Ç–æ–∫ –ø–æ ID
        flow = root.find(f'.//bpmn:sequenceFlow[@id="{flow_id}"]', converter.namespaces)
        
        if flow is not None:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ—Ç –ª–∏ —É–∂–µ conditionExpression
            existing_condition = flow.find('bpmn:conditionExpression', converter.namespaces)
            
            if existing_condition is None:
                # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç conditionExpression
                condition_element = ET.SubElement(
                    flow, 
                    f'{{{converter.namespaces["bpmn"]}}}conditionExpression'
                )
                condition_element.set(
                    f'{{{converter.namespaces["xsi"]}}}type',
                    'bpmn:tFormalExpression'
                )
                condition_element.text = flow_config['condition']
                
                print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ –¥–ª—è {flow_id} ({flow_config['name']}): {flow_config['condition']}")
                updated_count += 1
            else:
                print(f"   ‚ö†Ô∏è –ü–æ—Ç–æ–∫ {flow_id} —É–∂–µ –∏–º–µ–µ—Ç —É—Å–ª–æ–≤–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        else:
            print(f"   ‚ö†Ô∏è –ü–æ—Ç–æ–∫ {flow_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ö–µ–º–µ")
    
    return updated_count


def _assign_responsible_to_unassigned_tasks(root: ET.Element, converter) -> int:
    """
    –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö Activity –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
    
    Args:
        root: –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç BPMN XML
        converter: –≠–∫–∑–µ–º–ø–ª—è—Ä BPMNConverter –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ namespaces
    
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Activity —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏
    """
    print("   üîç –ü–æ–∏—Å–∫ Activity –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö...")
    
    # –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞)
    DEFAULT_ASSIGNEE_NAME = "–†—É–∫. –æ—Ç–¥–µ–ª–∞ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–∫-—Ü–∏–∏"
    DEFAULT_ASSIGNEE_ID = "15297786"
    
    assigned_count = 0
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ serviceTask —ç–ª–µ–º–µ–Ω—Ç—ã
    for service_task in root.findall('.//bpmn:serviceTask', converter.namespaces):
        task_id = service_task.get('id')
        task_name = service_task.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
        has_assignee = _has_assignee_properties(service_task, converter.namespaces)
        
        if not has_assignee:
            print(f"      üéØ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: {task_id} ({task_name})")
            
            # –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
            success = _add_assignee_to_task(service_task, DEFAULT_ASSIGNEE_NAME, DEFAULT_ASSIGNEE_ID, converter.namespaces)
            
            if success:
                assigned_count += 1
                print(f"      ‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–ª—è {task_id}: {DEFAULT_ASSIGNEE_NAME}")
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–ª—è {task_id}")
        else:
            print(f"      ‚ÑπÔ∏è –ó–∞–¥–∞—á–∞ {task_id} —É–∂–µ –∏–º–µ–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
    
    if assigned_count > 0:
        print(f"   üìä –ò—Ç–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {assigned_count}")
    else:
        print("   üìä –í—Å–µ Activity —É–∂–µ –∏–º–µ—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö")
    
    return assigned_count


def _has_assignee_properties(service_task: ET.Element, namespaces: dict) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É serviceTask –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
    
    Args:
        service_task: –≠–ª–µ–º–µ–Ω—Ç serviceTask
        namespaces: –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–º–µ–Ω
    
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞–∑–Ω–∞—á–µ–Ω
    """
    try:
        # –ù–∞–π—Ç–∏ extensionElements
        extension_elements = service_task.find('bpmn:extensionElements', namespaces)
        if extension_elements is None:
            return False
        
        # –ù–∞–π—Ç–∏ camunda:properties
        properties = extension_elements.find('camunda:properties', namespaces)
        if properties is None:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ assigneeId
        for prop in properties.findall('camunda:property', namespaces):
            if prop.get('name') == 'assigneeId':
                return True
        
        return False
        
    except Exception as e:
        print(f"         ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: {e}")
        return False


def _add_assignee_to_task(service_task: ET.Element, assignee_name: str, assignee_id: str, namespaces: dict) -> bool:
    """
    –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫ serviceTask
    
    Args:
        service_task: –≠–ª–µ–º–µ–Ω—Ç serviceTask
        assignee_name: –ò–º—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
        assignee_id: ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
        namespaces: –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–º–µ–Ω
    
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
    """
    try:
        # –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å extensionElements
        extension_elements = service_task.find('bpmn:extensionElements', namespaces)
        if extension_elements is None:
            extension_elements = ET.SubElement(
                service_task, 
                f'{{{namespaces["bpmn"]}}}extensionElements'
            )
        
        # –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å camunda:properties
        properties = extension_elements.find('camunda:properties', namespaces)
        if properties is None:
            properties = ET.SubElement(
                extension_elements,
                f'{{{namespaces["camunda"]}}}properties'
            )
        
        # –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ assigneeName
        assignee_name_prop = ET.SubElement(
            properties,
            f'{{{namespaces["camunda"]}}}property'
        )
        assignee_name_prop.set('name', 'assigneeName')
        assignee_name_prop.set('value', assignee_name)
        
        # –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ assigneeId
        assignee_id_prop = ET.SubElement(
            properties,
            f'{{{namespaces["camunda"]}}}property'
        )
        assignee_id_prop.set('name', 'assigneeId')
        assignee_id_prop.set('value', assignee_id)
        
        return True
        
    except Exception as e:
        print(f"         ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: {e}")
        return False


# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
EXTENSION_INFO = {
    'process_name': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
    'version': '1.6.0',
    'description': '–ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á –º–µ–∂–¥—É —à–ª—é–∑–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ª–æ–≤–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π.'
} 