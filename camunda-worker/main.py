#!/usr/bin/env python3
"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Universal Camunda Worker
"""
import sys
import os
import threading
import time
from loguru import logger

# SSL Patch - –î–û–õ–ñ–ï–ù –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –î–û ExternalTaskClient
import ssl_patch
from config import worker_config
from camunda_worker import UniversalCamundaWorker


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    logger.remove()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    log_format = (
        "<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
        "<level>{level: <8}</level> | "
        "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> | "
        "<level>{message}</level>"
    )
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    logger.add(
        sys.stdout,
        format=log_format,
        level=worker_config.log_level,
        colorize=True
    )
    
    # –§–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥
    logger.add(
        "logs/camunda_worker.log",
        format=log_format,
        level=worker_config.log_level,
        rotation="100 MB",
        retention="30 days",
        compression="zip",
        encoding="utf-8"
    )
    
    # –§–∞–π–ª –æ—à–∏–±–æ–∫
    logger.add(
        "logs/camunda_worker_errors.log",
        format=log_format,
        level="ERROR",
        rotation="50 MB",
        retention="60 days",
        compression="zip",
        encoding="utf-8"
    )


def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    directories = ["logs"]
    for directory in directories:
        os.makedirs(directory, exist_ok=True)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        create_directories()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging()
        
        logger.info("=" * 60)
        logger.info("UNIVERSAL CAMUNDA WORKER (INTEGRATED MODE)")
        logger.info("=" * 60)
        logger.info("–í–µ—Ä—Å–∏—è: 2.1.0")
        logger.info("–ê–≤—Ç–æ—Ä: EG-Holding")
        logger.info("–†–µ–∂–∏–º: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –∏ –æ—Ç–≤–µ—Ç–æ–≤")
        logger.info("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è SSL –ø–∞—Ç—á–∞
        if ssl_patch.is_patch_applied():
            patch_info = ssl_patch.get_patch_info()
            logger.info("üîí SSL Patch: –ê–∫—Ç–∏–≤–µ–Ω")
            logger.info(f"   - –û–ø–∏—Å–∞–Ω–∏–µ: {patch_info['description']}")
            logger.info("   - –í—Å–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç verify=False")
        else:
            logger.warning("‚ö†Ô∏è  SSL Patch: –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω!")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ worker
        worker = UniversalCamundaWorker()
        
        # –§–ª–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ–π
        worker_running = threading.Event()
        shutdown_event = threading.Event()
        
        def run_worker():
            """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ worker –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
            try:
                logger.info("–ó–∞–ø—É—Å–∫ Universal Camunda Worker...")
                worker_running.set()
                worker.start()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ Universal Camunda Worker: {e}")
            finally:
                worker_running.clear()
                shutdown_event.set()
        
        # –ó–∞–ø—É—Å–∫ worker
        worker_thread = threading.Thread(target=run_worker, daemon=True)
        worker_thread.start()
        
        logger.info("Universal Camunda Worker –∑–∞–ø—É—â–µ–Ω")
        logger.info("- External Tasks: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –∏–∑ Camunda")
        logger.info("- Response Processing: –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ RabbitMQ")
        logger.info(f"- Heartbeat Interval: {worker_config.heartbeat_interval}s")
        logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while not shutdown_event.is_set():
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è worker —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º HEARTBEAT_INTERVAL
                if shutdown_event.wait(worker_config.heartbeat_interval):
                    break
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
                if not worker_running.is_set():
                    logger.error("Worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                    break
                    
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
        if worker_running.is_set():
            worker.shutdown()
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
        worker_thread.join(timeout=10)
        
        logger.info("Universal Camunda Worker –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 