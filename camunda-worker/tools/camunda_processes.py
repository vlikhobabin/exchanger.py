#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ Camunda
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Camunda REST API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ:
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (Process Definitions)
- –≠–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (Process Instances) 
- –í–Ω–µ—à–Ω–∏—Ö –∑–∞–¥–∞—á–∞—Ö (External Tasks)
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (User Tasks)
"""

import argparse
import json
import sys
import urllib3
from datetime import datetime
from typing import Dict, List, Optional
import requests
from requests.auth import HTTPBasicAuth

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import camunda_config

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π SSL –¥–ª—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class CamundaProcessService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ Camunda"""
    
    def __init__(self):
        self.base_url = camunda_config.base_url.rstrip('/')
        # –ï—Å–ª–∏ base_url —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç /engine-rest, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –µ—â–µ —Ä–∞–∑
        if self.base_url.endswith('/engine-rest'):
            self.engine_url = self.base_url
        else:
            self.engine_url = f"{self.base_url}/engine-rest"
        self.auth = None
        
        if camunda_config.auth_enabled:
            self.auth = HTTPBasicAuth(
                camunda_config.auth_username,
                camunda_config.auth_password
            )
    
    def _make_request(self, endpoint: str, params: Dict = None) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ Camunda REST API"""
        url = f"{self.engine_url}/{endpoint}"
        
        try:
            response = requests.get(
                url, 
                auth=self.auth,
                params=params or {},
                verify=False,  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL
                timeout=30
            )
            response.raise_for_status()
            return response.json()
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
            return None
    
    def get_process_definitions(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        definitions = self._make_request("process-definition")
        return definitions or []
    
    def get_process_instances(self, active_only: bool = True) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        params = {}
        if active_only:
            params['active'] = 'true'
        
        instances = self._make_request("process-instance", params)
        return instances or []
    
    def get_external_tasks(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–¥–∞—á"""
        tasks = self._make_request("external-task")
        return tasks or []
    
    def get_user_tasks(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        tasks = self._make_request("task")
        return tasks or []
    
    def get_engine_info(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–≤–∏–∂–∫–µ Camunda"""
        info = self._make_request("version")
        return info or {}
    
    def get_activity_statistics(self, process_def_id: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        endpoint = f"process-definition/{process_def_id}/statistics"
        stats = self._make_request(endpoint)
        return stats or []


def format_datetime(dt_string: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É-–≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not dt_string:
        return "N/A"
    
    try:
        dt = datetime.fromisoformat(dt_string.replace('Z', '+00:00'))
        return dt.strftime("%Y-%m-%d %H:%M:%S")
    except:
        return dt_string


def print_process_definitions(definitions: List[Dict]):
    """–í—ã–≤–µ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    print("\n" + "="*80)
    print(f"üìã –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–†–û–¶–ï–°–°–û–í ({len(definitions)})")
    print("="*80)
    
    if not definitions:
        print("–ù–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        return
    
    for i, definition in enumerate(definitions, 1):
        print(f"\n{i}. {definition.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}")
        print(f"   ID: {definition.get('id')}")
        print(f"   Key: {definition.get('key')}")
        print(f"   Version: {definition.get('version')}")
        print(f"   Category: {definition.get('category', 'N/A')}")
        print(f"   Suspended: {'–î–∞' if definition.get('suspended') else '–ù–µ—Ç'}")
        print(f"   Deployment ID: {definition.get('deploymentId')}")


def print_process_instances(instances: List[Dict]):
    """–í—ã–≤–µ—Å—Ç–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    print("\n" + "="*80)
    print(f"üèÉ –ê–ö–¢–ò–í–ù–´–ï –≠–ö–ó–ï–ú–ü–õ–Ø–†–´ –ü–†–û–¶–ï–°–°–û–í ({len(instances)})")
    print("="*80)
    
    if not instances:
        print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        return
    
    for i, instance in enumerate(instances, 1):
        print(f"\n{i}. Instance ID: {instance.get('id')}")
        print(f"   Process Definition ID: {instance.get('definitionId')}")
        print(f"   Process Definition Key: {instance.get('processDefinitionKey')}")
        print(f"   Business Key: {instance.get('businessKey', 'N/A')}")
        print(f"   Case Instance ID: {instance.get('caseInstanceId', 'N/A')}")
        print(f"   Suspended: {'–î–∞' if instance.get('suspended') else '–ù–µ—Ç'}")
        print(f"   Tenant ID: {instance.get('tenantId', 'N/A')}")


def print_external_tasks(tasks: List[Dict]):
    """–í—ã–≤–µ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    print("\n" + "="*80)
    print(f"‚ö° –í–ù–ï–®–ù–ò–ï –ó–ê–î–ê–ß–ò ({len(tasks)})")
    print("="*80)
    
    if not tasks:
        print("–ù–µ—Ç –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–¥–∞—á")
        return
    
    for i, task in enumerate(tasks, 1):
        print(f"\n{i}. Task ID: {task.get('id')}")
        print(f"   Topic Name: {task.get('topicName')}")
        print(f"   Worker ID: {task.get('workerId', 'N/A')}")
        print(f"   Process Instance ID: {task.get('processInstanceId')}")
        print(f"   Process Definition ID: {task.get('processDefinitionId')}")
        print(f"   Process Definition Key: {task.get('processDefinitionKey')}")
        print(f"   Activity ID: {task.get('activityId')}")
        print(f"   Activity Instance ID: {task.get('activityInstanceId')}")
        print(f"   Execution ID: {task.get('executionId')}")
        print(f"   Retries: {task.get('retries')}")
        print(f"   Suspended: {'–î–∞' if task.get('suspended') else '–ù–µ—Ç'}")
        print(f"   Priority: {task.get('priority')}")
        print(f"   Business Key: {task.get('businessKey', 'N/A')}")
        print(f"   Tenant ID: {task.get('tenantId', 'N/A')}")
        
        # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        lock_time = task.get('lockExpirationTime')
        if lock_time:
            print(f"   Lock Expiration: {format_datetime(lock_time)}")


def print_user_tasks(tasks: List[Dict]):
    """–í—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"""
    print("\n" + "="*80)
    print(f"üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ó–ê–î–ê–ß–ò ({len(tasks)})")
    print("="*80)
    
    if not tasks:
        print("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á")
        return
    
    for i, task in enumerate(tasks, 1):
        print(f"\n{i}. Task ID: {task.get('id')}")
        print(f"   Name: {task.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}")
        print(f"   Description: {task.get('description', 'N/A')}")
        print(f"   Assignee: {task.get('assignee', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}")
        print(f"   Owner: {task.get('owner', 'N/A')}")
        print(f"   Process Instance ID: {task.get('processInstanceId')}")
        print(f"   Process Definition Key: {task.get('processDefinitionKey')}")
        print(f"   Task Definition Key: {task.get('taskDefinitionKey')}")
        print(f"   Execution ID: {task.get('executionId')}")
        print(f"   Created: {format_datetime(task.get('created'))}")
        print(f"   Due Date: {format_datetime(task.get('due'))}")
        print(f"   Priority: {task.get('priority')}")
        print(f"   Suspended: {'–î–∞' if task.get('suspended') else '–ù–µ—Ç'}")


def print_engine_info(info: Dict):
    """–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–≤–∏–∂–∫–µ"""
    print("\n" + "="*80)
    print("üèóÔ∏è  –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–í–ò–ñ–ö–ï CAMUNDA")
    print("="*80)
    
    if not info:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–≤–∏–∂–∫–µ")
        return
    
    print(f"Version: {info.get('version', 'N/A')}")
    print(f"Date: {info.get('date', 'N/A')}")
    
    
def print_statistics(service: CamundaProcessService):
    """–í—ã–≤–µ—Å—Ç–∏ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    print("\n" + "="*80)
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*80)
    
    definitions = service.get_process_definitions()
    instances = service.get_process_instances()
    external_tasks = service.get_external_tasks()
    user_tasks = service.get_user_tasks()
    
    print(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(definitions)}")
    print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {len(instances)}")
    print(f"–í–Ω–µ—à–Ω–∏—Ö –∑–∞–¥–∞—á: {len(external_tasks)}")
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á: {len(user_tasks)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–ø–∏–∫–∞–º –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–¥–∞—á
    if external_tasks:
        topics = {}
        for task in external_tasks:
            topic = task.get('topicName', 'unknown')
            topics[topic] = topics.get(topic, 0) + 1
        
        print(f"\n–í–Ω–µ—à–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ç–æ–ø–∏–∫–∞–º:")
        for topic, count in sorted(topics.items()):
            print(f"  {topic}: {count}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–∞–º
    if instances:
        processes = {}
        for instance in instances:
            key = instance.get('processDefinitionKey', 'unknown')
            processes[key] = processes.get(key, 0) + 1
        
        print(f"\n–ê–∫—Ç–∏–≤–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–∞–º:")
        for process_key, count in sorted(processes.items()):
            print(f"  {process_key}: {count}")


def export_to_json(service: CamundaProcessService, filename: str):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    data = {
        "timestamp": datetime.now().isoformat(),
        "engine_info": service.get_engine_info(),
        "process_definitions": service.get_process_definitions(),
        "process_instances": service.get_process_instances(),
        "external_tasks": service.get_external_tasks(),
        "user_tasks": service.get_user_tasks()
    }
    
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ —Ñ–∞–π–ª {filename}: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ Camunda",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python camunda_processes.py                    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  python camunda_processes.py --definitions     # –¢–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  python camunda_processes.py --instances       # –¢–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  python camunda_processes.py --external-tasks  # –¢–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ –∑–∞–¥–∞—á–∏
  python camunda_processes.py --user-tasks      # –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
  python camunda_processes.py --stats           # –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  python camunda_processes.py --export data.json # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
        """
    )
    
    parser.add_argument('--definitions', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤')
    parser.add_argument('--instances', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤')
    parser.add_argument('--external-tasks', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∑–∞–¥–∞—á–∏')
    parser.add_argument('--user-tasks', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–¥–∞—á–∏')
    parser.add_argument('--stats', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    parser.add_argument('--export', metavar='FILE',
                       help='–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª')
    parser.add_argument('--all-instances', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã (–≤–∫–ª—é—á–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)')
    
    args = parser.parse_args()
    
    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã, –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ
    show_all = not any([args.definitions, args.instances, args.external_tasks, 
                       args.user_tasks, args.stats, args.export])
    
    try:
        service = CamundaProcessService()
        
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Camunda: {service.base_url}")
        print(f"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if service.auth else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        engine_info = service.get_engine_info()
        if not engine_info:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Camunda")
            sys.exit(1)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–≤–∏–∂–∫–µ
        if show_all or args.stats:
            print_engine_info(engine_info)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
        if args.export:
            export_to_json(service, args.export)
            if not show_all:
                return
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        if show_all or args.definitions:
            definitions = service.get_process_definitions()
            print_process_definitions(definitions)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        if show_all or args.instances:
            instances = service.get_process_instances(active_only=not args.all_instances)
            print_process_instances(instances)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∑–∞–¥–∞—á–∏
        if show_all or args.external_tasks:
            external_tasks = service.get_external_tasks()
            print_external_tasks(external_tasks)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
        if show_all or args.user_tasks:
            user_tasks = service.get_user_tasks()
            print_user_tasks(user_tasks)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if show_all or args.stats:
            print_statistics(service)
        
        print(f"\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 