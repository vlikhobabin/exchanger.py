#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –æ—á–µ—Ä–µ–¥—è—Ö RabbitMQ
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—á–∏—â–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏

–ö–û–ú–ê–ù–î–´ –î–õ–Ø –†–ê–ë–û–¢–´:

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
python queue_reader.py

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤—ã—Ö 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
python queue_reader.py bitrix24.queue

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤—ã—Ö 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
python queue_reader.py bitrix24.queue --count 10

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ—à–∏–±–æ–∫
python queue_reader.py errors.camunda_tasks.queue --count 3

# –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–µ—Ä–µ–¥–∏ –≤ JSON —Ñ–∞–π–ª
python queue_reader.py bitrix24.queue --output bitrix24_backup.json

# –≠–∫—Å–ø–æ—Ä—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ—à–∏–±–æ–∫
python queue_reader.py errors.camunda_tasks.queue --output errors_backup.json

# –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
python queue_reader.py bitrix24.queue --clear

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
python queue_reader.py bitrix24.sent.queue --clear --force
python '/opt/exchanger.py/camunda-worker/tools/queue_reader.py' bitrix24.sent.queue --clear --force

# –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ—à–∏–±–æ–∫
python queue_reader.py errors.camunda_tasks.queue --clear --force

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
python queue_reader.py --help
"""
import argparse
import json
import sys
import time
from typing import List, Dict, Any, Optional
import pika

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import rabbitmq_config
from rabbitmq_client import RabbitMQClient


class QueueReader:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –æ—á–µ—Ä–µ–¥—è—Ö RabbitMQ"""
    
    def __init__(self):
        self.config = rabbitmq_config
        self.connection = None
        self.channel = None
        
    def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            credentials = pika.PlainCredentials(
                self.config.username, 
                self.config.password
            )
            
            parameters = pika.ConnectionParameters(
                host=self.config.host,
                port=self.config.port,
                virtual_host=self.config.virtual_host,
                credentials=credentials,
                heartbeat=600,
                blocked_connection_timeout=300
            )
            
            self.connection = pika.BlockingConnection(parameters)
            self.channel = self.connection.channel()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {e}")
            return False
    
    def disconnect(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if self.channel and not self.channel.is_closed:
                self.channel.close()
            if self.connection and not self.connection.is_closed:
                self.connection.close()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
    
    def list_queues(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print("üê∞ –û–ß–ï–†–ï–î–ò RABBITMQ")
        print("=" * 60)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π RabbitMQClient –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥—è—Ö
        client = RabbitMQClient()
        
        if not client.connect():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RabbitMQ")
            return False
        
        queues_info = client.get_all_queues_info()
        
        if not queues_info:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–µ—Ä–µ–¥—è—Ö")
            client.disconnect()
            return False
        
        total_messages = 0
        
        for queue_name, info in sorted(queues_info.items()):
            msg_count = info.get("message_count", 0)
            consumer_count = info.get("consumer_count", 0)
            total_messages += msg_count
            
            # –ò–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            msg_icon = "üì¨" if msg_count > 0 else "üì≠"
            consumer_icon = "üë•" if consumer_count > 0 else "üö´"
            
            print(f"\n{msg_icon} {queue_name}")
            print(f"   üì® –°–æ–æ–±—â–µ–Ω–∏–π: {msg_count:,}")
            print(f"   {consumer_icon} –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π: {consumer_count}")
            
            if msg_count > 100:
                print(f"   ‚ö†Ô∏è –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π!")
            elif msg_count > 0:
                print(f"   ‚ÑπÔ∏è –ï—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        print(f"\nüìä –ò–¢–û–ì–û:")
        print(f"   –û—á–µ—Ä–µ–¥–µ–π: {len(queues_info)}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–π: {total_messages:,}")
        
        client.disconnect()
        return True
    
    def peek_messages(self, queue_name: str, count: int = 5) -> bool:
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤—ã—Ö N —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)"""
        if not self.connect():
            return False
        
        try:
            print(f"üëÄ –ü–†–û–°–ú–û–¢–† –°–û–û–ë–©–ï–ù–ò–ô –ò–ó –û–ß–ï–†–ï–î–ò: {queue_name}")
            print("=" * 80)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
            try:
                method = self.channel.queue_declare(queue=queue_name, passive=True)
                msg_count = method.method.message_count
                print(f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: {msg_count:,}")
                
                if msg_count == 0:
                    print("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
                    return True
                    
            except pika.exceptions.ChannelClosedByBroker:
                print(f"‚ùå –û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            max_to_read = min(count, msg_count)
            messages_read = 0
            delivery_tags = []  # –°–æ–±–∏—Ä–∞–µ–º delivery_tag –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–æ–Ω—Ü–µ
            
            while messages_read < max_to_read:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                method_frame, header_frame, body = self.channel.basic_get(
                    queue=queue_name, 
                    auto_ack=False
                )
                
                if method_frame is None:
                    break  # –ù–µ—Ç –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                
                messages_read += 1
                delivery_tags.append(method_frame.delivery_tag)
                
                # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    message_data = json.loads(body.decode('utf-8'))
                    formatted_message = json.dumps(message_data, ensure_ascii=False, indent=2)
                except (json.JSONDecodeError, UnicodeDecodeError):
                    formatted_message = body.decode('utf-8', errors='replace')
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
                print(f"\nüì® –°–û–û–ë–©–ï–ù–ò–ï #{messages_read}")
                print(f"‚îú‚îÄ Delivery Tag: {method_frame.delivery_tag}")
                print(f"‚îú‚îÄ Exchange: {method_frame.exchange}")
                print(f"‚îú‚îÄ Routing Key: {method_frame.routing_key}")
                print(f"‚îú‚îÄ Redelivered: {'–î–∞' if method_frame.redelivered else '–ù–µ—Ç'}")
                
                if header_frame:
                    print(f"‚îú‚îÄ Content Type: {header_frame.content_type}")
                    if header_frame.timestamp:
                        timestamp = time.strftime('%Y-%m-%d %H:%M:%S', 
                                               time.localtime(header_frame.timestamp))
                        print(f"‚îú‚îÄ Timestamp: {timestamp}")
                    if header_frame.headers:
                        print(f"‚îú‚îÄ Headers: {header_frame.headers}")
                
                print(f"‚îî‚îÄ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
                print(f"   {formatted_message}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –≤ –∫–æ–Ω—Ü–µ
            for delivery_tag in delivery_tags:
                self.channel.basic_nack(
                    delivery_tag=delivery_tag, 
                    requeue=True
                )
            
            if messages_read > 0:
                print(f"\n‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ {messages_read} –∏–∑ {max_to_read} —Å–æ–æ–±—â–µ–Ω–∏–π")
                print("‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å")
            else:
                print("üì≠ –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return False
        finally:
            self.disconnect()
    
    def export_messages(self, queue_name: str, output_file: str) -> bool:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤ JSON —Ñ–∞–π–ª"""
        if not self.connect():
            return False
        
        try:
            print(f"üíæ –≠–ö–°–ü–û–†–¢ –°–û–û–ë–©–ï–ù–ò–ô –ò–ó –û–ß–ï–†–ï–î–ò: {queue_name}")
            print(f"üìÑ –§–∞–π–ª: {output_file}")
            print("=" * 80)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
            try:
                method = self.channel.queue_declare(queue=queue_name, passive=True)
                msg_count = method.method.message_count
                print(f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: {msg_count:,}")
                
                if msg_count == 0:
                    print("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å")
                    return True
                    
            except pika.exceptions.ChannelClosedByBroker:
                print(f"‚ùå –û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
            
            messages = []
            messages_read = 0
            delivery_tags = []  # –°–æ–±–∏—Ä–∞–µ–º delivery_tag –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–æ–Ω—Ü–µ
            
            print("üîÑ –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            # –ß–∏—Ç–∞–µ–º –Ω–µ –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π, —á–µ–º –µ—Å—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏
            while messages_read < msg_count:
                method_frame, header_frame, body = self.channel.basic_get(
                    queue=queue_name, 
                    auto_ack=False
                )
                
                if method_frame is None:
                    break  # –ù–µ—Ç –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                
                messages_read += 1
                delivery_tags.append(method_frame.delivery_tag)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                message_info = {
                    "message_number": messages_read,
                    "delivery_tag": method_frame.delivery_tag,
                    "exchange": method_frame.exchange,
                    "routing_key": method_frame.routing_key,
                    "redelivered": method_frame.redelivered,
                    "properties": {},
                    "body": None,
                    "body_raw": body.decode('utf-8', errors='replace')
                }
                
                # –°–≤–æ–π—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                if header_frame:
                    if header_frame.content_type:
                        message_info["properties"]["content_type"] = header_frame.content_type
                    if header_frame.timestamp:
                        message_info["properties"]["timestamp"] = header_frame.timestamp
                        message_info["properties"]["timestamp_human"] = time.strftime(
                            '%Y-%m-%d %H:%M:%S', time.localtime(header_frame.timestamp)
                        )
                    if header_frame.headers:
                        message_info["properties"]["headers"] = header_frame.headers
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON
                try:
                    message_info["body"] = json.loads(body.decode('utf-8'))
                    message_info["body_type"] = "json"
                except (json.JSONDecodeError, UnicodeDecodeError):
                    message_info["body"] = body.decode('utf-8', errors='replace')
                    message_info["body_type"] = "text"
                
                messages.append(message_info)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
                if messages_read % 100 == 0:
                    print(f"   –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {messages_read:,} —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –≤ –∫–æ–Ω—Ü–µ
            for delivery_tag in delivery_tags:
                self.channel.basic_nack(
                    delivery_tag=delivery_tag, 
                    requeue=True
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            export_data = {
                "export_info": {
                    "queue_name": queue_name,
                    "timestamp": int(time.time() * 1000),
                    "timestamp_human": time.strftime('%Y-%m-%d %H:%M:%S'),
                    "total_messages": len(messages),
                    "rabbitmq_host": self.config.host,
                    "rabbitmq_port": self.config.port
                },
                "messages": messages
            }
            
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:")
            print(f"   üìä –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages):,}")
            print(f"   üìÑ –§–∞–π–ª: {output_file}")
            print(f"   üíæ –†–∞–∑–º–µ—Ä: {os.path.getsize(output_file):,} –±–∞–π—Ç")
            print("‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
            return False
        finally:
            self.disconnect()
    
    def clear_queue(self, queue_name: str, force: bool = False) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        if not self.connect():
            return False
        
        try:
            print(f"üóëÔ∏è –û–ß–ò–°–¢–ö–ê –û–ß–ï–†–ï–î–ò: {queue_name}")
            print("=" * 60)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                method = self.channel.queue_declare(queue=queue_name, passive=True)
                msg_count = method.method.message_count
                print(f"üìä –°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: {msg_count:,}")
                
                if msg_count == 0:
                    print("üì≠ –û—á–µ—Ä–µ–¥—å —É–∂–µ –ø—É—Å—Ç–∞")
                    return True
                    
            except pika.exceptions.ChannelClosedByBroker:
                print(f"‚ùå –û—á–µ—Ä–µ–¥—å '{queue_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            if not force:
                print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!")
                print(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –£–î–ê–õ–ò–¢–¨ {msg_count:,} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '{queue_name}'")
                print("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!")
                
                confirmation = input("\n–í–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip()
                
                if confirmation != 'YES':
                    print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    return False
            
            # –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
            print(f"\nüîÑ –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏...")
            self.channel.queue_purge(queue=queue_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            method = self.channel.queue_declare(queue=queue_name, passive=True)
            remaining_count = method.method.message_count
            
            if remaining_count == 0:
                print(f"‚úÖ –û—á–µ—Ä–µ–¥—å '{queue_name}' —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {msg_count:,}")
                return True
            else:
                print(f"‚ö†Ô∏è –í –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª–æ—Å—å {remaining_count:,} —Å–æ–æ–±—â–µ–Ω–∏–π")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
            return False
        finally:
            self.disconnect()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –æ—á–µ—Ä–µ–¥—è—Ö RabbitMQ",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
  python queue_reader.py

  # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤—ã—Ö 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
  python queue_reader.py errors.camunda_tasks.queue

  # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤—ã—Ö 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
  python queue_reader.py errors.camunda_tasks.queue --count 10

  # –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ JSON —Ñ–∞–π–ª
  python queue_reader.py errors.camunda_tasks.queue --output errors_backup.json

  # –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
  python queue_reader.py errors.camunda_tasks.queue --clear

  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ (–±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
  python queue_reader.py errors.camunda_tasks.queue --clear --force
        """
    )
    
    parser.add_argument(
        "queue", 
        nargs="?", 
        help="–ò–º—è –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã"
    )
    
    parser.add_argument(
        "--count", "-c",
        type=int,
        default=5,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)"
    )
    
    parser.add_argument(
        "--output", "-o",
        help="–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ JSON —Ñ–∞–π–ª"
    )
    
    parser.add_argument(
        "--clear",
        action="store_true",
        help="–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å (—É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)"
    )
    
    parser.add_argument(
        "--force",
        action="store_true",
        help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    )
    
    args = parser.parse_args()
    
    reader = QueueReader()
    
    try:
        # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π
        if not args.queue:
            return reader.list_queues()
        
        # –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        if args.clear:
            return reader.clear_queue(args.queue, args.force)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª
        if args.output:
            return reader.export_messages(args.queue, args.output)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        return reader.peek_messages(args.queue, args.count)
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)