#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö External Tasks
"""
import requests
from requests.auth import HTTPBasicAuth

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
import os
import sys
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import camunda_config

def unlock_task(task_id):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É"""
    print(f"üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏: {task_id}")
    
    # URL –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ - –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º /engine-rest
    base_url = camunda_config.base_url.rstrip('/')
    if base_url.endswith('/engine-rest'):
        unlock_url = f"{base_url}/external-task/{task_id}/unlock"
    else:
        unlock_url = f"{base_url}/engine-rest/external-task/{task_id}/unlock"
    
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    auth = None
    if camunda_config.auth_enabled:
        auth = HTTPBasicAuth(camunda_config.auth_username, camunda_config.auth_password)
    
    try:
        print(f"üåê URL: {unlock_url}")
        
        response = requests.post(unlock_url, auth=auth, verify=False, timeout=10)
        
        if response.status_code == 204:
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: HTTP {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        return False

def get_locked_tasks():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    print("üîç –ü–æ–∏—Å–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...")
    
    base_url = camunda_config.base_url.rstrip('/')
    if base_url.endswith('/engine-rest'):
        tasks_url = f"{base_url}/external-task"
    else:
        tasks_url = f"{base_url}/engine-rest/external-task"
    
    auth = None
    if camunda_config.auth_enabled:
        auth = HTTPBasicAuth(camunda_config.auth_username, camunda_config.auth_password)
    
    try:
        response = requests.get(tasks_url, auth=auth, verify=False, timeout=10)
        
        if response.status_code == 200:
            tasks = response.json()
            locked_tasks = [task for task in tasks if task.get('workerId') is not None]
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(locked_tasks)}")
            
            for i, task in enumerate(locked_tasks, 1):
                print(f"\nüéØ –ó–∞–¥–∞—á–∞ {i}:")
                print(f"   ID: {task.get('id')}")
                print(f"   Topic: {task.get('topicName')}")
                print(f"   Worker ID: {task.get('workerId')}")
                print(f"   Lock Expiration: {task.get('lockExpirationTime')}")
                
            return locked_tasks
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: HTTP {response.status_code}")
            return []
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

def unlock_all_test_tasks():
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ worker'–∞–º–∏"""
    print("üßπ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
    
    locked_tasks = get_locked_tasks()
    # test_workers = ['test-direct-client', 'test-fetch-worker', 'test-fixed-worker', 'debug-test-worker']
    
    unlocked_count = 0
    
    for task in locked_tasks:
        worker_id = task.get('workerId', '')
        task_id = task.get('id')
        
        # if any(test_worker in worker_id for test_worker in test_workers):
        print(f"\nüéØ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞:")
        print(f"   Task ID: {task_id}")
        print(f"   Worker ID: {worker_id}")
        print(f"   Topic: {task.get('topicName')}")
        
        if unlock_task(task_id):
            unlocked_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ {unlocked_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á")
    return unlocked_count

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîì –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê EXTERNAL TASKS")
    print("=" * 50)
    print(f"üîó Camunda URL: {camunda_config.base_url}")
    print(f"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if camunda_config.auth_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
    print()
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
    known_task_id = "93e739d5-5697-11f0-a3a6-00b436387543"
    print(f"üéØ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏: {known_task_id}")
    
    if unlock_task(known_task_id):
        print("‚úÖ –ò–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!")
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–∑–≤–µ—Å—Ç–Ω—É—é –∑–∞–¥–∞—á—É")
    
    print("\n" + "=" * 50)
    
    # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á
    unlock_all_test_tasks()
    
    print("\n" + "=" * 50)
    print("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main() 