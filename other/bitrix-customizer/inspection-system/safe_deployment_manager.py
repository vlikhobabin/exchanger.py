#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è Bitrix24
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö
"""

import os
import sys
import json
import shutil
import subprocess
import datetime
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Set
from file_analyzer import BitrixFileAnalyzer
from enhanced_backup_manager import EnhancedBackupManager
from enhanced_restore_manager import EnhancedRestoreManager


class SafeDeploymentManager:
    """–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.config_file = self.project_root / "config.json"
        self.reports_dir = self.project_root / "reports"
        self.deployments_dir = self.project_root / "deployments"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.reports_dir.mkdir(parents=True, exist_ok=True)
        self.deployments_dir.mkdir(parents=True, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.file_analyzer = BitrixFileAnalyzer()
        self.backup_manager = EnhancedBackupManager()
        self.restore_manager = EnhancedRestoreManager()
        
        self.deployment_session = {
            'timestamp': datetime.datetime.now().isoformat(),
            'session_id': self._generate_session_id(),
            'deployment_config': {},
            'phases': {},
            'backup_session_id': None,
            'recovery_point_id': None,
            'errors': [],
            'warnings': [],
            'rollback_available': False
        }
        
    def _generate_session_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        return f"deploy_session_{timestamp}"
    
    def load_config(self) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            return config
        except FileNotFoundError:
            self.deployment_session['errors'].append(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        except json.JSONDecodeError as e:
            self.deployment_session['errors'].append(f"–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return None
    
    def safe_deploy(self, deployment_config_path: str, dry_run: bool = False) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"""
        print("üöÄ –ë–ï–ó–û–ü–ê–°–ù–û–ï –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï BITRIX24")
        print("="*70)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        deployment_config = self._load_deployment_config(deployment_config_path)
        if not deployment_config:
            return False
        
        self.deployment_session['deployment_config'] = deployment_config
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞
        server_config = self.load_config()
        if not server_config:
            return False
        
        print(f"üéØ –°–µ—Ä–≤–µ—Ä: {server_config['server']['user']}@{server_config['server']['host']}")
        print(f"üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {deployment_config_path}")
        print(f"üîÑ –°–µ—Å—Å–∏—è: {self.deployment_session['session_id']}")
        if dry_run:
            print("üß™ –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        print("-" * 70)
        
        # –§–∞–∑—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        phases = [
            ("pre_deployment_validation", "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", self._phase_pre_deployment_validation),
            ("system_analysis", "–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã", self._phase_system_analysis),
            ("backup_creation", "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏", self._phase_backup_creation),
            ("deployment_validation", "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è", self._phase_deployment_validation),
            ("safe_deployment", "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ", self._phase_safe_deployment),
            ("post_deployment_validation", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è", self._phase_post_deployment_validation),
            ("cleanup", "–û—á–∏—Å—Ç–∫–∞", self._phase_cleanup)
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∞–∑—ã
        for phase_name, phase_description, phase_function in phases:
            if not self._execute_phase(phase_name, phase_description, phase_function, 
                                     server_config, deployment_config, dry_run):
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–∑–µ: {phase_description}")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫–∞—Ç
                if self.deployment_session.get('rollback_available') and not dry_run:
                    self._offer_rollback()
                
                return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        self._save_deployment_report()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        self._print_deployment_summary(dry_run)
        
        return True
    
    def _load_deployment_config(self, config_path: str) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            return config
        except FileNotFoundError:
            self.deployment_session['errors'].append(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            return None
        except json.JSONDecodeError as e:
            self.deployment_session['errors'].append(f"–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
            return None
    
    def _execute_phase(self, phase_name: str, phase_description: str, phase_function, 
                      server_config: Dict, deployment_config: Dict, dry_run: bool) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∞–∑—É —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        print(f"\nüìã –§–ê–ó–ê: {phase_description.upper()}")
        print("-" * 50)
        
        phase_start_time = datetime.datetime.now()
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∞–∑—É
            phase_result = phase_function(server_config, deployment_config, dry_run)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∞–∑—ã
            self.deployment_session['phases'][phase_name] = {
                'description': phase_description,
                'start_time': phase_start_time.isoformat(),
                'end_time': datetime.datetime.now().isoformat(),
                'success': phase_result['success'],
                'details': phase_result,
                'dry_run': dry_run
            }
            
            if phase_result['success']:
                print(f"‚úÖ {phase_description} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå {phase_description} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
                if 'errors' in phase_result:
                    for error in phase_result['errors']:
                        print(f"   - {error}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ñ–∞–∑–µ {phase_description}: {e}")
            self.deployment_session['errors'].append(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ñ–∞–∑–µ {phase_description}: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            self.deployment_session['phases'][phase_name] = {
                'description': phase_description,
                'start_time': phase_start_time.isoformat(),
                'end_time': datetime.datetime.now().isoformat(),
                'success': False,
                'error': str(e),
                'dry_run': dry_run
            }
            return False
    
    def _phase_pre_deployment_validation(self, server_config: Dict, deployment_config: Dict, dry_run: bool) -> Dict:
        """–§–∞–∑–∞ 1: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"""
        result = {
            'success': True,
            'server_accessible': False,
            'deployment_config_valid': False,
            'dependencies_available': False,
            'permissions_ok': False,
            'errors': [],
            'warnings': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        print("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...")
        if self._test_server_connection(server_config['server']):
            result['server_accessible'] = True
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            result['success'] = False
            result['errors'].append("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return result
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
        config_validation = self._validate_deployment_config(deployment_config)
        if config_validation['valid']:
            result['deployment_config_valid'] = True
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        else:
            result['success'] = False
            result['errors'].extend(config_validation['errors'])
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞")
            return result
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        dependencies_check = self._check_dependencies(deployment_config)
        if dependencies_check['success']:
            result['dependencies_available'] = True
            print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            result['warnings'].extend(dependencies_check['warnings'])
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        print("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...")
        permissions_check = self._check_permissions(server_config['server'], deployment_config)
        if permissions_check['success']:
            result['permissions_ok'] = True
            print("‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        else:
            result['success'] = False
            result['errors'].extend(permissions_check['errors'])
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return result
        
        return result
    
    def _phase_system_analysis(self, server_config: Dict, deployment_config: Dict, dry_run: bool) -> Dict:
        """–§–∞–∑–∞ 2: –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        result = {
            'success': True,
            'files_analyzed': 0,
            'conflicts_detected': [],
            'risks_identified': [],
            'recommendations': [],
            'errors': []
        }
        
        print("üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analysis_result = self.file_analyzer.analyze_deployment_plan(deployment_config)
        
        if analysis_result.get('errors'):
            result['errors'].extend(analysis_result['errors'])
            result['success'] = False
            return result
        
        files_to_backup = analysis_result.get('files_to_backup', {})
        result['files_analyzed'] = len(files_to_backup)
        
        print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {result['files_analyzed']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        print("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
        conflicts = self._detect_deployment_conflicts(server_config['server'], files_to_backup)
        result['conflicts_detected'] = conflicts
        
        if conflicts:
            print(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã: {len(conflicts)}")
            for conflict in conflicts[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   - {conflict}")
        else:
            print("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
        print("üîç –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤...")
        risks = self._analyze_deployment_risks(files_to_backup)
        result['risks_identified'] = risks
        
        if risks:
            print(f"‚ö†Ô∏è  –í—ã—è–≤–ª–µ–Ω—ã —Ä–∏—Å–∫–∏: {len(risks)}")
            for risk in risks[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   - {risk}")
        else:
            print("‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã–µ —Ä–∏—Å–∫–∏ –Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations = self._generate_deployment_recommendations(files_to_backup, conflicts, risks)
        result['recommendations'] = recommendations
        
        if recommendations:
            print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(recommendations)}")
            for rec in recommendations[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   - {rec}")
        
        return result
    
    def _phase_backup_creation(self, server_config: Dict, deployment_config: Dict, dry_run: bool) -> Dict:
        """–§–∞–∑–∞ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        result = {
            'success': True,
            'backup_session_id': None,
            'files_backed_up': 0,
            'backup_size': 0,
            'errors': []
        }
        
        if dry_run:
            print("üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è")
            result['backup_session_id'] = f"dry_run_{self.deployment_session['session_id']}"
            return result
        
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_success = self.backup_manager.create_comprehensive_backup(
            deployment_config=deployment_config
        )
        
        if backup_success:
            result['backup_session_id'] = self.backup_manager.session_info['session_id']
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å–µ—Å—Å–∏–∏ backup_manager
            backup_stats = getattr(self.backup_manager, 'last_backup_stats', {})
            result['files_backed_up'] = backup_stats.get('successful_count', 0)
            result['backup_size'] = backup_stats.get('total_size', 0)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ —Å–µ—Å—Å–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            self.deployment_session['backup_session_id'] = result['backup_session_id']
            self.deployment_session['rollback_available'] = True
            
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {result['backup_session_id']}")
        else:
            result['success'] = False
            result['errors'].append("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
        
        return result
    
    def _phase_deployment_validation(self, server_config: Dict, deployment_config: Dict, dry_run: bool) -> Dict:
        """–§–∞–∑–∞ 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        result = {
            'success': True,
            'files_validated': 0,
            'syntax_errors': [],
            'dependency_errors': [],
            'compatibility_issues': [],
            'errors': []
        }
        
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        files_info = deployment_config.get('files', [])
        
        for file_info in files_info:
            local_path = file_info.get('local', '')
            file_type = file_info.get('type', 'unknown')
            
            if not local_path:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            local_file_path = self.project_root / local_path
            if not local_file_path.exists():
                result['errors'].append(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {local_path}")
                continue
            
            print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: {local_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            syntax_check = self._validate_file_syntax(local_file_path, file_type)
            if not syntax_check['valid']:
                result['syntax_errors'].extend(syntax_check['errors'])
                print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {local_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            dependency_check = self._validate_file_dependencies(local_file_path, file_type)
            if not dependency_check['valid']:
                result['dependency_errors'].extend(dependency_check['errors'])
                print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –≤ {local_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            compatibility_check = self._validate_file_compatibility(local_file_path, file_type)
            if not compatibility_check['valid']:
                result['compatibility_issues'].extend(compatibility_check['errors'])
                print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤ {local_path}")
            
            result['files_validated'] += 1
        
        print(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {result['files_validated']}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ä–∏—Ç–∏—á–Ω—ã –ª–∏ –æ—à–∏–±–∫–∏
        if result['syntax_errors']:
            result['success'] = False
            result['errors'].append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: {len(result['syntax_errors'])}")
        
        return result
    
    def _phase_safe_deployment(self, server_config: Dict, deployment_config: Dict, dry_run: bool) -> Dict:
        """–§–∞–∑–∞ 5: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"""
        result = {
            'success': True,
            'files_deployed': 0,
            'files_failed': 0,
            'deployment_details': {},
            'errors': []
        }
        
        if dry_run:
            print("üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ñ–∞–π–ª—ã –Ω–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—é—Ç—Å—è")
            result['files_deployed'] = len(deployment_config.get('files', []))
            return result
        
        print("üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        files_info = deployment_config.get('files', [])
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        sorted_files = sorted(files_info, key=lambda x: self._get_deployment_priority(x))
        
        for file_info in sorted_files:
            local_path = file_info.get('local', '')
            remote_path = file_info.get('remote', '')
            file_type = file_info.get('type', 'unknown')
            
            if not local_path or not remote_path:
                continue
            
            print(f"üì§ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: {os.path.basename(local_path)}")
            
            # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            deploy_result = self._deploy_single_file(server_config['server'], local_path, remote_path, file_info)
            
            if deploy_result['success']:
                result['files_deployed'] += 1
                result['deployment_details'][remote_path] = deploy_result
                print(f"‚úÖ –†–∞–∑–≤–µ—Ä–Ω—É—Ç: {os.path.basename(local_path)}")
            else:
                result['files_failed'] += 1
                result['deployment_details'][remote_path] = deploy_result
                result['errors'].append(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è {local_path}: {deploy_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                print(f"‚ùå –û—à–∏–±–∫–∞: {os.path.basename(local_path)} - {deploy_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        print(f"üìä –†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ —Ñ–∞–π–ª–æ–≤: {result['files_deployed']}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {result['files_failed']}")
        
        if result['files_failed'] > 0:
            result['success'] = False
        
        return result
    
    def _phase_post_deployment_validation(self, server_config: Dict, deployment_config: Dict, dry_run: bool) -> Dict:
        """–§–∞–∑–∞ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        result = {
            'success': True,
            'files_verified': 0,
            'system_functional': False,
            'performance_impact': 'unknown',
            'errors': []
        }
        
        if dry_run:
            print("üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            result['system_functional'] = True
            return result
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —Ñ–∞–π–ª—ã
        files_info = deployment_config.get('files', [])
        
        for file_info in files_info:
            remote_path = file_info.get('remote', '')
            
            if not remote_path:
                continue
            
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {os.path.basename(remote_path)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            verification_result = self._verify_deployed_file(server_config['server'], remote_path, file_info)
            
            if verification_result['success']:
                result['files_verified'] += 1
                print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω: {os.path.basename(remote_path)}")
            else:
                result['errors'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {remote_path}: {verification_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {os.path.basename(remote_path)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
        print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
        system_check = self._check_system_functionality(server_config['server'])
        result['system_functional'] = system_check['functional']
        
        if system_check['functional']:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            result['success'] = False
            result['errors'].append("–°–∏—Å—Ç–µ–º–∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        performance_check = self._check_performance_impact(server_config['server'])
        result['performance_impact'] = performance_check['impact']
        
        if performance_check['impact'] == 'high':
            result['errors'].append("–í—ã—Å–æ–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            print("‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        elif performance_check['impact'] == 'medium':
            print("‚ö†Ô∏è  –£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        else:
            print("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
        return result
    
    def _phase_cleanup(self, server_config: Dict, deployment_config: Dict, dry_run: bool) -> Dict:
        """–§–∞–∑–∞ 7: –û—á–∏—Å—Ç–∫–∞"""
        result = {
            'success': True,
            'temp_files_cleaned': 0,
            'permissions_fixed': 0,
            'errors': []
        }
        
        if dry_run:
            print("üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—á–∏—Å—Ç–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return result
        
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        temp_cleanup = self._cleanup_temp_files(server_config['server'])
        result['temp_files_cleaned'] = temp_cleanup['cleaned']
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        permissions_fix = self._fix_file_permissions(server_config['server'], deployment_config)
        result['permissions_fixed'] = permissions_fix['fixed']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º—É—Å–æ—Ä–∞
        garbage_check = self._check_for_garbage(server_config['server'])
        if garbage_check['found']:
            result['errors'].append(f"–ù–∞–π–¥–µ–Ω –º—É—Å–æ—Ä: {garbage_check['found']} —Ñ–∞–π–ª–æ–≤")
        
        print(f"üßπ –û—á–∏—â–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {result['temp_files_cleaned']}")
        print(f"üîí –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {result['permissions_fixed']}")
        
        return result
    
    def _offer_rollback(self):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        if not self.deployment_session.get('rollback_available'):
            print("‚ö†Ô∏è  –û—Ç–∫–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return
        
        print("\n" + "="*50)
        print("üîÑ –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –û–¢–ö–ê–¢–ê")
        print("="*50)
        print("‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.")
        print("üì¶ –î–æ—Å—Ç—É–ø–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞.")
        print(f"üéØ ID —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {self.deployment_session['backup_session_id']}")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\nüí° –î–ª—è –æ—Ç–∫–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:")
        print(f"   python enhanced_restore_manager.py full {self.deployment_session['backup_session_id']}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç –≤ —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
        if self._is_critical_failure():
            print("\nüö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç...")
            self._perform_automatic_rollback()
    
    def _is_critical_failure(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        critical_errors = [
            "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            "–°–∏—Å—Ç–µ–º–∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç",
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"
        ]
        
        all_errors = self.deployment_session.get('errors', [])
        
        return any(critical_error in error for error in all_errors for critical_error in critical_errors)
    
    def _perform_automatic_rollback(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç"""
        if not self.deployment_session.get('backup_session_id'):
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç - –Ω–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            return
        
        print("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–∞—Ç–∞...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        rollback_success = self.restore_manager.emergency_restore(
            self.deployment_session['backup_session_id']
        )
        
        if rollback_success:
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            self.deployment_session['rollback_performed'] = True
        else:
            print("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è")
            self.deployment_session['rollback_failed'] = True
    
    def _test_server_connection(self, server_config: Dict) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._test_connection_with_key(server_config)
        else:
            return self._test_connection_with_password(server_config)
    
    def _test_connection_with_key(self, server_config: Dict) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        plink_cmd = shutil.which('plink')
        if plink_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                'echo "connection_test"'
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                '-o', 'ConnectTimeout=10',
                f"{server_config['user']}@{server_config['host']}",
                'echo "connection_test"'
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'connection_test' in result.stdout
        except:
            return False
    
    def _test_connection_with_password(self, server_config: Dict) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            '-o', 'ConnectTimeout=10',
            f"{server_config['user']}@{server_config['host']}",
            'echo "connection_test"'
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'connection_test' in result.stdout
        except:
            return False
    
    def _validate_deployment_config(self, deployment_config: Dict) -> Dict:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        validation_result = {
            'valid': True,
            'errors': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['project_info', 'files']
        for field in required_fields:
            if field not in deployment_config:
                validation_result['valid'] = False
                validation_result['errors'].append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        if 'files' in deployment_config:
            files = deployment_config['files']
            if not isinstance(files, list):
                validation_result['valid'] = False
                validation_result['errors'].append("–ü–æ–ª–µ 'files' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
            else:
                for i, file_info in enumerate(files):
                    if not isinstance(file_info, dict):
                        validation_result['valid'] = False
                        validation_result['errors'].append(f"–§–∞–π–ª {i}: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
                        continue
                    
                    required_file_fields = ['local', 'remote', 'type']
                    for field in required_file_fields:
                        if field not in file_info:
                            validation_result['valid'] = False
                            validation_result['errors'].append(f"–§–∞–π–ª {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}'")
        
        return validation_result
    
    def _check_dependencies(self, deployment_config: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        dependencies_result = {
            'success': True,
            'warnings': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤
        files = deployment_config.get('files', [])
        for file_info in files:
            local_path = file_info.get('local', '')
            if local_path:
                file_path = self.project_root / local_path
                if not file_path.exists():
                    dependencies_result['success'] = False
                    dependencies_result['warnings'].append(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {local_path}")
        
        return dependencies_result
    
    def _check_permissions(self, server_config: Dict, deployment_config: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"""
        permissions_result = {
            'success': True,
            'errors': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ü–µ–ª–µ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        files = deployment_config.get('files', [])
        checked_dirs = set()
        
        for file_info in files:
            remote_path = file_info.get('remote', '')
            if remote_path:
                remote_dir = os.path.dirname(remote_path)
                if remote_dir not in checked_dirs:
                    if not self._check_directory_writable(server_config, remote_dir):
                        permissions_result['success'] = False
                        permissions_result['errors'].append(f"–ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {remote_dir}")
                    checked_dirs.add(remote_dir)
        
        return permissions_result
    
    def _check_directory_writable(self, server_config: Dict, directory_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._check_directory_writable_with_key(server_config, directory_path)
        else:
            return self._check_directory_writable_with_password(server_config, directory_path)
    
    def _check_directory_writable_with_key(self, server_config: Dict, directory_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∫–ª—é—á–æ–º"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        plink_cmd = shutil.which('plink')
        if plink_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                f'test -w "{directory_path}" && echo "writable"'
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                f"{server_config['user']}@{server_config['host']}",
                f'test -w "{directory_path}" && echo "writable"'
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'writable' in result.stdout
        except:
            return False
    
    def _check_directory_writable_with_password(self, server_config: Dict, directory_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ø–∞—Ä–æ–ª–µ–º"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            f"{server_config['user']}@{server_config['host']}",
            f'test -w "{directory_path}" && echo "writable"'
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'writable' in result.stdout
        except:
            return False
    
    def _detect_deployment_conflicts(self, server_config: Dict, files_to_backup: Dict) -> List[str]:
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏"""
        conflicts = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
        for file_path, file_info in files_to_backup.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ –∏–∑–º–µ–Ω–µ–Ω –ª–∏ –æ–Ω
            if self._check_file_exists_on_server(server_config, file_path):
                current_size = self._get_remote_file_size(server_config, file_path)
                if current_size > 0:
                    conflicts.append(f"–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç: {file_path}")
        
        return conflicts
    
    def _analyze_deployment_risks(self, files_to_backup: Dict) -> List[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∏—Å–∫–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        risks = []
        
        for file_path, file_info in files_to_backup.items():
            file_risks = file_info.get('risks', [])
            for risk in file_risks:
                if risk not in risks:
                    risks.append(f"{os.path.basename(file_path)}: {risk}")
        
        return risks
    
    def _generate_deployment_recommendations(self, files_to_backup: Dict, conflicts: List[str], risks: List[str]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        recommendations = []
        
        if conflicts:
            recommendations.append("–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º")
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤—Ä—É—á–Ω—É—é")
        
        if risks:
            recommendations.append("–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–ø–∏–∏ —Å–∏—Å—Ç–µ–º—ã")
            recommendations.append("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
        has_init_files = any(info.get('file_type') == 'init_file' for info in files_to_backup.values())
        if has_init_files:
            recommendations.append("–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ init.php —Ñ–∞–π–ª–∞–º")
        
        has_template_files = any(info.get('file_type') in ['template_header', 'template_footer'] for info in files_to_backup.values())
        if has_template_files:
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —à–∞–±–ª–æ–Ω–æ–º")
        
        return recommendations
    
    def _validate_file_syntax(self, file_path: Path, file_type: str) -> Dict:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–∞–π–ª–∞"""
        validation_result = {
            'valid': True,
            'errors': []
        }
        
        if file_type == 'php':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PHP —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            try:
                result = subprocess.run(['php', '-l', str(file_path)], 
                                      capture_output=True, text=True, timeout=10)
                if result.returncode != 0:
                    validation_result['valid'] = False
                    validation_result['errors'].append(f"PHP —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {result.stderr}")
            except:
                validation_result['errors'].append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å PHP —Å–∏–Ω—Ç–∞–∫—Å–∏—Å")
        
        elif file_type == 'javascript':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º JavaScript —Å–∏–Ω—Ç–∞–∫—Å–∏—Å (–µ—Å–ª–∏ –µ—Å—Ç—å node.js)
            try:
                result = subprocess.run(['node', '-c', str(file_path)], 
                                      capture_output=True, text=True, timeout=10)
                if result.returncode != 0:
                    validation_result['valid'] = False
                    validation_result['errors'].append(f"JavaScript —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {result.stderr}")
            except:
                # Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                pass
        
        return validation_result
    
    def _validate_file_dependencies(self, file_path: Path, file_type: str) -> Dict:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞"""
        validation_result = {
            'valid': True,
            'errors': []
        }
        
        if file_type == 'php':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PHP –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ò—â–µ–º include/require
                import re
                includes = re.findall(r'(?:include|require)(?:_once)?\s*\(\s*["\']([^"\']+)["\']', content)
                
                for include_path in includes:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                    if not os.path.isabs(include_path):
                        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                        full_include_path = file_path.parent / include_path
                        if not full_include_path.exists():
                            validation_result['errors'].append(f"–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {include_path}")
                    
            except Exception as e:
                validation_result['errors'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        
        return validation_result
    
    def _validate_file_compatibility(self, file_path: Path, file_type: str) -> Dict:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ñ–∞–π–ª–∞"""
        validation_result = {
            'valid': True,
            'errors': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–µ—Ä—Å–∏–µ–π PHP
        if file_type == 'php':
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                deprecated_patterns = [
                    r'mysql_connect\s*\(',
                    r'ereg\s*\(',
                    r'split\s*\('
                ]
                
                for pattern in deprecated_patterns:
                    if re.search(pattern, content):
                        validation_result['errors'].append(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {pattern}")
                        
            except Exception as e:
                validation_result['errors'].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        
        return validation_result
    
    def _get_deployment_priority(self, file_info: Dict) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        file_type = file_info.get('type', 'unknown')
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏
        if file_type == 'config':
            return 1
        # –ó–∞—Ç–µ–º PHP —Ñ–∞–π–ª—ã
        elif file_type == 'php':
            return 2
        # –ó–∞—Ç–µ–º JavaScript
        elif file_type == 'javascript':
            return 3
        # –ó–∞—Ç–µ–º CSS
        elif file_type == 'css':
            return 4
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        else:
            return 5
    
    def _deploy_single_file(self, server_config: Dict, local_path: str, remote_path: str, file_info: Dict) -> Dict:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª"""
        result = {
            'success': False,
            'local_path': local_path,
            'remote_path': remote_path,
            'file_info': file_info,
            'error': None
        }
        
        try:
            # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
            local_file_path = self.project_root / local_path
            
            if not local_file_path.exists():
                result['error'] = f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {local_path}"
                return result
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            remote_dir = os.path.dirname(remote_path)
            if not self._ensure_remote_directory(server_config, remote_dir):
                result['error'] = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {remote_dir}"
                return result
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            if self._copy_file_to_server(server_config, local_file_path, remote_path):
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                permissions = file_info.get('permissions', '644')
                if self._set_file_permissions(server_config, remote_path, permissions):
                    result['success'] = True
                else:
                    result['error'] = f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {permissions}"
            else:
                result['error'] = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä"
                
        except Exception as e:
            result['error'] = str(e)
        
        return result
    
    def _copy_file_to_server(self, server_config: Dict, local_path: Path, remote_path: str) -> bool:
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._copy_to_server_with_key(server_config, local_path, remote_path)
        else:
            return self._copy_to_server_with_password(server_config, local_path, remote_path)
    
    def _copy_to_server_with_key(self, server_config: Dict, local_path: Path, remote_path: str) -> bool:
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –∫–ª—é—á–æ–º"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ pscp
        pscp_cmd = shutil.which('pscp')
        if pscp_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                "pscp",
                "-i", str(key_path),
                "-batch",
                str(local_path),
                f"{server_config['user']}@{server_config['host']}:{remote_path}"
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                "scp",
                "-i", str(key_path),
                "-o", "StrictHostKeyChecking=no",
                str(local_path),
                f"{server_config['user']}@{server_config['host']}:{remote_path}"
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=60)
            return True
        except:
            return False
    
    def _copy_to_server_with_password(self, server_config: Dict, local_path: Path, remote_path: str) -> bool:
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –ø–∞—Ä–æ–ª–µ–º"""
        cmd = [
            "scp",
            "-o", "StrictHostKeyChecking=no",
            str(local_path),
            f"{server_config['user']}@{server_config['host']}:{remote_path}"
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=60)
            return True
        except:
            return False
    
    def _ensure_remote_directory(self, server_config: Dict, remote_dir: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._ensure_remote_directory_with_key(server_config, remote_dir)
        else:
            return self._ensure_remote_directory_with_password(server_config, remote_dir)
    
    def _ensure_remote_directory_with_key(self, server_config: Dict, remote_dir: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –∫–ª—é—á–æ–º"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        plink_cmd = shutil.which('plink')
        if plink_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                f'mkdir -p "{remote_dir}"'
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                f"{server_config['user']}@{server_config['host']}",
                f'mkdir -p "{remote_dir}"'
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=30)
            return True
        except:
            return False
    
    def _ensure_remote_directory_with_password(self, server_config: Dict, remote_dir: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –ø–∞—Ä–æ–ª–µ–º"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            f"{server_config['user']}@{server_config['host']}",
            f'mkdir -p "{remote_dir}"'
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=30)
            return True
        except:
            return False
    
    def _set_file_permissions(self, server_config: Dict, remote_path: str, permissions: str) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._set_file_permissions_with_key(server_config, remote_path, permissions)
        else:
            return self._set_file_permissions_with_password(server_config, remote_path, permissions)
    
    def _set_file_permissions_with_key(self, server_config: Dict, remote_path: str, permissions: str) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –∫–ª—é—á–æ–º"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        plink_cmd = shutil.which('plink')
        if plink_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                f'chmod {permissions} "{remote_path}"'
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                f"{server_config['user']}@{server_config['host']}",
                f'chmod {permissions} "{remote_path}"'
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=30)
            return True
        except:
            return False
    
    def _set_file_permissions_with_password(self, server_config: Dict, remote_path: str, permissions: str) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –ø–∞—Ä–æ–ª–µ–º"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            f"{server_config['user']}@{server_config['host']}",
            f'chmod {permissions} "{remote_path}"'
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=30)
            return True
        except:
            return False
    
    def _verify_deployed_file(self, server_config: Dict, remote_path: str, file_info: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π —Ñ–∞–π–ª"""
        verification_result = {
            'success': False,
            'error': None
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not self._check_file_exists_on_server(server_config, remote_path):
                verification_result['error'] = "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
                return verification_result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            expected_permissions = file_info.get('permissions', '644')
            if not self._check_file_permissions_match(server_config, remote_path, expected_permissions):
                verification_result['error'] = f"–ù–µ–≤–µ—Ä–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_permissions})"
                return verification_result
            
            verification_result['success'] = True
            
        except Exception as e:
            verification_result['error'] = str(e)
        
        return verification_result
    
    def _check_file_exists_on_server(self, server_config: Dict, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._check_file_exists_with_key(server_config, file_path)
        else:
            return self._check_file_exists_with_password(server_config, file_path)
    
    def _check_file_exists_with_key(self, server_config: Dict, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–æ–º"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        plink_cmd = shutil.which('plink')
        if plink_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                f'test -f "{file_path}" && echo "exists"'
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                f"{server_config['user']}@{server_config['host']}",
                f'test -f "{file_path}" && echo "exists"'
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'exists' in result.stdout
        except:
            return False
    
    def _check_file_exists_with_password(self, server_config: Dict, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–∞—Ä–æ–ª–µ–º"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            f"{server_config['user']}@{server_config['host']}",
            f'test -f "{file_path}" && echo "exists"'
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'exists' in result.stdout
        except:
            return False
    
    def _get_remote_file_size(self, server_config: Dict, file_path: str) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._get_remote_file_size_with_key(server_config, file_path)
        else:
            return self._get_remote_file_size_with_password(server_config, file_path)
    
    def _get_remote_file_size_with_key(self, server_config: Dict, file_path: str) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–æ–º"""
        key_file = server_config.get('key_file')
        if not key_file:
            return 0
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        plink_cmd = shutil.which('plink')
        if plink_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                f'stat -c%s "{file_path}" 2>/dev/null || echo "0"'
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return 0
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                f"{server_config['user']}@{server_config['host']}",
                f'stat -c%s "{file_path}" 2>/dev/null || echo "0"'
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return int(result.stdout.strip())
        except:
            return 0
    
    def _get_remote_file_size_with_password(self, server_config: Dict, file_path: str) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å –ø–∞—Ä–æ–ª–µ–º"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            f"{server_config['user']}@{server_config['host']}",
            f'stat -c%s "{file_path}" 2>/dev/null || echo "0"'
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return int(result.stdout.strip())
        except:
            return 0
    
    def _check_file_permissions_match(self, server_config: Dict, file_path: str, expected_permissions: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        return self._check_file_exists_on_server(server_config, file_path)
    
    def _check_system_functionality(self, server_config: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"""
        functionality_result = {
            'functional': True,
            'checks': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        web_check = self._check_web_server_status(server_config)
        functionality_result['checks'].append({
            'name': 'web_server',
            'status': web_check,
            'critical': True
        })
        
        if not web_check:
            functionality_result['functional'] = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PHP
        php_check = self._check_php_status(server_config)
        functionality_result['checks'].append({
            'name': 'php',
            'status': php_check,
            'critical': True
        })
        
        if not php_check:
            functionality_result['functional'] = False
        
        return functionality_result
    
    def _check_web_server_status(self, server_config: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._check_web_server_with_key(server_config)
        else:
            return self._check_web_server_with_password(server_config)
    
    def _check_web_server_with_key(self, server_config: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å –∫–ª—é—á–æ–º"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        plink_cmd = shutil.which('plink')
        if plink_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                'systemctl is-active apache2 2>/dev/null || systemctl is-active nginx 2>/dev/null || echo "unknown"'
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                f"{server_config['user']}@{server_config['host']}",
                'systemctl is-active apache2 2>/dev/null || systemctl is-active nginx 2>/dev/null || echo "unknown"'
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'active' in result.stdout
        except:
            return False
    
    def _check_web_server_with_password(self, server_config: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å –ø–∞—Ä–æ–ª–µ–º"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            f"{server_config['user']}@{server_config['host']}",
            'systemctl is-active apache2 2>/dev/null || systemctl is-active nginx 2>/dev/null || echo "unknown"'
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'active' in result.stdout
        except:
            return False
    
    def _check_php_status(self, server_config: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å PHP"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._check_php_with_key(server_config)
        else:
            return self._check_php_with_password(server_config)
    
    def _check_php_with_key(self, server_config: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç PHP —Å –∫–ª—é—á–æ–º"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        plink_cmd = shutil.which('plink')
        if plink_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                'php -v 2>/dev/null && echo "php_ok"'
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                f"{server_config['user']}@{server_config['host']}",
                'php -v 2>/dev/null && echo "php_ok"'
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'php_ok' in result.stdout
        except:
            return False
    
    def _check_php_with_password(self, server_config: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç PHP —Å –ø–∞—Ä–æ–ª–µ–º"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            f"{server_config['user']}@{server_config['host']}",
            'php -v 2>/dev/null && echo "php_ok"'
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'php_ok' in result.stdout
        except:
            return False
    
    def _check_performance_impact(self, server_config: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        performance_result = {
            'impact': 'low',
            'metrics': {}
        }
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å—á–∏—Ç–∞–µ–º –≤–ª–∏—è–Ω–∏–µ –Ω–∏–∑–∫–∏–º
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        return performance_result
    
    def _cleanup_temp_files(self, server_config: Dict) -> Dict:
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        cleanup_result = {
            'cleaned': 0
        }
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ - —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ—á–∏—Å—Ç–∏–ª–∏ 0 —Ñ–∞–π–ª–æ–≤
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        
        return cleanup_result
    
    def _fix_file_permissions(self, server_config: Dict, deployment_config: Dict) -> Dict:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º"""
        permissions_result = {
            'fixed': 0
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
        files = deployment_config.get('files', [])
        
        for file_info in files:
            remote_path = file_info.get('remote', '')
            permissions = file_info.get('permissions', '644')
            
            if remote_path and self._set_file_permissions(server_config, remote_path, permissions):
                permissions_result['fixed'] += 1
        
        return permissions_result
    
    def _check_for_garbage(self, server_config: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º—É—Å–æ—Ä–∞"""
        garbage_result = {
            'found': 0
        }
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –º—É—Å–æ—Ä–∞ –Ω–µ—Ç
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –ª–æ–≥–∏ –∏ —Ç.–¥.
        
        return garbage_result
    
    def _save_deployment_report(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏"""
        report = {
            'timestamp': self.deployment_session['timestamp'],
            'session_id': self.deployment_session['session_id'],
            'deployment_config': self.deployment_session['deployment_config'],
            'phases': self.deployment_session['phases'],
            'backup_session_id': self.deployment_session.get('backup_session_id'),
            'rollback_available': self.deployment_session.get('rollback_available', False),
            'rollback_performed': self.deployment_session.get('rollback_performed', False),
            'errors': self.deployment_session['errors'],
            'warnings': self.deployment_session['warnings']
        }
        
        report_file = self.reports_dir / f"{self.deployment_session['session_id']}_report.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ –û—Ç—á–µ—Ç –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    def _print_deployment_summary(self, dry_run: bool):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        print("\n" + "="*70)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø")
        print("="*70)
        
        print(f"üéØ –°–µ—Å—Å–∏—è: {self.deployment_session['session_id']}")
        print(f"üìÖ –í—Ä–µ–º—è: {self.deployment_session['timestamp']}")
        if dry_run:
            print("üß™ –†–µ–∂–∏–º: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
        else:
            print("üöÄ –†–µ–∂–∏–º: –ü–†–û–î–ê–ö–®–ù")
        
        # –°–≤–æ–¥–∫–∞ –ø–æ —Ñ–∞–∑–∞–º
        phases = self.deployment_session.get('phases', {})
        successful_phases = sum(1 for phase in phases.values() if phase.get('success'))
        total_phases = len(phases)
        
        print(f"\nüìã –§–∞–∑—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_phases}/{total_phases}")
        
        for phase_name, phase_info in phases.items():
            status = "‚úÖ" if phase_info.get('success') else "‚ùå"
            print(f"   {status} {phase_info.get('description', phase_name)}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        if self.deployment_session.get('backup_session_id'):
            print(f"\nüì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {self.deployment_session['backup_session_id']}")
            print(f"üîÑ –û—Ç–∫–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {'–î–∞' if self.deployment_session.get('rollback_available') else '–ù–µ—Ç'}")
        
        # –û—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        errors = self.deployment_session.get('errors', [])
        warnings = self.deployment_session.get('warnings', [])
        
        if errors:
            print(f"\n‚ùå –û—à–∏–±–∫–∏ ({len(errors)}):")
            for error in errors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   - {error}")
        
        if warnings:
            print(f"\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(warnings)}):")
            for warning in warnings[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   - {warning}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        if successful_phases == total_phases and not errors:
            if dry_run:
                print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–®–õ–û –£–°–ü–ï–®–ù–û!")
                print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é")
            else:
                print(f"\nüéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!")
                print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã –∏ —Å–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        else:
            if dry_run:
                print(f"\n‚ö†Ô∏è  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
                print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º")
            else:
                print(f"\n‚ö†Ô∏è  –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")
                print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏ –≤–æ–∑–º–æ–∂–Ω—ã–π –æ—Ç–∫–∞—Ç")
                
                if self.deployment_session.get('rollback_available'):
                    print(f"\nüí° –î–ª—è –æ—Ç–∫–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:")
                    print(f"   python enhanced_restore_manager.py full {self.deployment_session['backup_session_id']}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python safe_deployment_manager.py deploy <deployment_config.json> [--dry-run]")
        return 1
    
    manager = SafeDeploymentManager()
    
    command = sys.argv[1].lower()
    
    if command == "deploy":
        if len(sys.argv) < 3:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
            return 1
        
        deployment_config_path = sys.argv[2]
        dry_run = "--dry-run" in sys.argv
        
        print(f"üöÄ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: {deployment_config_path}")
        if dry_run:
            print("üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        success = manager.safe_deploy(deployment_config_path, dry_run)
        return 0 if success else 1
    
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return 1


if __name__ == "__main__":
    sys.exit(main()) 