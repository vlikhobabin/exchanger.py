#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ Bitrix24 –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –µ–≥–æ –∑–∞–ø—É—Å–∫–∞
"""

import json
import os
import shutil
import subprocess
import sys
from pathlib import Path

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ config.json"""
    config_path = Path(__file__).parent.parent / "config.json"
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

def deploy_inspector(server_config):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞
    inspector_file = Path(__file__).parent / "bitrix_inspector.py"
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
    print(f"üîç –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {inspector_file}")
    print(f"üîç –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª: {inspector_file.exists()}")
    
    if not inspector_file.exists():
        print(f"‚ùå –§–∞–π–ª –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {inspector_file}")
        return False
    
    auth_method = server_config.get('auth_method', 'password')
    
    if auth_method == 'key':
        return deploy_with_key(inspector_file, server_config)
    else:
        return deploy_with_password(inspector_file, server_config)

def deploy_with_key(file_path, server_config):
    """–î–µ–ø–ª–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–∞"""
    key_file = server_config.get('key_file')
    if not key_file:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –∫–ª—é—á–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return False
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ, —Ç–∞–∫ –∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
    if os.path.isabs(key_file):
        key_path = Path(key_file)
    else:
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∏—â–µ–º –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        key_path = Path(__file__).parent.parent / key_file
    
    if not key_path.exists():
        print(f"‚ùå –§–∞–π–ª –∫–ª—é—á–∞ {key_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    remote_path = f"/home/{server_config['user']}/bitrix_inspector.py"
    remote_dir = f"/home/{server_config['user']}"
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not create_remote_directory(server_config, remote_dir):
        return False
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pscp (PuTTY –≤–µ—Ä—Å–∏—è)
    pscp_cmd = shutil.which('pscp')
    if pscp_cmd:
        return deploy_with_pscp(file_path, server_config, str(key_path), remote_path)
    
    # –ï—Å–ª–∏ pscp –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º scp
    if key_path.suffix.lower() == '.ppk':
        print("‚ùå .ppk –∫–ª—é—á —Ç—Ä–µ–±—É–µ—Ç PuTTY —É—Ç–∏–ª–∏—Ç—ã (pscp) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return False
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π scp —Å –∫–ª—é—á–æ–º
    cmd = [
        "scp", 
        "-i", str(key_path),
        "-o", "StrictHostKeyChecking=no",
        str(file_path), 
        f"{server_config['user']}@{server_config['host']}:{remote_path}"
    ]
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print(f"‚úÖ –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {remote_path}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞:")
        print(f"   {e.stderr}")
        return False
    except FileNotFoundError:
        print("‚ùå –ö–æ–º–∞–Ω–¥–∞ scp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω SSH –∫–ª–∏–µ–Ω—Ç.")
        return False

def deploy_with_pscp(file_path, server_config, key_path, remote_path):
    """–î–µ–ø–ª–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pscp (PuTTY –≤–µ—Ä—Å–∏—è)"""
    cmd = [
        "pscp",
        "-i", key_path,
        "-batch",  # –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        str(file_path),
        f"{server_config['user']}@{server_config['host']}:{remote_path}"
    ]
    
    print(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print(f"‚úÖ –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {remote_path}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞:")
        print(f"   {e.stderr}")
        return False

def deploy_with_password(file_path, server_config):
    """–î–µ–ø–ª–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è"""
    remote_path = f"/home/{server_config['user']}/bitrix_inspector.py"
    
    cmd = [
        "scp", 
        str(file_path), 
        f"{server_config['user']}@{server_config['host']}:{remote_path}"
    ]
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print(f"‚úÖ –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {remote_path}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞:")
        print(f"   {e.stderr}")
        return False
    except FileNotFoundError:
        print("‚ùå –ö–æ–º–∞–Ω–¥–∞ scp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω SSH –∫–ª–∏–µ–Ω—Ç.")
        return False

def create_remote_directory(server_config, remote_dir):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
    auth_method = server_config.get('auth_method', 'password')
    
    command = f"mkdir -p {remote_dir}"
    
    if auth_method == 'key':
        return execute_remote_command_with_key(server_config, command)
    else:
        return execute_remote_command_with_password(server_config, command)

def execute_remote_command_with_key(server_config, command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ —Å –∫–ª—é—á–æ–º"""
    key_file = server_config.get('key_file')
    if not key_file:
        return False
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ, —Ç–∞–∫ –∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
    if os.path.isabs(key_file):
        key_path = Path(key_file)
    else:
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∏—â–µ–º –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        key_path = Path(__file__).parent.parent / key_file
    
    if not key_path.exists():
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
    plink_cmd = shutil.which('plink')
    if plink_cmd:
        cmd = [
            'plink',
            '-i', str(key_path),
            '-batch',
            f"{server_config['user']}@{server_config['host']}",
            command
        ]
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SSH
        if key_path.suffix.lower() == '.ppk':
            return False
        
        cmd = [
            'ssh',
            '-i', str(key_path),
            '-o', 'StrictHostKeyChecking=no',
            f"{server_config['user']}@{server_config['host']}",
            command
        ]
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=30)
        return True
    except:
        return False

def execute_remote_command_with_password(server_config, command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ —Å –ø–∞—Ä–æ–ª–µ–º"""
    cmd = [
        'ssh',
        '-o', 'StrictHostKeyChecking=no',
        f"{server_config['user']}@{server_config['host']}",
        command
    ]
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=30)
        return True
    except:
        return False

def run_inspector_on_server(server_config):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
    
    auth_method = server_config.get('auth_method', 'password')
    remote_script = f"/home/{server_config['user']}/bitrix_inspector.py"
    
    # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    commands = [
        f"chmod +x {remote_script}",
        f"cd /home/{server_config['user']} && python3 {remote_script}"
    ]
    
    if auth_method == 'key':
        return run_ssh_with_key(server_config, commands)
    else:
        return run_ssh_with_password(server_config, commands)

def run_ssh_with_key(server_config, commands):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ SSH —Å –∫–ª—é—á–æ–º"""
    key_file = server_config.get('key_file')
    if not key_file:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –∫–ª—é—á–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return False
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ, —Ç–∞–∫ –∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
    if os.path.isabs(key_file):
        key_path = Path(key_file)
    else:
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∏—â–µ–º –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        key_path = Path(__file__).parent.parent / key_file
    
    if not key_path.exists():
        print(f"‚ùå –§–∞–π–ª –∫–ª—é—á–∞ {key_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    full_command = " && ".join(commands)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
    plink_cmd = shutil.which('plink')
    if plink_cmd:
        cmd = [
            'plink',
            '-i', str(key_path),
            '-batch',
            f"{server_config['user']}@{server_config['host']}",
            full_command
        ]
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SSH
        if key_path.suffix.lower() == '.ppk':
            print("‚ùå .ppk –∫–ª—é—á —Ç—Ä–µ–±—É–µ—Ç PuTTY —É—Ç–∏–ª–∏—Ç—ã (plink) –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥")
            return False
        
        cmd = [
            'ssh',
            '-i', str(key_path),
            '-o', 'StrictHostKeyChecking=no',
            f"{server_config['user']}@{server_config['host']}",
            full_command
        ]
    
    try:
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...")
        result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=120)
        
        print("‚úÖ –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        print("\nüìã –í—ã–≤–æ–¥ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞:")
        print("-" * 50)
        print(result.stdout)
        
        if result.stderr:
            print("\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            print(result.stderr)
        
        return True
        
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞")
        return False
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞: {e}")
        if e.stdout:
            print(f"–í—ã–≤–æ–¥: {e.stdout}")
        if e.stderr:
            print(f"–û—à–∏–±–∫–∏: {e.stderr}")
        return False
    except FileNotFoundError:
        print("‚ùå SSH –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def run_ssh_with_password(server_config, commands):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ SSH —Å –ø–∞—Ä–æ–ª–µ–º"""
    full_command = " && ".join(commands)
    
    cmd = [
        'ssh',
        '-o', 'StrictHostKeyChecking=no',
        f"{server_config['user']}@{server_config['host']}",
        full_command
    ]
    
    try:
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...")
        result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=120)
        
        print("‚úÖ –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        print("\nüìã –í—ã–≤–æ–¥ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞:")
        print("-" * 50)
        print(result.stdout)
        
        if result.stderr:
            print("\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            print(result.stderr)
        
        return True
        
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞")
        return False
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞: {e}")
        if e.stdout:
            print(f"–í—ã–≤–æ–¥: {e.stdout}")
        if e.stderr:
            print(f"–û—à–∏–±–∫–∏: {e.stderr}")
        return False
    except FileNotFoundError:
        print("‚ùå SSH –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Bitrix24 Inspector")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    if not config:
        return 1
    
    server_config = config['server']
    
    print(f"üéØ –°–µ—Ä–≤–µ—Ä: {server_config['user']}@{server_config['host']}")
    print(f"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {server_config.get('auth_method', 'password')}")
    print("-" * 50)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä
    if not deploy_inspector(server_config):
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä")
        return 1
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä
    if not run_inspector_on_server(server_config):
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä")
        return 1
    
    print("\n" + "=" * 50)
    print("üéâ –ò–Ω—Å–ø–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üì• –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python get_report.py")
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 