#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Bitrix24
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import sys
import json
import shutil
import subprocess
import datetime
import hashlib
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Set
from file_analyzer import BitrixFileAnalyzer


class EnhancedBackupManager:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.backup_dir = self.project_root / "backups"
        self.config_file = self.project_root / "config.json"
        self.reports_dir = self.project_root / "reports"
        self.file_analyzer = BitrixFileAnalyzer()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.backup_dir.mkdir(parents=True, exist_ok=True)
        self.reports_dir.mkdir(parents=True, exist_ok=True)
        
        self.session_info = {
            'timestamp': datetime.datetime.now().isoformat(),
            'session_id': self._generate_session_id(),
            'files_analyzed': {},
            'files_backed_up': {},
            'validation_results': {},
            'errors': [],
            'warnings': []
        }
        
    def _generate_session_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏"""
        timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        return f"backup_session_{timestamp}"
    
    def load_config(self) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            return config
        except FileNotFoundError:
            self.session_info['errors'].append(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        except json.JSONDecodeError as e:
            self.session_info['errors'].append(f"–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return None
    
    def create_comprehensive_backup(self, deployment_config: Optional[Dict] = None, 
                                   inspection_report_path: Optional[str] = None) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print("üîÑ –°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø")
        print("="*70)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = self.load_config()
        if not config:
            return False
        
        server_config = config['server']
        print(f"üéØ –°–µ—Ä–≤–µ—Ä: {server_config['user']}@{server_config['host']}")
        print(f"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {server_config.get('auth_method', 'password')}")
        print("-" * 70)
        
        # –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        print("\nüìä –≠–¢–ê–ü 1: –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í")
        print("-" * 40)
        
        files_to_backup = self._analyze_files_for_backup(deployment_config, inspection_report_path)
        if not files_to_backup:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        print(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ {len(files_to_backup)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –≠—Ç–∞–ø 2: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print("\nüîç –≠–¢–ê–ü 2: –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
        print("-" * 40)
        
        pre_check_results = self._pre_backup_validation(server_config, files_to_backup)
        if not pre_check_results['success']:
            print("‚ùå –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return False
        
        print("‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
        
        # –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        print("\nüì¶ –≠–¢–ê–ü 3: –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò")
        print("-" * 40)
        
        backup_results = self._perform_backup(server_config, files_to_backup)
        
        # –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        print("\nüîê –≠–¢–ê–ü 4: –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò")
        print("-" * 40)
        
        integrity_results = self._verify_backup_integrity(backup_results)
        
        # –≠—Ç–∞–ø 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        print("\nüìÑ –≠–¢–ê–ü 5: –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–ß–ï–¢–ê")
        print("-" * 40)
        
        self._save_backup_report(backup_results, integrity_results)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        self._print_backup_summary(backup_results, integrity_results)
        
        return backup_results['success']
    
    def _analyze_files_for_backup(self, deployment_config: Optional[Dict], 
                                 inspection_report_path: Optional[str]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
        files_to_backup = {}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        if deployment_config:
            analysis_result = self.file_analyzer.analyze_deployment_plan(deployment_config)
            files_to_backup.update(analysis_result.get('files_to_backup', {}))
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏
        if inspection_report_path and os.path.exists(inspection_report_path):
            analysis_result = self.file_analyzer.analyze_from_inspection_report(inspection_report_path)
            files_to_backup.update(analysis_result.get('files_to_backup', {}))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        additional_critical_files = self._get_additional_critical_files()
        for file_path, file_info in additional_critical_files.items():
            if file_path not in files_to_backup:
                files_to_backup[file_path] = file_info
        
        self.session_info['files_analyzed'] = files_to_backup
        return files_to_backup
    
    def _get_additional_critical_files(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã"""
        additional_files = {}
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º
        critical_patterns = [
            '/home/bitrix/www/local/php_interface/init.php',
            '/home/bitrix/www/local/templates/bitrix24/header.php',
            '/home/bitrix/www/local/templates/bitrix24/footer.php',
            '/home/bitrix/www/local/.settings.php',
            '/home/bitrix/www/bitrix/.settings.php'
        ]
        
        for file_path in critical_patterns:
            additional_files[file_path] = {
                'remote_path': file_path,
                'local_path': os.path.basename(file_path),
                'file_type': self.file_analyzer._determine_file_type(file_path),
                'priority': 'critical',
                'backup_required': True,
                'modification_type': 'potential_modification',
                'dependencies': [],
                'risks': ['critical_system_file'],
                'always_backup': True
            }
        
        return additional_files
    
    def _pre_backup_validation(self, server_config: Dict, files_to_backup: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–µ—Ä–µ–¥ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        validation_results = {
            'success': True,
            'server_accessible': False,
            'permissions_ok': False,
            'disk_space_ok': False,
            'files_accessible': [],
            'files_missing': [],
            'files_permission_denied': [],
            'warnings': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
        print("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        if self._test_server_connection(server_config):
            validation_results['server_accessible'] = True
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            validation_results['success'] = False
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return validation_results
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
        print("üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ...")
        if self._check_disk_space(server_config):
            validation_results['disk_space_ok'] = True
            print("‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
        else:
            validation_results['warnings'].append("–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
            print("‚ö†Ô∏è  –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤
        print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤...")
        for file_path, file_info in files_to_backup.items():
            access_status = self._check_file_access(server_config, file_path)
            
            if access_status == 'accessible':
                validation_results['files_accessible'].append(file_path)
            elif access_status == 'missing':
                validation_results['files_missing'].append(file_path)
                if file_info.get('always_backup'):
                    validation_results['warnings'].append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {file_path}")
            elif access_status == 'permission_denied':
                validation_results['files_permission_denied'].append(file_path)
                validation_results['success'] = False
        
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã: {len(validation_results['files_accessible'])}")
        print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {len(validation_results['files_missing'])}")
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã: {len(validation_results['files_permission_denied'])}")
        
        return validation_results
    
    def _perform_backup(self, server_config: Dict, files_to_backup: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Å—Å–∏–∏
        session_dir = self.backup_dir / self.session_info['session_id']
        session_dir.mkdir(parents=True, exist_ok=True)
        
        backup_results = {
            'success': True,
            'session_dir': str(session_dir),
            'files_backed_up': {},
            'files_failed': {},
            'total_files': len(files_to_backup),
            'successful_count': 0,
            'failed_count': 0,
            'total_size': 0
        }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        sorted_files = sorted(files_to_backup.items(), 
                            key=lambda x: self._get_priority_order(x[1].get('priority', 'medium')))
        
        for file_path, file_info in sorted_files:
            print(f"üì• –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ: {os.path.basename(file_path)}")
            
            local_filename = self._generate_backup_filename(file_path, file_info)
            local_path = session_dir / local_filename
            
            backup_file_result = self._backup_single_file(server_config, file_path, local_path, file_info)
            
            if backup_file_result['success']:
                backup_results['files_backed_up'][file_path] = backup_file_result
                backup_results['successful_count'] += 1
                backup_results['total_size'] += backup_file_result.get('size', 0)
                print(f"‚úÖ {os.path.basename(file_path)} - {backup_file_result.get('size', 0)} –±–∞–π—Ç")
            else:
                backup_results['files_failed'][file_path] = backup_file_result
                backup_results['failed_count'] += 1
                print(f"‚ùå {os.path.basename(file_path)} - {backup_file_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        metadata = {
            'timestamp': self.session_info['timestamp'],
            'session_id': self.session_info['session_id'],
            'server_info': {
                'host': server_config['host'],
                'user': server_config['user'],
                'auth_method': server_config.get('auth_method', 'password')
            },
            'files_backed_up': backup_results['files_backed_up'],
            'files_failed': backup_results['files_failed'],
            'statistics': {
                'total_files': backup_results['total_files'],
                'successful_count': backup_results['successful_count'],
                'failed_count': backup_results['failed_count'],
                'total_size': backup_results['total_size']
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata_file = session_dir / 'backup_metadata.json'
        with open(metadata_file, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
        
        backup_results['metadata_file'] = str(metadata_file)
        
        if backup_results['failed_count'] > 0:
            backup_results['success'] = False
        
        return backup_results
    
    def _backup_single_file(self, server_config: Dict, remote_path: str, local_path: Path, file_info: Dict) -> Dict:
        """–†–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª"""
        result = {
            'success': False,
            'remote_path': remote_path,
            'local_path': str(local_path),
            'file_info': file_info,
            'size': 0,
            'checksum': None,
            'error': None
        }
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
            if self._copy_file_from_server(server_config, remote_path, local_path):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if local_path.exists():
                    result['success'] = True
                    result['size'] = local_path.stat().st_size
                    result['checksum'] = self._calculate_file_checksum(local_path)
                else:
                    result['error'] = '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è'
            else:
                result['error'] = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏'
        except Exception as e:
            result['error'] = str(e)
        
        return result
    
    def _copy_file_from_server(self, server_config: Dict, remote_path: str, local_path: Path) -> bool:
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._copy_with_key(server_config, remote_path, local_path)
        else:
            return self._copy_with_password(server_config, remote_path, local_path)
    
    def _copy_with_key(self, server_config: Dict, remote_path: str, local_path: Path) -> bool:
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–∞"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ, —Ç–∞–∫ –∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ pscp
        pscp_cmd = shutil.which('pscp')
        if pscp_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                "pscp",
                "-i", str(key_path),
                "-batch",
                f"{server_config['user']}@{server_config['host']}:{remote_path}",
                str(local_path)
            ]
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º scp
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                "scp",
                "-i", str(key_path),
                "-o", "StrictHostKeyChecking=no",
                f"{server_config['user']}@{server_config['host']}:{remote_path}",
                str(local_path)
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=60)
            return True
        except subprocess.CalledProcessError:
            return False
        except subprocess.TimeoutExpired:
            return False
        except FileNotFoundError:
            return False
    
    def _copy_with_password(self, server_config: Dict, remote_path: str, local_path: Path) -> bool:
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è"""
        cmd = [
            "scp",
            "-o", "StrictHostKeyChecking=no",
            f"{server_config['user']}@{server_config['host']}:{remote_path}",
            str(local_path)
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=60)
            return True
        except subprocess.CalledProcessError:
            return False
        except subprocess.TimeoutExpired:
            return False
        except FileNotFoundError:
            return False
    
    def _verify_backup_integrity(self, backup_results: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        integrity_results = {
            'success': True,
            'verified_files': {},
            'corrupted_files': {},
            'verification_errors': [],
            'total_verified': 0,
            'total_corrupted': 0
        }
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        
        for file_path, file_info in backup_results.get('files_backed_up', {}).items():
            local_path = Path(file_info['local_path'])
            
            if local_path.exists():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                actual_size = local_path.stat().st_size
                expected_size = file_info.get('size', 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
                actual_checksum = self._calculate_file_checksum(local_path)
                expected_checksum = file_info.get('checksum')
                
                verification_result = {
                    'file_path': file_path,
                    'local_path': str(local_path),
                    'size_match': actual_size == expected_size,
                    'checksum_match': actual_checksum == expected_checksum,
                    'actual_size': actual_size,
                    'expected_size': expected_size,
                    'actual_checksum': actual_checksum,
                    'expected_checksum': expected_checksum
                }
                
                if verification_result['size_match'] and verification_result['checksum_match']:
                    integrity_results['verified_files'][file_path] = verification_result
                    integrity_results['total_verified'] += 1
                else:
                    integrity_results['corrupted_files'][file_path] = verification_result
                    integrity_results['total_corrupted'] += 1
                    integrity_results['success'] = False
            else:
                integrity_results['verification_errors'].append(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {local_path}")
                integrity_results['success'] = False
        
        return integrity_results
    
    def _test_server_connection(self, server_config: Dict) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._test_connection_with_key(server_config)
        else:
            return self._test_connection_with_password(server_config)
    
    def _test_connection_with_key(self, server_config: Dict) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        plink_cmd = shutil.which('plink')
        if plink_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                'echo "connection_test"'
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                '-o', 'ConnectTimeout=10',
                f"{server_config['user']}@{server_config['host']}",
                'echo "connection_test"'
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'connection_test' in result.stdout
        except:
            return False
    
    def _test_connection_with_password(self, server_config: Dict) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            '-o', 'ConnectTimeout=10',
            f"{server_config['user']}@{server_config['host']}",
            'echo "connection_test"'
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'connection_test' in result.stdout
        except:
            return False
    
    def _check_disk_space(self, server_config: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –±–æ–ª—å—à–µ 1GB —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
        return True  # –ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
    
    def _check_file_access(self, server_config: Dict, file_path: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._check_file_access_with_key(server_config, file_path)
        else:
            return self._check_file_access_with_password(server_config, file_path)
    
    def _check_file_access_with_key(self, server_config: Dict, file_path: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–æ–º"""
        key_file = server_config.get('key_file')
        if not key_file:
            return 'permission_denied'
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return 'permission_denied'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        plink_cmd = shutil.which('plink')
        if plink_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                f'test -r "{file_path}" && echo "accessible" || echo "missing"'
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return 'permission_denied'
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                '-o', 'ConnectTimeout=10',
                f"{server_config['user']}@{server_config['host']}",
                f'test -r "{file_path}" && echo "accessible" || echo "missing"'
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            if 'accessible' in result.stdout:
                return 'accessible'
            else:
                return 'missing'
        except:
            return 'permission_denied'
    
    def _check_file_access_with_password(self, server_config: Dict, file_path: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ —Å –ø–∞—Ä–æ–ª–µ–º"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            '-o', 'ConnectTimeout=10',
            f"{server_config['user']}@{server_config['host']}",
            f'test -r "{file_path}" && echo "accessible" || echo "missing"'
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            if 'accessible' in result.stdout:
                return 'accessible'
            else:
                return 'missing'
        except:
            return 'permission_denied'
    
    def _generate_backup_filename(self, file_path: str, file_info: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        # –ó–∞–º–µ–Ω—è–µ–º —Å–ª—ç—à–∏ –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        safe_path = file_path.replace('/', '_').replace('\\', '_')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        priority = file_info.get('priority', 'medium')
        
        return f"{priority}_{safe_path}"
    
    def _get_priority_order(self, priority: str) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        priority_order = {
            'critical': 1,
            'high': 2,
            'medium': 3,
            'low': 4
        }
        return priority_order.get(priority, 3)
    
    def _calculate_file_checksum(self, file_path: Path) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É —Ñ–∞–π–ª–∞"""
        hash_md5 = hashlib.md5()
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()
    
    def _save_backup_report(self, backup_results: Dict, integrity_results: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        report = {
            'timestamp': self.session_info['timestamp'],
            'session_id': self.session_info['session_id'],
            'backup_results': backup_results,
            'integrity_results': integrity_results,
            'session_info': self.session_info
        }
        
        report_file = self.reports_dir / f"{self.session_info['session_id']}_report.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    def _print_backup_summary(self, backup_results: Dict, integrity_results: Dict):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "="*70)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø")
        print("="*70)
        
        print(f"üéØ –°–µ—Å—Å–∏—è: {self.session_info['session_id']}")
        print(f"üìÖ –í—Ä–µ–º—è: {self.session_info['timestamp']}")
        print(f"üìÅ –ü–∞–ø–∫–∞: {backup_results.get('session_dir', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {backup_results.get('total_files', 0)}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {backup_results.get('successful_count', 0)}")
        print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {backup_results.get('failed_count', 0)}")
        print(f"   üì¶ –†–∞–∑–º–µ—Ä: {backup_results.get('total_size', 0)} –±–∞–π—Ç")
        
        print(f"\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:")
        print(f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã: {integrity_results.get('total_verified', 0)}")
        print(f"   ‚ùå –ü–æ–≤—Ä–µ–∂–¥–µ–Ω—ã: {integrity_results.get('total_corrupted', 0)}")
        
        if backup_results.get('success') and integrity_results.get('success'):
            print(f"\nüéâ –†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!")
        else:
            print(f"\n‚ö†Ô∏è  –†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")
            
            if backup_results.get('files_failed'):
                print(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ñ–∞–π–ª—ã:")
                for file_path, error_info in backup_results['files_failed'].items():
                    print(f"   - {os.path.basename(file_path)}: {error_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            if integrity_results.get('corrupted_files'):
                print(f"\nüî¥ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
                for file_path in integrity_results['corrupted_files']:
                    print(f"   - {os.path.basename(file_path)}")
    
    def list_backups(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        print("üìã –°–ü–ò–°–û–ö –†–ï–ó–ï–†–í–ù–´–• –ö–û–ü–ò–ô")
        print("="*50)
        
        if not self.backup_dir.exists():
            print("‚ùå –ü–∞–ø–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        backup_sessions = []
        for session_dir in self.backup_dir.iterdir():
            if session_dir.is_dir():
                metadata_file = session_dir / 'backup_metadata.json'
                if metadata_file.exists():
                    try:
                        with open(metadata_file, 'r', encoding='utf-8') as f:
                            metadata = json.load(f)
                        backup_sessions.append({
                            'session_id': metadata.get('session_id', session_dir.name),
                            'timestamp': metadata.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                            'stats': metadata.get('statistics', {}),
                            'path': str(session_dir)
                        })
                    except:
                        backup_sessions.append({
                            'session_id': session_dir.name,
                            'timestamp': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            'stats': {},
                            'path': str(session_dir)
                        })
        
        if not backup_sessions:
            print("‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        backup_sessions.sort(key=lambda x: x['timestamp'], reverse=True)
        
        for session in backup_sessions:
            print(f"\nüì¶ {session['session_id']}")
            print(f"   üìÖ –í—Ä–µ–º—è: {session['timestamp']}")
            print(f"   üìÅ –ü—É—Ç—å: {session['path']}")
            stats = session['stats']
            if stats:
                print(f"   üìä –§–∞–π–ª–æ–≤: {stats.get('total_files', 0)} (—É—Å–ø–µ—à–Ω–æ: {stats.get('successful_count', 0)})")
                print(f"   üíæ –†–∞–∑–º–µ—Ä: {stats.get('total_size', 0)} –±–∞–π—Ç")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python enhanced_backup_manager.py create [--deployment-config config.json] [--inspection-report report.json]")
        print("  python enhanced_backup_manager.py list")
        return 1
    
    manager = EnhancedBackupManager()
    
    command = sys.argv[1].lower()
    
    if command == "create":
        deployment_config = None
        inspection_report_path = None
        
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        i = 2
        while i < len(sys.argv):
            if sys.argv[i] == '--deployment-config' and i + 1 < len(sys.argv):
                config_path = sys.argv[i + 1]
                try:
                    with open(config_path, 'r', encoding='utf-8') as f:
                        deployment_config = json.load(f)
                    print(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {config_path}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                    return 1
                i += 2
            elif sys.argv[i] == '--inspection-report' and i + 1 < len(sys.argv):
                inspection_report_path = sys.argv[i + 1]
                if not os.path.exists(inspection_report_path):
                    print(f"‚ùå –û—Ç—á–µ—Ç –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {inspection_report_path}")
                    return 1
                print(f"üìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ—Ç—á–µ—Ç –∏–Ω—Å–ø–µ–∫—Ü–∏–∏: {inspection_report_path}")
                i += 2
            else:
                i += 1
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        success = manager.create_comprehensive_backup(deployment_config, inspection_report_path)
        return 0 if success else 1
    
    elif command == "list":
        manager.list_backups()
        return 0
    
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return 1


if __name__ == "__main__":
    sys.exit(main()) 