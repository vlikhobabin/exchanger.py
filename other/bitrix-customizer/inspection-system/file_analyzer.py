#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ Bitrix24
"""

import os
import sys
import json
import re
import datetime
import subprocess
from pathlib import Path
from typing import Dict, List, Set, Optional, Tuple


class BitrixFileAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤ Bitrix24 –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.analysis_report = {
            'timestamp': datetime.datetime.now().isoformat(),
            'files_to_backup': {},
            'file_dependencies': {},
            'modification_risks': {},
            'deployment_order': [],
            'validation_checks': {},
            'errors': []
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω—ã
        self.file_patterns = {
            'init_files': [
                'local/php_interface/init.php',
                'bitrix/php_interface/init.php'
            ],
            'template_files': [
                'local/templates/*/header.php',
                'local/templates/*/footer.php',
                'local/templates/*/template_styles.css',
                'bitrix/templates/*/header.php',
                'bitrix/templates/*/footer.php'
            ],
            'component_files': [
                'local/components/*/*/templates/*/template.php',
                'local/components/*/*/component.php',
                'bitrix/components/*/*/templates/*/template.php'
            ],
            'js_css_files': [
                'local/templates/*/assets/js/*.js',
                'local/templates/*/assets/css/*.css',
                'bitrix/templates/*/assets/js/*.js',
                'bitrix/templates/*/assets/css/*.css'
            ],
            'config_files': [
                'local/.settings.php',
                'bitrix/.settings.php',
                'local/php_interface/dbconn.php',
                'bitrix/php_interface/dbconn.php'
            ]
        }
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.backup_priorities = {
            'critical': ['init.php', 'header.php', 'footer.php', '.settings.php'],
            'high': ['component.php', 'template.php', 'dbconn.php'],
            'medium': ['*.js', '*.css', 'class.php'],
            'low': ['*.txt', '*.md', '*.log']
        }
        
    def analyze_deployment_plan(self, deployment_config: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üîç –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
        
        if not deployment_config:
            return self.analysis_report
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –≤ –ø–ª–∞–Ω–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        for file_info in deployment_config.get('files', []):
            remote_path = file_info.get('remote', '')
            local_path = file_info.get('local', '')
            
            if remote_path:
                self._analyze_file_for_backup(remote_path, local_path, file_info)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self._analyze_dependencies()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        self._create_deployment_order()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        self._create_validation_checks()
        
        return self.analysis_report
    
    def _analyze_file_for_backup(self, remote_path: str, local_path: str, file_info: Dict):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        file_analysis = {
            'remote_path': remote_path,
            'local_path': local_path,
            'file_type': self._determine_file_type(remote_path),
            'priority': self._determine_backup_priority(remote_path),
            'backup_required': True,
            'modification_type': file_info.get('modification_type', 'unknown'),
            'dependencies': [],
            'risks': []
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∏—Å–∫–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        risks = self._analyze_modification_risks(remote_path, file_info)
        file_analysis['risks'] = risks
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = self._find_file_dependencies(remote_path, local_path)
        file_analysis['dependencies'] = dependencies
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º
        if self._is_critical_file(remote_path):
            file_analysis['critical'] = True
            file_analysis['backup_required'] = True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã
        additional_files = self._find_additional_affected_files(remote_path, file_info)
        for add_file in additional_files:
            if add_file not in self.analysis_report['files_to_backup']:
                self.analysis_report['files_to_backup'][add_file] = {
                    'remote_path': add_file,
                    'local_path': os.path.basename(add_file),
                    'file_type': self._determine_file_type(add_file),
                    'priority': self._determine_backup_priority(add_file),
                    'backup_required': True,
                    'modification_type': 'indirect',
                    'dependencies': [],
                    'risks': ['indirect_modification']
                }
        
        self.analysis_report['files_to_backup'][remote_path] = file_analysis
    
    def _determine_file_type(self, file_path: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞"""
        file_path = file_path.lower()
        
        if file_path.endswith('init.php'):
            return 'init_file'
        elif file_path.endswith('header.php'):
            return 'template_header'
        elif file_path.endswith('footer.php'):
            return 'template_footer'
        elif file_path.endswith('.php'):
            return 'php_file'
        elif file_path.endswith('.js'):
            return 'javascript'
        elif file_path.endswith('.css'):
            return 'stylesheet'
        elif file_path.endswith('.settings.php'):
            return 'config_file'
        else:
            return 'unknown'
    
    def _determine_backup_priority(self, file_path: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        file_name = os.path.basename(file_path.lower())
        
        for priority, patterns in self.backup_priorities.items():
            for pattern in patterns:
                if pattern.replace('*', '') in file_name or file_name == pattern:
                    return priority
        
        return 'medium'
    
    def _analyze_modification_risks(self, remote_path: str, file_info: Dict) -> List[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∏—Å–∫–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞"""
        risks = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Å–∏—Å—Ç–µ–º–Ω—ã–º
        if '/bitrix/' in remote_path and not '/local/' in remote_path:
            risks.append('system_file_modification')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        if any(critical in remote_path for critical in ['init.php', 'header.php', '.settings.php']):
            risks.append('critical_file_modification')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω—ã
        if '/templates/' in remote_path:
            risks.append('template_modification')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        mod_type = file_info.get('modification_type', 'unknown')
        if mod_type == 'create':
            risks.append('new_file_creation')
        elif mod_type == 'modify':
            risks.append('existing_file_modification')
        elif mod_type == 'append':
            risks.append('file_content_append')
        
        return risks
    
    def _find_file_dependencies(self, remote_path: str, local_path: str) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞"""
        dependencies = []
        
        # –ï—Å–ª–∏ —ç—Ç–æ init.php, –æ–Ω –º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
        if remote_path.endswith('init.php'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã –≤ —Ç–æ–º –∂–µ –ø—Ä–æ–µ–∫—Ç–µ
            if local_path and os.path.exists(local_path):
                try:
                    with open(local_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ò—â–µ–º include/require
                    includes = re.findall(r'(?:include|require)(?:_once)?\s*\(\s*["\']([^"\']+)["\']', content)
                    dependencies.extend(includes)
                    
                except Exception as e:
                    self.analysis_report['errors'].append(f"Error analyzing {local_path}: {e}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ header.php, –º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç CSS/JS —Ñ–∞–π–ª–æ–≤
        if remote_path.endswith('header.php'):
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç assets
            template_dir = os.path.dirname(remote_path)
            potential_assets = [
                f"{template_dir}/assets/js/enhanced_task_modifier.js",
                f"{template_dir}/assets/css/custom_styles.css"
            ]
            dependencies.extend(potential_assets)
        
        return dependencies
    
    def _find_additional_affected_files(self, remote_path: str, file_info: Dict) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã"""
        additional_files = []
        
        # –ï—Å–ª–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è init.php, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –±—ç–∫–∞–ø header.php
        if remote_path.endswith('init.php'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∞–±–ª–æ–Ω—ã –≤ —Ç–æ–º –∂–µ –ø—Ä–æ–µ–∫—Ç–µ
            if '/local/' in remote_path:
                template_header = remote_path.replace('/php_interface/init.php', '/templates/bitrix24/header.php')
                additional_files.append(template_header)
        
        # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è JS —Ñ–∞–π–ª, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –±—ç–∫–∞–ø header.php
        if remote_path.endswith('.js') and '/assets/js/' in remote_path:
            template_dir = remote_path.split('/assets/js/')[0]
            header_file = f"{template_dir}/header.php"
            additional_files.append(header_file)
        
        return additional_files
    
    def _is_critical_file(self, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º"""
        critical_patterns = [
            'init.php',
            'header.php',
            'footer.php',
            '.settings.php',
            'dbconn.php'
        ]
        
        return any(pattern in file_path for pattern in critical_patterns)
    
    def _analyze_dependencies(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏"""
        print("üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏...")
        
        for file_path, file_info in self.analysis_report['files_to_backup'].items():
            dependencies = file_info.get('dependencies', [])
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            if dependencies:
                self.analysis_report['file_dependencies'][file_path] = {
                    'depends_on': dependencies,
                    'dependency_type': 'include' if any('include' in str(dep) for dep in dependencies) else 'reference'
                }
    
    def _create_deployment_order(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º
        files_by_priority = {
            'critical': [],
            'high': [],
            'medium': [],
            'low': []
        }
        
        for file_path, file_info in self.analysis_report['files_to_backup'].items():
            priority = file_info.get('priority', 'medium')
            files_by_priority[priority].append(file_path)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        deployment_order = []
        
        # –°–Ω–∞—á–∞–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        for priority in ['critical', 'high', 'medium', 'low']:
            for file_path in files_by_priority[priority]:
                deployment_order.append({
                    'file': file_path,
                    'priority': priority,
                    'order': len(deployment_order) + 1
                })
        
        self.analysis_report['deployment_order'] = deployment_order
    
    def _create_validation_checks(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞"""
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        
        for file_path, file_info in self.analysis_report['files_to_backup'].items():
            checks = []
            
            file_type = file_info.get('file_type', 'unknown')
            
            if file_type == 'init_file':
                checks.extend([
                    'check_php_syntax',
                    'check_file_permissions',
                    'check_file_encoding',
                    'check_includes_exist'
                ])
            elif file_type in ['template_header', 'template_footer']:
                checks.extend([
                    'check_php_syntax',
                    'check_html_structure',
                    'check_css_js_links',
                    'check_file_permissions'
                ])
            elif file_type == 'php_file':
                checks.extend([
                    'check_php_syntax',
                    'check_file_permissions'
                ])
            elif file_type == 'javascript':
                checks.extend([
                    'check_js_syntax',
                    'check_file_permissions'
                ])
            elif file_type == 'stylesheet':
                checks.extend([
                    'check_css_syntax',
                    'check_file_permissions'
                ])
            elif file_type == 'config_file':
                checks.extend([
                    'check_php_syntax',
                    'check_config_structure',
                    'check_file_permissions',
                    'check_sensitive_data'
                ])
            
            self.analysis_report['validation_checks'][file_path] = checks
    
    def analyze_from_inspection_report(self, inspection_report_path: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏"""
        print("üîç –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏...")
        
        try:
            with open(inspection_report_path, 'r', encoding='utf-8') as f:
                inspection_report = json.load(f)
        except Exception as e:
            self.analysis_report['errors'].append(f"Error loading inspection report: {e}")
            return self.analysis_report
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞
        customization_files = inspection_report.get('customization_files', {})
        
        for file_path, file_info in customization_files.items():
            if file_info.get('exists'):
                self._analyze_existing_file_for_backup(file_path, file_info)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
        customization_places = inspection_report.get('customization_places', {})
        
        for place_path, place_info in customization_places.items():
            if place_info.get('exists') and place_info.get('recommended'):
                self._analyze_customization_place(place_path, place_info)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
        existing_customizations = inspection_report.get('existing_customizations', {})
        self._analyze_existing_customizations(existing_customizations)
        
        return self.analysis_report
    
    def _analyze_existing_file_for_backup(self, file_path: str, file_info: Dict):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        backup_info = {
            'remote_path': file_info.get('full_path', file_path),
            'local_path': os.path.basename(file_path),
            'file_type': file_info.get('type', 'unknown'),
            'priority': self._determine_backup_priority(file_path),
            'backup_required': True,
            'modification_type': 'existing',
            'size': file_info.get('size', 0),
            'exists': True,
            'dependencies': [],
            'risks': []
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∏—Å–∫–∏
        if file_info.get('type') == 'init_file':
            backup_info['risks'].append('critical_init_file')
        
        if file_info.get('size', 0) > 0:
            backup_info['risks'].append('non_empty_file')
        
        self.analysis_report['files_to_backup'][file_path] = backup_info
    
    def _analyze_customization_place(self, place_path: str, place_info: Dict):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ—Å—Ç–æ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏"""
        # –ï—Å–ª–∏ —ç—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ —Ç–∞–º –µ—Å—Ç—å —Ñ–∞–π–ª—ã
        if place_info.get('exists'):
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ
            self.analysis_report['customization_places'] = self.analysis_report.get('customization_places', {})
            self.analysis_report['customization_places'][place_path] = place_info
    
    def _analyze_existing_customizations(self, existing_customizations: Dict):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏"""
        for location, customizations in existing_customizations.items():
            if isinstance(customizations, dict):
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
                for file_type, files in customizations.items():
                    if isinstance(files, list):
                        for file_name in files:
                            if file_name != '... (truncated)':
                                full_path = f"/home/bitrix/www/local/{file_name}"
                                self.analysis_report['files_to_backup'][full_path] = {
                                    'remote_path': full_path,
                                    'local_path': os.path.basename(file_name),
                                    'file_type': file_type,
                                    'priority': 'medium',
                                    'backup_required': True,
                                    'modification_type': 'existing_customization',
                                    'dependencies': [],
                                    'risks': ['existing_customization']
                                }
    
    def save_analysis_report(self, output_path: Optional[str] = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"""
        if not output_path:
            output_path = self.project_root / "reports" / f"file_analysis_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        output_path = Path(output_path)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(self.analysis_report, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ –û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        return output_path
    
    def print_analysis_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∞–Ω–∞–ª–∏–∑–∞"""
        print("\n" + "="*60)
        print("üìä –°–í–û–î–ö–ê –ê–ù–ê–õ–ò–ó–ê –§–ê–ô–õ–û–í")
        print("="*60)
        
        files_to_backup = self.analysis_report.get('files_to_backup', {})
        
        if not files_to_backup:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {len(files_to_backup)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        by_priority = {}
        for file_path, file_info in files_to_backup.items():
            priority = file_info.get('priority', 'medium')
            if priority not in by_priority:
                by_priority[priority] = []
            by_priority[priority].append(file_path)
        
        print("\nüìä –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:")
        for priority in ['critical', 'high', 'medium', 'low']:
            if priority in by_priority:
                print(f"   {priority.upper()}: {len(by_priority[priority])} —Ñ–∞–π–ª–æ–≤")
                for file_path in by_priority[priority][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"      - {os.path.basename(file_path)}")
                if len(by_priority[priority]) > 3:
                    print(f"      ... –∏ –µ—â–µ {len(by_priority[priority]) - 3}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å —Ä–∏—Å–∫–∞–º–∏
        risky_files = [f for f, info in files_to_backup.items() if info.get('risks')]
        if risky_files:
            print(f"\n‚ö†Ô∏è  –§–∞–π–ª—ã —Å —Ä–∏—Å–∫–∞–º–∏: {len(risky_files)}")
            for file_path in risky_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                risks = files_to_backup[file_path].get('risks', [])
                print(f"   - {os.path.basename(file_path)}: {', '.join(risks)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        deployment_order = self.analysis_report.get('deployment_order', [])
        if deployment_order:
            print(f"\nüìã –ü–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {len(deployment_order)} —Ñ–∞–π–ª–æ–≤")
            for i, item in enumerate(deployment_order[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   {i+1}. {os.path.basename(item['file'])} ({item['priority']})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        errors = self.analysis_report.get('errors', [])
        if errors:
            print(f"\n‚ùå –û—à–∏–±–∫–∏: {len(errors)}")
            for error in errors[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   - {error}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python file_analyzer.py deployment_config.json")
        print("  python file_analyzer.py --inspection-report report.json")
        return 1
    
    analyzer = BitrixFileAnalyzer()
    
    if sys.argv[1] == '--inspection-report':
        if len(sys.argv) < 3:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –æ—Ç—á–µ—Ç—É –∏–Ω—Å–ø–µ–∫—Ü–∏–∏")
            return 1
        
        inspection_report_path = sys.argv[2]
        print(f"üîç –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏: {inspection_report_path}")
        
        analyzer.analyze_from_inspection_report(inspection_report_path)
    else:
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        config_path = sys.argv[1]
        
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                deployment_config = json.load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return 1
        
        print(f"üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {config_path}")
        analyzer.analyze_deployment_plan(deployment_config)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    report_path = analyzer.save_analysis_report()
    analyzer.print_analysis_summary()
    
    print(f"\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    return 0


if __name__ == "__main__":
    sys.exit(main()) 