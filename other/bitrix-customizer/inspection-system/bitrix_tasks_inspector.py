#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ –∑–∞–¥–∞—á Bitrix24
–°–æ–±–∏—Ä–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á
"""

import os
import sys
import json
import re
import glob
import datetime
from pathlib import Path

class BitrixTasksInspector:
    def __init__(self, bitrix_path):
        self.bitrix_path = Path(bitrix_path)
        self.report = {
            'timestamp': datetime.datetime.now().isoformat(),
            'bitrix_path': str(bitrix_path),
            'tasks_module': {},
            'user_fields': {},
            'templates_info': {},
            'events_handlers': {},
            'init_files': {},
            'custom_components': {},
            'task_statuses': {},
            'workflows': {},
            'errors': []
        }
    
    def collect_tasks_module_info(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ –∑–∞–¥–∞—á"""
        print("üîç –ê–Ω–∞–ª–∏–∑ –º–æ–¥—É–ª—è –∑–∞–¥–∞—á...")
        
        tasks_module_path = self.bitrix_path / 'bitrix' / 'modules' / 'tasks'
        if not tasks_module_path.exists():
            self.report['errors'].append("–ú–æ–¥—É–ª—å –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        self.report['tasks_module']['path'] = str(tasks_module_path)
        self.report['tasks_module']['exists'] = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –º–æ–¥—É–ª—è –∑–∞–¥–∞—á
        version_file = tasks_module_path / 'install' / 'version.php'
        if version_file.exists():
            try:
                with open(version_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    version_match = re.search(r'\$arModuleVersion\s*=\s*array\s*\(\s*["\']VERSION["\']\s*=>\s*["\']([^"\']+)["\']', content)
                    if version_match:
                        self.report['tasks_module']['version'] = version_match.group(1)
            except Exception as e:
                self.report['errors'].append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –º–æ–¥—É–ª—è –∑–∞–¥–∞—á: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã –º–æ–¥—É–ª—è
        key_files = [
            'classes/general/task.php',
            'classes/general/taskitem.php',
            'lib/item/task.php',
            'install/components/bitrix/tasks.task/component.php'
        ]
        
        found_files = []
        for file_path in key_files:
            full_path = tasks_module_path / file_path
            if full_path.exists():
                found_files.append(file_path)
        
        self.report['tasks_module']['key_files'] = found_files
    
    def collect_user_fields_info(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª—è—Ö –∑–∞–¥–∞—á"""
        print("üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π...")
        
        # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–ª–µ–π –≤ PHP —Ñ–∞–π–ª–∞—Ö
        search_paths = [
            self.bitrix_path / 'local' / 'php_interface',
            self.bitrix_path / 'bitrix' / 'php_interface'
        ]
        
        user_fields = {}
        
        for search_path in search_paths:
            if not search_path.exists():
                continue
                
            # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏ –ø–æ–ª–µ–π
            php_files = glob.glob(str(search_path / '**' / '*.php'), recursive=True)
            
            for php_file in php_files:
                try:
                    with open(php_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                        
                        # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è UF –ø–æ–ª–µ–π
                        uf_matches = re.findall(r'UF_[A-Z_]+', content)
                        if uf_matches:
                            rel_path = str(Path(php_file).relative_to(self.bitrix_path))
                            user_fields[rel_path] = list(set(uf_matches))
                            
                except Exception as e:
                    self.report['errors'].append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {php_file}: {e}")
        
        self.report['user_fields'] = user_fields
    
    def collect_templates_structure(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–∞—Ö"""
        print("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤...")
        
        templates_info = {}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        local_templates = self.bitrix_path / 'local' / 'templates'
        if local_templates.exists():
            templates_info['local'] = self._analyze_template_directory(local_templates)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        bitrix_templates = self.bitrix_path / 'bitrix' / 'templates'
        if bitrix_templates.exists():
            templates_info['bitrix'] = self._analyze_template_directory(bitrix_templates)
        
        self.report['templates_info'] = templates_info
    
    def _analyze_template_directory(self, template_dir):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —à–∞–±–ª–æ–Ω–æ–≤"""
        template_info = {}
        
        try:
            for template_name in os.listdir(template_dir):
                template_path = template_dir / template_name
                if not template_path.is_dir():
                    continue
                
                info = {
                    'has_header': (template_path / 'header.php').exists(),
                    'has_footer': (template_path / 'footer.php').exists(),
                    'has_assets': (template_path / 'assets').exists(),
                    'js_files': [],
                    'css_files': []
                }
                
                # –ò—â–µ–º JS –∏ CSS —Ñ–∞–π–ª—ã
                assets_path = template_path / 'assets'
                if assets_path.exists():
                    js_path = assets_path / 'js'
                    css_path = assets_path / 'css'
                    
                    if js_path.exists():
                        info['js_files'] = [f.name for f in js_path.glob('*.js')]
                    
                    if css_path.exists():
                        info['css_files'] = [f.name for f in css_path.glob('*.css')]
                
                template_info[template_name] = info
                
        except Exception as e:
            self.report['errors'].append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —à–∞–±–ª–æ–Ω–æ–≤ –≤ {template_dir}: {e}")
        
        return template_info
    
    def collect_event_handlers(self):
        """–ò—â–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∑–∞–¥–∞—á"""
        print("üîç –ü–æ–∏—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –∑–∞–¥–∞—á...")
        
        handlers = {}
        
        # –ò—â–µ–º init.php —Ñ–∞–π–ª—ã
        init_files = [
            self.bitrix_path / 'local' / 'php_interface' / 'init.php',
            self.bitrix_path / 'bitrix' / 'php_interface' / 'init.php'
        ]
        
        for init_file in init_files:
            if not init_file.exists():
                continue
                
            try:
                with open(init_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                    # –ò—â–µ–º AddEventHandler –¥–ª—è –º–æ–¥—É–ª—è tasks
                    handler_matches = re.findall(
                        r'AddEventHandler\s*\(\s*["\']tasks["\']\s*,\s*["\']([^"\']+)["\']\s*,\s*["\']([^"\']+)["\']',
                        content
                    )
                    
                    if handler_matches:
                        rel_path = str(init_file.relative_to(self.bitrix_path))
                        handlers[rel_path] = handler_matches
                        
            except Exception as e:
                self.report['errors'].append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {init_file}: {e}")
        
        self.report['events_handlers'] = handlers
    
    def collect_init_files_info(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        print("üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
        
        init_files_info = {}
        
        init_paths = [
            ('local', self.bitrix_path / 'local' / 'php_interface' / 'init.php'),
            ('bitrix', self.bitrix_path / 'bitrix' / 'php_interface' / 'init.php')
        ]
        
        for location, init_path in init_paths:
            if not init_path.exists():
                init_files_info[location] = {'exists': False}
                continue
            
            try:
                with open(init_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                info = {
                    'exists': True,
                    'size': len(content),
                    'lines': len(content.split('\n')),
                    'has_task_handlers': 'tasks' in content and 'AddEventHandler' in content,
                    'includes_count': len(re.findall(r'(?:include|require)(?:_once)?\s*\(', content)),
                    'functions_count': len(re.findall(r'function\s+\w+\s*\(', content))
                }
                
                init_files_info[location] = info
                
            except Exception as e:
                init_files_info[location] = {'exists': True, 'error': str(e)}
                self.report['errors'].append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {init_path}: {e}")
        
        self.report['init_files'] = init_files_info
    
    def collect_custom_components(self):
        """–ò—â–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∑–∞–¥–∞—á"""
        print("üîç –ü–æ–∏—Å–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        components = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        local_components = self.bitrix_path / 'local' / 'components'
        if local_components.exists():
            components['local'] = self._find_task_components(local_components)
        
        self.report['custom_components'] = components
    
    def _find_task_components(self, components_dir):
        """–ò—â–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–∞—á–∞–º–∏"""
        task_components = {}
        
        try:
            for vendor_dir in components_dir.iterdir():
                if not vendor_dir.is_dir():
                    continue
                
                for component_dir in vendor_dir.iterdir():
                    if not component_dir.is_dir():
                        continue
                    
                    # –ò—â–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ —Å–ª–æ–≤–æ–º "task" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                    if 'task' in component_dir.name.lower():
                        component_path = f"{vendor_dir.name}:{component_dir.name}"
                        
                        info = {
                            'path': str(component_dir.relative_to(self.bitrix_path)),
                            'has_component_php': (component_dir / 'component.php').exists(),
                            'has_class_php': (component_dir / 'class.php').exists(),
                            'templates': []
                        }
                        
                        # –ò—â–µ–º —à–∞–±–ª–æ–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                        templates_dir = component_dir / 'templates'
                        if templates_dir.exists():
                            info['templates'] = [t.name for t in templates_dir.iterdir() if t.is_dir()]
                        
                        task_components[component_path] = info
        
        except Exception as e:
            self.report['errors'].append(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ {components_dir}: {e}")
        
        return task_components
    
    def collect_task_statuses(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–∞—Ö –∑–∞–¥–∞—á"""
        print("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á...")
        
        # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        status_info = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º .settings.php
        settings_file = self.bitrix_path / 'bitrix' / '.settings.php'
        if settings_file.exists():
            try:
                # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 1000 —Å—Ç—Ä–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                with open(settings_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()[:1000]
                    content = ''.join(lines)
                
                # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á
                if 'task' in content.lower():
                    status_info['has_task_config'] = True
                
            except Exception as e:
                self.report['errors'].append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        
        self.report['task_statuses'] = status_info
    
    def save_report(self, filename='bitrix_tasks_inspection_report.json'):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª"""
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ {filename}...")
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.report, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É"""
        print("\n" + "="*60)
        print("üìã –°–í–û–î–ö–ê –ò–ù–°–ü–ï–ö–¶–ò–ò –ú–û–î–£–õ–Ø –ó–ê–î–ê–ß")
        print("="*60)
        
        print(f"üïí –í—Ä–µ–º—è: {self.report['timestamp']}")
        print(f"üìÅ –ü—É—Ç—å Bitrix24: {self.report['bitrix_path']}")
        
        # –ú–æ–¥—É–ª—å –∑–∞–¥–∞—á
        tasks_module = self.report['tasks_module']
        if tasks_module.get('exists'):
            print(f"‚úÖ –ú–æ–¥—É–ª—å –∑–∞–¥–∞—á –Ω–∞–π–¥–µ–Ω")
            if tasks_module.get('version'):
                print(f"üì¶ –í–µ—Ä—Å–∏—è –º–æ–¥—É–ª—è: {tasks_module['version']}")
            print(f"üîß –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã: {len(tasks_module.get('key_files', []))}")
        else:
            print("‚ùå –ú–æ–¥—É–ª—å –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è
        user_fields = self.report['user_fields']
        total_uf_files = len(user_fields)
        total_uf_fields = sum(len(fields) for fields in user_fields.values())
        print(f"üìù UF –ø–æ–ª—è: {total_uf_fields} –≤ {total_uf_files} —Ñ–∞–π–ª–∞—Ö")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        handlers = self.report['events_handlers']
        total_handlers = sum(len(h) for h in handlers.values())
        print(f"‚ö° –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π: {total_handlers}")
        
        # –®–∞–±–ª–æ–Ω—ã
        templates = self.report['templates_info']
        local_templates = len(templates.get('local', {}))
        print(f"üé® –õ–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã: {local_templates}")
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        components = self.report['custom_components']
        local_components = len(components.get('local', {}))
        print(f"üîß –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {local_components}")
        
        if self.report['errors']:
            print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∏ ({len(self.report['errors'])}):")
            for error in self.report['errors'][:5]:
                print(f"   - {error}")
        
        print("\n‚úÖ –ò–Ω—Å–ø–µ–∫—Ü–∏—è –º–æ–¥—É–ª—è –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç Bitrix24 Tasks Inspector - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–¥—É–ª—è –∑–∞–¥–∞—á")
    print("="*70)
    
    # –ò—â–µ–º –ø—É—Ç—å –∫ Bitrix24
    possible_paths = [
        '/home/bitrix/www',
        '/var/www/html',
        '/var/www/bitrix'
    ]
    
    bitrix_path = None
    for path in possible_paths:
        if os.path.exists(path) and os.path.exists(os.path.join(path, 'bitrix')):
            bitrix_path = path
            break
    
    if not bitrix_path:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Bitrix24")
        return 1
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω Bitrix24: {bitrix_path}")
    
    inspector = BitrixTasksInspector(bitrix_path)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    inspector.collect_tasks_module_info()
    inspector.collect_user_fields_info()
    inspector.collect_templates_structure()
    inspector.collect_event_handlers()
    inspector.collect_init_files_info()
    inspector.collect_custom_components()
    inspector.collect_task_statuses()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    inspector.save_report()
    inspector.print_summary()
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 