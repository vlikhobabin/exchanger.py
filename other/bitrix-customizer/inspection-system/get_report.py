#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ Bitrix24 —Å —Å–µ—Ä–≤–µ—Ä–∞
"""

import json
import os
import shutil
import subprocess
import sys
from pathlib import Path
import datetime

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ config.json"""
    config_path = Path(__file__).parent.parent / "config.json"
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

def download_report(server_config):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
    print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    local_filename = f"bitrix_inspection_report_{timestamp}.json"
    local_path = Path(__file__).parent / "reports" / local_filename
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    local_path.parent.mkdir(exist_ok=True)
    
    remote_path = f"/home/{server_config['user']}/bitrix_inspection_report.json"
    
    auth_method = server_config.get('auth_method', 'password')
    
    if auth_method == 'key':
        return download_with_key(server_config, remote_path, local_path)
    else:
        return download_with_password(server_config, remote_path, local_path)

def download_with_key(server_config, remote_path, local_path):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–∞"""
    key_file = server_config.get('key_file')
    if not key_file:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –∫–ª—é—á–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return None
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ, —Ç–∞–∫ –∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
    if os.path.isabs(key_file):
        key_path = Path(key_file)
    else:
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∏—â–µ–º –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        key_path = Path(__file__).parent.parent / key_file
    
    if not key_path.exists():
        print(f"‚ùå –§–∞–π–ª –∫–ª—é—á–∞ {key_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pscp (PuTTY –≤–µ—Ä—Å–∏—è)
    pscp_cmd = shutil.which('pscp')
    if pscp_cmd:
        return download_with_pscp(server_config, key_path, remote_path, local_path)
    
    # –ï—Å–ª–∏ pscp –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º scp
    if key_path.suffix.lower() == '.ppk':
        print("‚ùå .ppk –∫–ª—é—á —Ç—Ä–µ–±—É–µ—Ç PuTTY —É—Ç–∏–ª–∏—Ç—ã (pscp) –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
        return None
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π scp —Å –∫–ª—é—á–æ–º
    cmd = [
        "scp", 
        "-i", str(key_path),
        "-o", "StrictHostKeyChecking=no",
        f"{server_config['user']}@{server_config['host']}:{remote_path}",
        str(local_path)
    ]
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–∫–∞—á–∞–Ω: {local_path}")
        return str(local_path)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:")
        print(f"   {e.stderr}")
        return None
    except FileNotFoundError:
        print("‚ùå –ö–æ–º–∞–Ω–¥–∞ scp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω SSH –∫–ª–∏–µ–Ω—Ç.")
        return None

def download_with_pscp(server_config, key_path, remote_path, local_path):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pscp (PuTTY –≤–µ—Ä—Å–∏—è)"""
    cmd = [
        "pscp",
        "-i", str(key_path),
        "-batch",  # –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        f"{server_config['user']}@{server_config['host']}:{remote_path}",
        str(local_path)
    ]
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–∫–∞—á–∞–Ω: {local_path}")
        return str(local_path)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:")
        print(f"   {e.stderr}")
        return None

def download_with_password(server_config, remote_path, local_path):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è"""
    cmd = [
        "scp", 
        f"{server_config['user']}@{server_config['host']}:{remote_path}",
        str(local_path)
    ]
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–∫–∞—á–∞–Ω: {local_path}")
        return str(local_path)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:")
        print(f"   {e.stderr}")
        return None
    except FileNotFoundError:
        print("‚ùå –ö–æ–º–∞–Ω–¥–∞ scp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω SSH –∫–ª–∏–µ–Ω—Ç.")
        return None

def analyze_report(report_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ç—á–µ—Ç–∞"""
    try:
        with open(report_path, 'r', encoding='utf-8') as f:
            report = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        return False
    
    print("\n" + "="*60)
    print("üìä –ê–ù–ê–õ–ò–ó –û–¢–ß–ï–¢–ê BITRIX24")
    print("="*60)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"üïí –í—Ä–µ–º—è –∏–Ω—Å–ø–µ–∫—Ü–∏–∏: {report.get('timestamp', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print(f"üñ•Ô∏è  –•–æ—Å—Ç: {report.get('hostname', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    system_info = report.get('system_info', {})
    print(f"üêß –û–°: {system_info.get('os', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print(f"üîß –Ø–¥—Ä–æ: {system_info.get('kernel', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    if system_info.get('load_avg'):
        print(f"üìà –ó–∞–≥—Ä—É–∑–∫–∞: {system_info['load_avg']}")
    if system_info.get('disk_usage'):
        print(f"üíæ –î–∏—Å–∫: {system_info['disk_usage']}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Bitrix24
    print("\nüì¶ BITRIX24:")
    bitrix_info = report.get('bitrix_info', {})
    if bitrix_info.get('main_path'):
        print(f"üìÅ –ü—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {bitrix_info['main_path']}")
        print(f"üì¶ –í–µ—Ä—Å–∏—è: {bitrix_info.get('version', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}")
        if bitrix_info.get('version_date'):
            print(f"üìÖ –î–∞—Ç–∞ –≤–µ—Ä—Å–∏–∏: {bitrix_info['version_date']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤
        checks = []
        if bitrix_info.get('has_settings'): checks.append("‚úÖ .settings.php")
        if bitrix_info.get('has_dbconn'): checks.append("‚úÖ dbconn.php")
        if bitrix_info.get('has_license'): checks.append("‚úÖ license_key.php")
        
        if checks:
            print(f"üìã –§–∞–π–ª—ã: {', '.join(checks)}")
    else:
        print("‚ùå Bitrix24 –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PHP
    print("\nüêò PHP:")
    php_info = report.get('php_info', {})
    if php_info.get('version'):
        print(f"üì¶ –í–µ—Ä—Å–∏—è: {php_info['version']}")
        
        settings = php_info.get('settings', {})
        if settings:
            print("‚öôÔ∏è  –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
            for key, value in settings.items():
                print(f"   {key}: {value}")
        
        modules = php_info.get('modules', [])
        important_modules = ['mysqli', 'mbstring', 'gd', 'curl', 'openssl', 'zip']
        available_modules = [m for m in important_modules if m in modules]
        if available_modules:
            print(f"üîß –í–∞–∂–Ω—ã–µ –º–æ–¥—É–ª–∏: {', '.join(available_modules)}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–µ
    print("\nüåê –í–ï–ë-–°–ï–†–í–ï–†:")
    web_server = report.get('web_server', {})
    if web_server.get('apache'):
        print(f"‚ö° Apache: {web_server['apache']}")
    elif web_server.get('nginx'):
        print(f"‚ö° Nginx: {web_server['nginx']}")
    else:
        print("‚ùì –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤
    print("\nüìÅ –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–û–í:")
    file_structure = report.get('file_structure', {})
    for dir_name, info in file_structure.items():
        if info.get('exists'):
            if 'error' in info:
                print(f"‚ùå {dir_name}: –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")
            else:
                dirs_count = info.get('dirs_count', 0)
                files_count = info.get('files_count', 0)
                print(f"üìÇ {dir_name}: {dirs_count} –ø–∞–ø–æ–∫, {files_count} —Ñ–∞–π–ª–æ–≤")
        else:
            print(f"‚ùå {dir_name}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –®–∞–±–ª–æ–Ω—ã
    print("\nüé® –®–ê–ë–õ–û–ù–´:")
    templates = report.get('templates', {})
    if templates.get('local'):
        print(f"üè† Local: {', '.join(templates['local'])}")
    if templates.get('bitrix'):
        bitrix_templates = templates['bitrix'][:5]  # –ü–µ—Ä–≤—ã–µ 5
        more = " ..." if len(templates['bitrix']) > 5 else ""
        print(f"üîß Bitrix: {', '.join(bitrix_templates)}{more}")
    
    # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    print("\nüîê –ü–†–ê–í–ê –î–û–°–¢–£–ü–ê:")
    permissions = report.get('permissions', {})
    for path, info in permissions.items():
        if 'error' in info:
            print(f"‚ùå {path}: –æ—à–∏–±–∫–∞")
        else:
            mode = info.get('mode', '???')
            owner = info.get('owner', '?')
            group = info.get('group', '?')
            print(f"üìÅ {path}: {mode} {owner}:{group}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
    print("\nüîß –ö–ê–°–¢–û–ú–ò–ó–ê–¶–ò–Ø:")
    customization_files = report.get('customization_files', {})
    if customization_files:
        init_files = {path: info for path, info in customization_files.items() if info.get('type') == 'init_file'}
        existing_init = [path for path, info in init_files.items() if info.get('exists')]
        missing_init = [path for path, info in init_files.items() if not info.get('exists')]
        
        if existing_init:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã init.php —Ñ–∞–π–ª—ã ({len(existing_init)}):")
            for file_path in existing_init:
                info = init_files[file_path]
                size = info.get('size', 0)
                print(f"   üìÑ {file_path} ({size} bytes)")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                content_analysis = info.get('content_analysis', {})
                if content_analysis:
                    if content_analysis.get('has_tasks_handlers'):
                        print(f"      üéØ –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞—á")
                    if content_analysis.get('has_event_handlers'):
                        print(f"      ‚ö° –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π")
        
        if missing_init:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç init.php —Ñ–∞–π–ª—ã ({len(missing_init)}):")
            for file_path in missing_init:
                info = init_files[file_path]
                can_create = info.get('can_create', {})
                if can_create.get('can_create'):
                    print(f"   üìù {file_path} (–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å)")
                else:
                    reason = can_create.get('reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')
                    print(f"   ‚ùå {file_path} (–Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å: {reason})")
    
    # –ú–µ—Å—Ç–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
    customization_places = report.get('customization_places', {})
    if customization_places:
        print(f"\nüìÅ –ú–ï–°–¢–ê –î–õ–Ø –ö–ê–°–¢–û–ú–ò–ó–ê–¶–ò–ò:")
        high_priority = [path for path, info in customization_places.items() if info.get('priority') == 'high']
        
        for place_path in high_priority:
            info = customization_places[place_path]
            status = "‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç" if info.get('exists') else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            purpose = info.get('purpose', '')
            print(f"   {status} {place_path} - {purpose}")
            
            if info.get('exists'):
                writable = "‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º–∞—è" if info.get('writable') else "‚ùå –ù–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º–∞—è"
                items_count = info.get('items_count', 0)
                print(f"      {writable}, —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {items_count}")
    
    # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
    existing_customizations = report.get('existing_customizations', {})
    if existing_customizations:
        print(f"\nüé® –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ö–ê–°–¢–û–ú–ò–ó–ê–¶–ò–ò:")
        for location, info in existing_customizations.items():
            if isinstance(info, dict):
                if location == 'local':
                    php_count = len(info.get('php_files', []))
                    js_count = len(info.get('js_files', []))
                    components_count = len(info.get('components', []))
                    templates_count = len(info.get('templates', []))
                    
                    if php_count > 0:
                        print(f"   üìÑ Local PHP —Ñ–∞–π–ª—ã: {php_count}")
                    if js_count > 0:
                        print(f"   üìÑ Local JS —Ñ–∞–π–ª—ã: {js_count}")
                    if components_count > 0:
                        print(f"   üîß Local –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {components_count}")
                    if templates_count > 0:
                        print(f"   üé® Local —à–∞–±–ª–æ–Ω—ã: {templates_count}")
                elif location == 'upload':
                    suspicious_count = len(info.get('suspicious_files', []))
                    custom_dirs_count = len(info.get('custom_dirs', []))
                    
                    if suspicious_count > 0:
                        print(f"   ‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ upload: {suspicious_count}")
                    if custom_dirs_count > 0:
                        print(f"   üìÅ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞–ø–∫–∏ –≤ upload: {custom_dirs_count}")
                elif location == 'bitrix_templates':
                    modified_count = len(info.get('modified_templates', []))
                    custom_files_count = len(info.get('custom_files', []))
                    
                    if modified_count > 0:
                        print(f"   üîß –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã: {modified_count}")
                    if custom_files_count > 0:
                        print(f"   üìÑ –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —à–∞–±–ª–æ–Ω–∞—Ö: {custom_files_count}")
    
    # –û—à–∏–±–∫–∏
    errors = report.get('errors', [])
    if errors:
        print(f"\n‚ö†Ô∏è  –û–®–ò–ë–ö–ò ({len(errors)}):")
        for error in errors[:10]:  # –ü–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
            print(f"   - {error}")
    
    print("\n" + "="*60)
    print(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_path}")
    
    return True

def create_summary_report(report_path):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    try:
        with open(report_path, 'r', encoding='utf-8') as f:
            report = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
    summary_path = report_path.replace('.json', '_summary.txt')
    
    try:
        with open(summary_path, 'w', encoding='utf-8') as f:
            f.write("–ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê BITRIX24 –ò–ù–°–ü–ï–ö–¶–ò–ò\n")
            f.write("="*50 + "\n\n")
            
            f.write(f"–í—Ä–µ–º—è: {report.get('timestamp', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n")
            f.write(f"–•–æ—Å—Ç: {report.get('hostname', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n")
            f.write(f"–û–°: {report.get('system_info', {}).get('os', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n")
            
            bitrix_info = report.get('bitrix_info', {})
            if bitrix_info.get('main_path'):
                f.write(f"Bitrix24 –ø—É—Ç—å: {bitrix_info['main_path']}\n")
                f.write(f"–í–µ—Ä—Å–∏—è: {bitrix_info.get('version', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}\n")
            else:
                f.write("‚ùå Bitrix24 –Ω–µ –Ω–∞–π–¥–µ–Ω\n")
            
            f.write(f"\nPHP: {report.get('php_info', {}).get('version', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n")
            
            web_server = report.get('web_server', {})
            if web_server.get('apache'):
                f.write(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä: {web_server['apache']}\n")
            elif web_server.get('nginx'):
                f.write(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä: {web_server['nginx']}\n")
            
            errors = report.get('errors', [])
            if errors:
                f.write(f"\n–û—à–∏–±–∫–∏ ({len(errors)}):\n")
                for error in errors:
                    f.write(f"  - {error}\n")
        
        print(f"üìù –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {summary_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ Bitrix24 Inspector")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    if not config:
        return 1
    
    server_config = config['server']
    
    print(f"üéØ –°–µ—Ä–≤–µ—Ä: {server_config['user']}@{server_config['host']}")
    print("-" * 50)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç
    report_path = download_report(server_config)
    if not report_path:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç")
        return 1
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    analyze_report(report_path)
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
    create_summary_report(report_path)
    
    print("\nüéâ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 