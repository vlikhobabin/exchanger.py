#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è Bitrix24
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
"""

import os
import sys
import json
import shutil
import subprocess
import datetime
import hashlib
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Set


class EnhancedRestoreManager:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.backup_dir = self.project_root / "backups"
        self.config_file = self.project_root / "config.json"
        self.reports_dir = self.project_root / "reports"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.reports_dir.mkdir(parents=True, exist_ok=True)
        
        self.session_info = {
            'timestamp': datetime.datetime.now().isoformat(),
            'session_id': self._generate_session_id(),
            'restore_type': 'unknown',
            'backup_session_id': None,
            'files_restored': {},
            'files_failed': {},
            'validation_results': {},
            'errors': [],
            'warnings': []
        }
        
    def _generate_session_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        return f"restore_session_{timestamp}"
    
    def load_config(self) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            return config
        except FileNotFoundError:
            self.session_info['errors'].append(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        except json.JSONDecodeError as e:
            self.session_info['errors'].append(f"–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return None
    
    def full_system_restore(self, backup_session_id: str) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        print("üîÑ –ü–û–õ–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ BITRIX24")
        print("="*70)
        
        self.session_info['restore_type'] = 'full_system'
        self.session_info['backup_session_id'] = backup_session_id
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = self.load_config()
        if not config:
            return False
        
        server_config = config['server']
        print(f"üéØ –°–µ—Ä–≤–µ—Ä: {server_config['user']}@{server_config['host']}")
        print(f"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {server_config.get('auth_method', 'password')}")
        print(f"üì¶ –°–µ—Å—Å–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_session_id}")
        print("-" * 70)
        
        # –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        print("\nüìä –≠–¢–ê–ü 1: –ó–ê–ì–†–£–ó–ö–ê –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò")
        print("-" * 40)
        
        backup_info = self._load_backup_metadata(backup_session_id)
        if not backup_info:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            return False
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        print(f"   üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {backup_info.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"   üìÅ –§–∞–π–ª–æ–≤: {len(backup_info.get('files_backed_up', {}))}")
        
        # –≠—Ç–∞–ø 2: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print("\nüîç –≠–¢–ê–ü 2: –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
        print("-" * 40)
        
        pre_check_results = self._pre_restore_validation(server_config, backup_info)
        if not pre_check_results['success']:
            print("‚ùå –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return False
        
        print("‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
        
        # –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        print("\nüíæ –≠–¢–ê–ü 3: –°–û–ó–î–ê–ù–ò–ï –¢–û–ß–ö–ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø")
        print("-" * 40)
        
        recovery_point = self._create_recovery_point(server_config, backup_info)
        if not recovery_point['success']:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ—á–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            return False
        
        print("‚úÖ –¢–æ—á–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        
        # –≠—Ç–∞–ø 4: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        print("\nüîÑ –≠–¢–ê–ü 4: –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –§–ê–ô–õ–û–í")
        print("-" * 40)
        
        restore_results = self._perform_restore(server_config, backup_info, recovery_point)
        
        # –≠—Ç–∞–ø 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        print("\n‚úÖ –≠–¢–ê–ü 5: –ü–†–û–í–ï–†–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø")
        print("-" * 40)
        
        verification_results = self._verify_restore(server_config, backup_info, restore_results)
        
        # –≠—Ç–∞–ø 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        print("\nüìÑ –≠–¢–ê–ü 6: –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–ß–ï–¢–ê")
        print("-" * 40)
        
        self._save_restore_report(restore_results, verification_results, recovery_point)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        self._print_restore_summary(restore_results, verification_results)
        
        return restore_results['success'] and verification_results['success']
    
    def selective_restore(self, backup_session_id: str, files_to_restore: List[str]) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("üîÑ –°–ï–õ–ï–ö–¢–ò–í–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –§–ê–ô–õ–û–í")
        print("="*70)
        
        self.session_info['restore_type'] = 'selective'
        self.session_info['backup_session_id'] = backup_session_id
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = self.load_config()
        if not config:
            return False
        
        server_config = config['server']
        print(f"üéØ –°–µ—Ä–≤–µ—Ä: {server_config['user']}@{server_config['host']}")
        print(f"üì¶ –°–µ—Å—Å–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_session_id}")
        print(f"üìÅ –§–∞–π–ª–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {len(files_to_restore)}")
        print("-" * 70)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        backup_info = self._load_backup_metadata(backup_session_id)
        if not backup_info:
            return False
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        available_files = backup_info.get('files_backed_up', {})
        filtered_files = {}
        
        for file_path in files_to_restore:
            if file_path in available_files:
                filtered_files[file_path] = available_files[file_path]
            else:
                print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {file_path}")
                self.session_info['warnings'].append(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {file_path}")
        
        if not filtered_files:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        temp_backup_info = backup_info.copy()
        temp_backup_info['files_backed_up'] = filtered_files
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        restore_results = self._perform_restore(server_config, temp_backup_info, None)
        verification_results = self._verify_restore(server_config, temp_backup_info, restore_results)
        
        self._save_restore_report(restore_results, verification_results, None)
        self._print_restore_summary(restore_results, verification_results)
        
        return restore_results['success'] and verification_results['success']
    
    def emergency_restore(self, backup_session_id: str) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        print("üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´")
        print("="*70)
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏!")
        print("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö!")
        print("-" * 70)
        
        self.session_info['restore_type'] = 'emergency'
        self.session_info['backup_session_id'] = backup_session_id
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = self.load_config()
        if not config:
            return False
        
        server_config = config['server']
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        backup_info = self._load_backup_metadata(backup_session_id)
        if not backup_info:
            return False
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
        if not self._test_server_connection(server_config):
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        restore_results = self._perform_emergency_restore(server_config, backup_info)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        verification_results = self._minimal_verification(server_config, restore_results)
        
        self._save_restore_report(restore_results, verification_results, None)
        self._print_restore_summary(restore_results, verification_results)
        
        return restore_results['success']
    
    def _load_backup_metadata(self, backup_session_id: str) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        backup_session_dir = self.backup_dir / backup_session_id
        
        if not backup_session_dir.exists():
            self.session_info['errors'].append(f"–ü–∞–ø–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {backup_session_dir}")
            return None
        
        metadata_file = backup_session_dir / 'backup_metadata.json'
        if not metadata_file.exists():
            self.session_info['errors'].append(f"–§–∞–π–ª –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {metadata_file}")
            return None
        
        try:
            with open(metadata_file, 'r', encoding='utf-8') as f:
                metadata = json.load(f)
            return metadata
        except Exception as e:
            self.session_info['errors'].append(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def _pre_restore_validation(self, server_config: Dict, backup_info: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
        validation_results = {
            'success': True,
            'server_accessible': False,
            'backup_integrity_ok': False,
            'target_paths_accessible': False,
            'conflicts_detected': [],
            'warnings': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
        print("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        if self._test_server_connection(server_config):
            validation_results['server_accessible'] = True
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            validation_results['success'] = False
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return validation_results
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        print("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        backup_integrity = self._check_backup_integrity(backup_info)
        if backup_integrity['success']:
            validation_results['backup_integrity_ok'] = True
            print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–∞")
        else:
            validation_results['success'] = False
            print("‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞")
            print(f"   –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {len(backup_integrity.get('corrupted_files', []))}")
            return validation_results
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ü–µ–ª–µ–≤—ã—Ö –ø—É—Ç–µ–π
        print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ü–µ–ª–µ–≤—ã—Ö –ø—É—Ç–µ–π...")
        target_paths_check = self._check_target_paths(server_config, backup_info)
        if target_paths_check['success']:
            validation_results['target_paths_accessible'] = True
            print("‚úÖ –¶–µ–ª–µ–≤—ã–µ –ø—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            validation_results['warnings'].append("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–ª–µ–≤—ã–µ –ø—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–ª–µ–≤—ã–µ –ø—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        print("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
        conflicts = self._detect_conflicts(server_config, backup_info)
        if conflicts:
            validation_results['conflicts_detected'] = conflicts
            print(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã: {len(conflicts)}")
            for conflict in conflicts[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   - {conflict}")
        else:
            print("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        
        return validation_results
    
    def _create_recovery_point(self, server_config: Dict, backup_info: Dict) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–æ—á–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        recovery_point = {
            'success': False,
            'timestamp': datetime.datetime.now().isoformat(),
            'recovery_point_id': f"recovery_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}",
            'files_saved': {},
            'files_failed': {},
            'recovery_dir': None
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ç–æ—á–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        recovery_dir = self.backup_dir / recovery_point['recovery_point_id']
        recovery_dir.mkdir(parents=True, exist_ok=True)
        recovery_point['recovery_dir'] = str(recovery_dir)
        
        print(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {recovery_point['recovery_point_id']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        files_to_backup = backup_info.get('files_backed_up', {})
        
        for file_path, file_info in files_to_backup.items():
            print(f"üì• –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {os.path.basename(file_path)}")
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–æ—á–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            recovery_filename = f"current_{os.path.basename(file_path)}"
            recovery_file_path = recovery_dir / recovery_filename
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞
            if self._copy_file_from_server(server_config, file_path, recovery_file_path):
                recovery_point['files_saved'][file_path] = {
                    'recovery_path': str(recovery_file_path),
                    'size': recovery_file_path.stat().st_size if recovery_file_path.exists() else 0,
                    'checksum': self._calculate_file_checksum(recovery_file_path) if recovery_file_path.exists() else None
                }
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {os.path.basename(file_path)}")
            else:
                recovery_point['files_failed'][file_path] = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª'
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {os.path.basename(file_path)} (—Ñ–∞–π–ª –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        recovery_metadata = {
            'timestamp': recovery_point['timestamp'],
            'recovery_point_id': recovery_point['recovery_point_id'],
            'restore_session_id': self.session_info['session_id'],
            'backup_session_id': self.session_info['backup_session_id'],
            'files_saved': recovery_point['files_saved'],
            'files_failed': recovery_point['files_failed']
        }
        
        recovery_metadata_file = recovery_dir / 'recovery_metadata.json'
        with open(recovery_metadata_file, 'w', encoding='utf-8') as f:
            json.dump(recovery_metadata, f, indent=2, ensure_ascii=False)
        
        recovery_point['success'] = True
        print(f"‚úÖ –¢–æ—á–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: {recovery_point['recovery_point_id']}")
        
        return recovery_point
    
    def _perform_restore(self, server_config: Dict, backup_info: Dict, recovery_point: Optional[Dict]) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
        restore_results = {
            'success': True,
            'files_restored': {},
            'files_failed': {},
            'total_files': 0,
            'successful_count': 0,
            'failed_count': 0,
            'total_size': 0
        }
        
        files_to_restore = backup_info.get('files_backed_up', {})
        restore_results['total_files'] = len(files_to_restore)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–ø–∫—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        backup_session_dir = self.backup_dir / self.session_info['backup_session_id']
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏)
        sorted_files = sorted(files_to_restore.items(), 
                            key=lambda x: self._get_restore_priority_order(x[1]))
        
        for file_path, file_info in sorted_files:
            print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {os.path.basename(file_path)}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            backup_file_path = backup_session_dir / file_info['local_path']
            
            if not backup_file_path.exists():
                restore_results['files_failed'][file_path] = '–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'
                restore_results['failed_count'] += 1
                print(f"‚ùå –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_info['local_path']}")
                continue
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª
            restore_file_result = self._restore_single_file(server_config, file_path, backup_file_path, file_info)
            
            if restore_file_result['success']:
                restore_results['files_restored'][file_path] = restore_file_result
                restore_results['successful_count'] += 1
                restore_results['total_size'] += restore_file_result.get('size', 0)
                print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {os.path.basename(file_path)}")
            else:
                restore_results['files_failed'][file_path] = restore_file_result
                restore_results['failed_count'] += 1
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {os.path.basename(file_path)} - {restore_file_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        if restore_results['failed_count'] > 0:
            restore_results['success'] = False
        
        return restore_results
    
    def _perform_emergency_restore(self, server_config: Dict, backup_info: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        restore_results = {
            'success': True,
            'files_restored': {},
            'files_failed': {},
            'total_files': 0,
            'successful_count': 0,
            'failed_count': 0,
            'emergency_mode': True
        }
        
        files_to_restore = backup_info.get('files_backed_up', {})
        restore_results['total_files'] = len(files_to_restore)
        
        backup_session_dir = self.backup_dir / self.session_info['backup_session_id']
        
        # –í —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        for file_path, file_info in files_to_restore.items():
            print(f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {os.path.basename(file_path)}")
            
            backup_file_path = backup_session_dir / file_info['local_path']
            
            if backup_file_path.exists():
                # –ü—Ä—è–º–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫
                if self._copy_file_to_server(server_config, backup_file_path, file_path):
                    restore_results['files_restored'][file_path] = {
                        'success': True,
                        'emergency_mode': True,
                        'size': backup_file_path.stat().st_size
                    }
                    restore_results['successful_count'] += 1
                    print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {os.path.basename(file_path)}")
                else:
                    restore_results['files_failed'][file_path] = '–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è'
                    restore_results['failed_count'] += 1
                    print(f"‚ùå –û—à–∏–±–∫–∞: {os.path.basename(file_path)}")
            else:
                restore_results['files_failed'][file_path] = '–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'
                restore_results['failed_count'] += 1
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {os.path.basename(file_path)}")
        
        if restore_results['failed_count'] > 0:
            restore_results['success'] = False
        
        return restore_results
    
    def _restore_single_file(self, server_config: Dict, remote_path: str, backup_file_path: Path, file_info: Dict) -> Dict:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª"""
        result = {
            'success': False,
            'remote_path': remote_path,
            'backup_file_path': str(backup_file_path),
            'file_info': file_info,
            'size': 0,
            'checksum': None,
            'error': None
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            backup_checksum = self._calculate_file_checksum(backup_file_path)
            expected_checksum = file_info.get('checksum')
            
            if expected_checksum and backup_checksum != expected_checksum:
                result['error'] = '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç'
                return result
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            remote_dir = os.path.dirname(remote_path)
            if not self._ensure_remote_directory(server_config, remote_dir):
                result['error'] = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'
                return result
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            if self._copy_file_to_server(server_config, backup_file_path, remote_path):
                result['success'] = True
                result['size'] = backup_file_path.stat().st_size
                result['checksum'] = backup_checksum
            else:
                result['error'] = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä'
                
        except Exception as e:
            result['error'] = str(e)
        
        return result
    
    def _copy_file_from_server(self, server_config: Dict, remote_path: str, local_path: Path) -> bool:
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._copy_from_server_with_key(server_config, remote_path, local_path)
        else:
            return self._copy_from_server_with_password(server_config, remote_path, local_path)
    
    def _copy_file_to_server(self, server_config: Dict, local_path: Path, remote_path: str) -> bool:
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._copy_to_server_with_key(server_config, local_path, remote_path)
        else:
            return self._copy_to_server_with_password(server_config, local_path, remote_path)
    
    def _copy_from_server_with_key(self, server_config: Dict, remote_path: str, local_path: Path) -> bool:
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–∞"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ pscp
        pscp_cmd = shutil.which('pscp')
        if pscp_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                "pscp",
                "-i", str(key_path),
                "-batch",
                f"{server_config['user']}@{server_config['host']}:{remote_path}",
                str(local_path)
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                "scp",
                "-i", str(key_path),
                "-o", "StrictHostKeyChecking=no",
                f"{server_config['user']}@{server_config['host']}:{remote_path}",
                str(local_path)
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=60)
            return True
        except:
            return False
    
    def _copy_from_server_with_password(self, server_config: Dict, remote_path: str, local_path: Path) -> bool:
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è"""
        cmd = [
            "scp",
            "-o", "StrictHostKeyChecking=no",
            f"{server_config['user']}@{server_config['host']}:{remote_path}",
            str(local_path)
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=60)
            return True
        except:
            return False
    
    def _copy_to_server_with_key(self, server_config: Dict, local_path: Path, remote_path: str) -> bool:
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–∞"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ pscp
        pscp_cmd = shutil.which('pscp')
        if pscp_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                "pscp",
                "-i", str(key_path),
                "-batch",
                str(local_path),
                f"{server_config['user']}@{server_config['host']}:{remote_path}"
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                "scp",
                "-i", str(key_path),
                "-o", "StrictHostKeyChecking=no",
                str(local_path),
                f"{server_config['user']}@{server_config['host']}:{remote_path}"
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=60)
            return True
        except:
            return False
    
    def _copy_to_server_with_password(self, server_config: Dict, local_path: Path, remote_path: str) -> bool:
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è"""
        cmd = [
            "scp",
            "-o", "StrictHostKeyChecking=no",
            str(local_path),
            f"{server_config['user']}@{server_config['host']}:{remote_path}"
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=60)
            return True
        except:
            return False
    
    def _ensure_remote_directory(self, server_config: Dict, remote_dir: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._ensure_remote_directory_with_key(server_config, remote_dir)
        else:
            return self._ensure_remote_directory_with_password(server_config, remote_dir)
    
    def _ensure_remote_directory_with_key(self, server_config: Dict, remote_dir: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–∞"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        plink_cmd = shutil.which('plink')
        if plink_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                f'mkdir -p "{remote_dir}"'
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                f"{server_config['user']}@{server_config['host']}",
                f'mkdir -p "{remote_dir}"'
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=30)
            return True
        except:
            return False
    
    def _ensure_remote_directory_with_password(self, server_config: Dict, remote_dir: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            f"{server_config['user']}@{server_config['host']}",
            f'mkdir -p "{remote_dir}"'
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=30)
            return True
        except:
            return False
    
    def _verify_restore(self, server_config: Dict, backup_info: Dict, restore_results: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        verification_results = {
            'success': True,
            'files_verified': {},
            'files_failed_verification': {},
            'total_verified': 0,
            'total_failed': 0,
            'verification_errors': []
        }
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
        
        for file_path, restore_info in restore_results.get('files_restored', {}).items():
            print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: {os.path.basename(file_path)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            verification_result = self._verify_remote_file(server_config, file_path, restore_info)
            
            if verification_result['success']:
                verification_results['files_verified'][file_path] = verification_result
                verification_results['total_verified'] += 1
                print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω: {os.path.basename(file_path)}")
            else:
                verification_results['files_failed_verification'][file_path] = verification_result
                verification_results['total_failed'] += 1
                verification_results['success'] = False
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {os.path.basename(file_path)} - {verification_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        return verification_results
    
    def _minimal_verification(self, server_config: Dict, restore_results: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        verification_results = {
            'success': True,
            'files_verified': {},
            'total_verified': 0,
            'minimal_check': True
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        for file_path in restore_results.get('files_restored', {}).keys():
            if self._check_file_exists_on_server(server_config, file_path):
                verification_results['files_verified'][file_path] = {'exists': True}
                verification_results['total_verified'] += 1
            else:
                verification_results['success'] = False
        
        return verification_results
    
    def _verify_remote_file(self, server_config: Dict, file_path: str, restore_info: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        verification_result = {
            'success': False,
            'file_path': file_path,
            'exists': False,
            'size_match': False,
            'permissions_ok': False,
            'error': None
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not self._check_file_exists_on_server(server_config, file_path):
                verification_result['error'] = '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'
                return verification_result
            
            verification_result['exists'] = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            remote_size = self._get_remote_file_size(server_config, file_path)
            expected_size = restore_info.get('size', 0)
            
            if remote_size == expected_size:
                verification_result['size_match'] = True
            else:
                verification_result['error'] = f'–†–∞–∑–º–µ—Ä –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {remote_size} != {expected_size}'
                return verification_result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if self._check_file_permissions(server_config, file_path):
                verification_result['permissions_ok'] = True
            else:
                verification_result['error'] = '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞'
                return verification_result
            
            verification_result['success'] = True
            
        except Exception as e:
            verification_result['error'] = str(e)
        
        return verification_result
    
    def _check_backup_integrity(self, backup_info: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        integrity_results = {
            'success': True,
            'total_files': 0,
            'verified_files': 0,
            'corrupted_files': [],
            'missing_files': []
        }
        
        backup_session_dir = self.backup_dir / self.session_info['backup_session_id']
        files_backed_up = backup_info.get('files_backed_up', {})
        
        integrity_results['total_files'] = len(files_backed_up)
        
        for file_path, file_info in files_backed_up.items():
            backup_file_path = backup_session_dir / file_info['local_path']
            
            if not backup_file_path.exists():
                integrity_results['missing_files'].append(file_path)
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
            actual_checksum = self._calculate_file_checksum(backup_file_path)
            expected_checksum = file_info.get('checksum')
            
            if expected_checksum and actual_checksum != expected_checksum:
                integrity_results['corrupted_files'].append(file_path)
                continue
            
            integrity_results['verified_files'] += 1
        
        if integrity_results['missing_files'] or integrity_results['corrupted_files']:
            integrity_results['success'] = False
        
        return integrity_results
    
    def _check_target_paths(self, server_config: Dict, backup_info: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ü–µ–ª–µ–≤—ã—Ö –ø—É—Ç–µ–π"""
        target_paths_results = {
            'success': True,
            'accessible_paths': [],
            'inaccessible_paths': []
        }
        
        files_backed_up = backup_info.get('files_backed_up', {})
        
        for file_path in files_backed_up.keys():
            target_dir = os.path.dirname(file_path)
            
            if self._check_directory_writable(server_config, target_dir):
                target_paths_results['accessible_paths'].append(target_dir)
            else:
                target_paths_results['inaccessible_paths'].append(target_dir)
        
        if target_paths_results['inaccessible_paths']:
            target_paths_results['success'] = False
        
        return target_paths_results
    
    def _detect_conflicts(self, server_config: Dict, backup_info: Dict) -> List[str]:
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        conflicts = []
        
        files_backed_up = backup_info.get('files_backed_up', {})
        
        for file_path in files_backed_up.keys():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            if self._check_file_exists_on_server(server_config, file_path):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                current_size = self._get_remote_file_size(server_config, file_path)
                backup_size = files_backed_up[file_path].get('size', 0)
                
                if current_size != backup_size:
                    conflicts.append(f"–§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω: {file_path} ({current_size} != {backup_size} –±–∞–π—Ç)")
        
        return conflicts
    
    def _test_server_connection(self, server_config: Dict) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._test_connection_with_key(server_config)
        else:
            return self._test_connection_with_password(server_config)
    
    def _test_connection_with_key(self, server_config: Dict) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        plink_cmd = shutil.which('plink')
        if plink_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                'echo "connection_test"'
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                '-o', 'ConnectTimeout=10',
                f"{server_config['user']}@{server_config['host']}",
                'echo "connection_test"'
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'connection_test' in result.stdout
        except:
            return False
    
    def _test_connection_with_password(self, server_config: Dict) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            '-o', 'ConnectTimeout=10',
            f"{server_config['user']}@{server_config['host']}",
            'echo "connection_test"'
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'connection_test' in result.stdout
        except:
            return False
    
    def _check_file_exists_on_server(self, server_config: Dict, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._check_file_exists_with_key(server_config, file_path)
        else:
            return self._check_file_exists_with_password(server_config, file_path)
    
    def _check_file_exists_with_key(self, server_config: Dict, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–æ–º"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        plink_cmd = shutil.which('plink')
        if plink_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                f'test -f "{file_path}" && echo "exists"'
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                f"{server_config['user']}@{server_config['host']}",
                f'test -f "{file_path}" && echo "exists"'
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'exists' in result.stdout
        except:
            return False
    
    def _check_file_exists_with_password(self, server_config: Dict, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–∞—Ä–æ–ª–µ–º"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            f"{server_config['user']}@{server_config['host']}",
            f'test -f "{file_path}" && echo "exists"'
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'exists' in result.stdout
        except:
            return False
    
    def _get_remote_file_size(self, server_config: Dict, file_path: str) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._get_remote_file_size_with_key(server_config, file_path)
        else:
            return self._get_remote_file_size_with_password(server_config, file_path)
    
    def _get_remote_file_size_with_key(self, server_config: Dict, file_path: str) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–æ–º"""
        key_file = server_config.get('key_file')
        if not key_file:
            return 0
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        plink_cmd = shutil.which('plink')
        if plink_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                f'stat -c%s "{file_path}" 2>/dev/null || echo "0"'
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return 0
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                f"{server_config['user']}@{server_config['host']}",
                f'stat -c%s "{file_path}" 2>/dev/null || echo "0"'
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return int(result.stdout.strip())
        except:
            return 0
    
    def _get_remote_file_size_with_password(self, server_config: Dict, file_path: str) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å –ø–∞—Ä–æ–ª–µ–º"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            f"{server_config['user']}@{server_config['host']}",
            f'stat -c%s "{file_path}" 2>/dev/null || echo "0"'
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return int(result.stdout.strip())
        except:
            return 0
    
    def _check_file_permissions(self, server_config: Dict, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._check_file_permissions_with_key(server_config, file_path)
        else:
            return self._check_file_permissions_with_password(server_config, file_path)
    
    def _check_file_permissions_with_key(self, server_config: Dict, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –∫–ª—é—á–æ–º"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        plink_cmd = shutil.which('plink')
        if plink_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                f'test -r "{file_path}" && echo "readable"'
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                f"{server_config['user']}@{server_config['host']}",
                f'test -r "{file_path}" && echo "readable"'
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'readable' in result.stdout
        except:
            return False
    
    def _check_file_permissions_with_password(self, server_config: Dict, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –ø–∞—Ä–æ–ª–µ–º"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            f"{server_config['user']}@{server_config['host']}",
            f'test -r "{file_path}" && echo "readable"'
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'readable' in result.stdout
        except:
            return False
    
    def _check_directory_writable(self, server_config: Dict, directory_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._check_directory_writable_with_key(server_config, directory_path)
        else:
            return self._check_directory_writable_with_password(server_config, directory_path)
    
    def _check_directory_writable_with_key(self, server_config: Dict, directory_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∫–ª—é—á–æ–º"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        plink_cmd = shutil.which('plink')
        if plink_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                f'test -w "{directory_path}" && echo "writable"'
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                f"{server_config['user']}@{server_config['host']}",
                f'test -w "{directory_path}" && echo "writable"'
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'writable' in result.stdout
        except:
            return False
    
    def _check_directory_writable_with_password(self, server_config: Dict, directory_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ø–∞—Ä–æ–ª–µ–º"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            f"{server_config['user']}@{server_config['host']}",
            f'test -w "{directory_path}" && echo "writable"'
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=15)
            return 'writable' in result.stdout
        except:
            return False
    
    def _get_restore_priority_order(self, file_info: Dict) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏
        file_type = file_info.get('file_type', 'unknown')
        
        if file_type == 'init_file':
            return 1
        elif file_type == 'config_file':
            return 2
        elif file_type in ['template_header', 'template_footer']:
            return 3
        elif file_type == 'php_file':
            return 4
        elif file_type in ['javascript', 'stylesheet']:
            return 5
        else:
            return 6
    
    def _calculate_file_checksum(self, file_path: Path) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É —Ñ–∞–π–ª–∞"""
        hash_md5 = hashlib.md5()
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()
    
    def _save_restore_report(self, restore_results: Dict, verification_results: Dict, recovery_point: Optional[Dict]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        report = {
            'timestamp': self.session_info['timestamp'],
            'session_id': self.session_info['session_id'],
            'restore_type': self.session_info['restore_type'],
            'backup_session_id': self.session_info['backup_session_id'],
            'restore_results': restore_results,
            'verification_results': verification_results,
            'recovery_point': recovery_point,
            'session_info': self.session_info
        }
        
        report_file = self.reports_dir / f"{self.session_info['session_id']}_report.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ –û—Ç—á–µ—Ç –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    def _print_restore_summary(self, restore_results: Dict, verification_results: Dict):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        print("\n" + "="*70)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø")
        print("="*70)
        
        print(f"üéØ –°–µ—Å—Å–∏—è: {self.session_info['session_id']}")
        print(f"üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {self.session_info['backup_session_id']}")
        print(f"üîÑ –¢–∏–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {self.session_info['restore_type']}")
        print(f"üìÖ –í—Ä–µ–º—è: {self.session_info['timestamp']}")
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {restore_results.get('total_files', 0)}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {restore_results.get('successful_count', 0)}")
        print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {restore_results.get('failed_count', 0)}")
        print(f"   üì¶ –†–∞–∑–º–µ—Ä: {restore_results.get('total_size', 0)} –±–∞–π—Ç")
        
        print(f"\n‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print(f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã: {verification_results.get('total_verified', 0)}")
        print(f"   ‚ùå –ù–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É: {verification_results.get('total_failed', 0)}")
        
        if restore_results.get('success') and verification_results.get('success'):
            print(f"\nüéâ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!")
        else:
            print(f"\n‚ö†Ô∏è  –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")
            
            if restore_results.get('files_failed'):
                print(f"\n‚ùå –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
                for file_path, error_info in restore_results['files_failed'].items():
                    error_msg = error_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if isinstance(error_info, dict) else str(error_info)
                    print(f"   - {os.path.basename(file_path)}: {error_msg}")
            
            if verification_results.get('files_failed_verification'):
                print(f"\nüî¥ –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
                for file_path, error_info in verification_results['files_failed_verification'].items():
                    error_msg = error_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    print(f"   - {os.path.basename(file_path)}: {error_msg}")
    
    def list_backups(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        print("üìã –°–ü–ò–°–û–ö –î–û–°–¢–£–ü–ù–´–• –†–ï–ó–ï–†–í–ù–´–• –ö–û–ü–ò–ô")
        print("="*50)
        
        if not self.backup_dir.exists():
            print("‚ùå –ü–∞–ø–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        backup_sessions = []
        for session_dir in self.backup_dir.iterdir():
            if session_dir.is_dir() and session_dir.name.startswith('backup_session_'):
                metadata_file = session_dir / 'backup_metadata.json'
                if metadata_file.exists():
                    try:
                        with open(metadata_file, 'r', encoding='utf-8') as f:
                            metadata = json.load(f)
                        backup_sessions.append({
                            'session_id': metadata.get('session_id', session_dir.name),
                            'timestamp': metadata.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                            'stats': metadata.get('statistics', {}),
                            'path': str(session_dir)
                        })
                    except:
                        backup_sessions.append({
                            'session_id': session_dir.name,
                            'timestamp': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            'stats': {},
                            'path': str(session_dir)
                        })
        
        if not backup_sessions:
            print("‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        backup_sessions.sort(key=lambda x: x['timestamp'], reverse=True)
        
        for session in backup_sessions:
            print(f"\nüì¶ {session['session_id']}")
            print(f"   üìÖ –í—Ä–µ–º—è: {session['timestamp']}")
            print(f"   üìÅ –ü—É—Ç—å: {session['path']}")
            stats = session['stats']
            if stats:
                print(f"   üìä –§–∞–π–ª–æ–≤: {stats.get('total_files', 0)} (—É—Å–ø–µ—à–Ω–æ: {stats.get('successful_count', 0)})")
                print(f"   üíæ –†–∞–∑–º–µ—Ä: {stats.get('total_size', 0)} –±–∞–π—Ç")
    
    def list_recovery_points(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        print("üìã –°–ü–ò–°–û–ö –¢–û–ß–ï–ö –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø")
        print("="*50)
        
        if not self.backup_dir.exists():
            print("‚ùå –ü–∞–ø–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        recovery_points = []
        for session_dir in self.backup_dir.iterdir():
            if session_dir.is_dir() and session_dir.name.startswith('recovery_'):
                metadata_file = session_dir / 'recovery_metadata.json'
                if metadata_file.exists():
                    try:
                        with open(metadata_file, 'r', encoding='utf-8') as f:
                            metadata = json.load(f)
                        recovery_points.append({
                            'recovery_point_id': metadata.get('recovery_point_id', session_dir.name),
                            'timestamp': metadata.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                            'restore_session_id': metadata.get('restore_session_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                            'backup_session_id': metadata.get('backup_session_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                            'files_count': len(metadata.get('files_saved', {})),
                            'path': str(session_dir)
                        })
                    except:
                        recovery_points.append({
                            'recovery_point_id': session_dir.name,
                            'timestamp': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            'restore_session_id': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            'backup_session_id': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            'files_count': 0,
                            'path': str(session_dir)
                        })
        
        if not recovery_points:
            print("‚ùå –¢–æ—á–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        recovery_points.sort(key=lambda x: x['timestamp'], reverse=True)
        
        for rp in recovery_points:
            print(f"\nüìç {rp['recovery_point_id']}")
            print(f"   üìÖ –í—Ä–µ–º—è: {rp['timestamp']}")
            print(f"   üîÑ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {rp['restore_session_id']}")
            print(f"   üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {rp['backup_session_id']}")
            print(f"   üìä –§–∞–π–ª–æ–≤: {rp['files_count']}")
            print(f"   üìÅ –ü—É—Ç—å: {rp['path']}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python enhanced_restore_manager.py full <backup_session_id>")
        print("  python enhanced_restore_manager.py selective <backup_session_id> <file1> [file2] ...")
        print("  python enhanced_restore_manager.py emergency <backup_session_id>")
        print("  python enhanced_restore_manager.py list-backups")
        print("  python enhanced_restore_manager.py list-recovery-points")
        return 1
    
    manager = EnhancedRestoreManager()
    
    command = sys.argv[1].lower()
    
    if command == "full":
        if len(sys.argv) < 3:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID —Å–µ—Å—Å–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            return 1
        
        backup_session_id = sys.argv[2]
        success = manager.full_system_restore(backup_session_id)
        return 0 if success else 1
    
    elif command == "selective":
        if len(sys.argv) < 4:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID —Å–µ—Å—Å–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∏–ª–∏ —Ñ–∞–π–ª—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            return 1
        
        backup_session_id = sys.argv[2]
        files_to_restore = sys.argv[3:]
        success = manager.selective_restore(backup_session_id, files_to_restore)
        return 0 if success else 1
    
    elif command == "emergency":
        if len(sys.argv) < 3:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID —Å–µ—Å—Å–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            return 1
        
        backup_session_id = sys.argv[2]
        success = manager.emergency_restore(backup_session_id)
        return 0 if success else 1
    
    elif command == "list-backups":
        manager.list_backups()
        return 0
    
    elif command == "list-recovery-points":
        manager.list_recovery_points()
        return 0
    
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return 1


if __name__ == "__main__":
    sys.exit(main()) 