#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è JavaScript —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä Bitrix24
–ó–∞–º–µ–Ω—è–µ—Ç copy_js_to_server.cmd –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
"""

import subprocess
import os
import sys
import json
import shutil
from pathlib import Path

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ config.json"""
    config_path = Path(__file__).parent / "config.json"
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

def convert_ppk_to_openssh(ppk_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç .ppk –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç OpenSSH"""
    openssh_path = ppk_path.with_suffix('.key')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
    if openssh_path.exists():
        return str(openssh_path)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ puttygen
    puttygen_cmd = shutil.which('puttygen')
    if not puttygen_cmd:
        print("‚ùå puttygen –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ chocolatey...")
        try:
            subprocess.run(['choco', 'install', 'putty', '-y'], check=True)
            puttygen_cmd = shutil.which('puttygen')
        except:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PuTTY —á–µ—Ä–µ–∑ chocolatey")
            return None
    
    if not puttygen_cmd:
        print("‚ùå puttygen –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PuTTY –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        return None
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á
    try:
        cmd = [puttygen_cmd, str(ppk_path), '-O', 'private-openssh', '-o', str(openssh_path)]
        subprocess.run(cmd, check=True, capture_output=True, text=True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        os.chmod(str(openssh_path), 0o600)
        
        print(f"‚úÖ –ö–ª—é—á –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {openssh_path}")
        return str(openssh_path)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–ª—é—á–∞: {e}")
        return None

def deploy_file(file_path, server_config):
    """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É—è scp –∏–ª–∏ pscp"""
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"üì§ –ö–æ–ø–∏—Ä—É—é {file_path} –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    auth_method = server_config.get('auth_method', 'password')
    
    if auth_method == 'key':
        return deploy_with_key(file_path, server_config)
    else:
        return deploy_with_password(file_path, server_config)

def deploy_with_key(file_path, server_config):
    """–î–µ–ø–ª–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–∞"""
    key_file = server_config.get('key_file')
    if not key_file:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –∫–ª—é—á–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return False
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ, —Ç–∞–∫ –∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
    if os.path.isabs(key_file):
        key_path = Path(key_file)
    else:
        key_path = Path(__file__).parent / key_file
    
    if not key_path.exists():
        print(f"‚ùå –§–∞–π–ª –∫–ª—é—á–∞ {key_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pscp (PuTTY –≤–µ—Ä—Å–∏—è)
    pscp_cmd = shutil.which('pscp')
    if pscp_cmd:
        return deploy_with_pscp(file_path, server_config, str(key_path))
    
    # –ï—Å–ª–∏ pscp –Ω–µ—Ç, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º .ppk –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º scp
    if key_path.suffix.lower() == '.ppk':
        openssh_key = convert_ppk_to_openssh(key_path)
        if not openssh_key:
            return False
        key_path = openssh_key
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π scp —Å –∫–ª—é—á–æ–º
    cmd = [
        "scp", 
        "-i", str(key_path),
        "-o", "StrictHostKeyChecking=no",
        file_path, 
        f"{server_config['user']}@{server_config['host']}:{server_config['path']}"
    ]
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print(f"‚úÖ {file_path} —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {file_path}:")
        print(f"   {e.stderr}")
        return False
    except FileNotFoundError:
        print("‚ùå –ö–æ–º–∞–Ω–¥–∞ scp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω SSH –∫–ª–∏–µ–Ω—Ç.")
        return False

def deploy_with_pscp(file_path, server_config, key_path):
    """–î–µ–ø–ª–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pscp (PuTTY –≤–µ—Ä—Å–∏—è)"""
    cmd = [
        "pscp",
        "-i", key_path,
        "-batch",  # –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        file_path,
        f"{server_config['user']}@{server_config['host']}:{server_config['path']}"
    ]
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print(f"‚úÖ {file_path} —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {file_path}:")
        print(f"   {e.stderr}")
        return False

def deploy_with_password(file_path, server_config):
    """–î–µ–ø–ª–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è"""
    cmd = [
        "scp", 
        file_path, 
        f"{server_config['user']}@{server_config['host']}:{server_config['path']}"
    ]
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print(f"‚úÖ {file_path} —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {file_path}:")
        print(f"   {e.stderr}")
        return False
    except FileNotFoundError:
        print("‚ùå –ö–æ–º–∞–Ω–¥–∞ scp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω SSH –∫–ª–∏–µ–Ω—Ç.")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –¥–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä Bitrix24...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    if not config:
        return 1
    
    server_config = config['server']
    files_to_deploy = config['deployment']['files']
    
    print(f"üéØ –°–µ—Ä–≤–µ—Ä: {server_config['user']}@{server_config['host']}")
    print(f"üìÅ –ü—É—Ç—å: {server_config['path']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    auth_method = server_config.get('auth_method', 'password')
    if auth_method == 'key':
        key_file = server_config.get('key_file', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        print(f"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: –∫–ª—é—á ({key_file})")
    else:
        print(f"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: –ø–∞—Ä–æ–ª—å")
    
    print("-" * 50)
    
    current_dir = Path(__file__).parent
    success_count = 0
    
    for file_name in files_to_deploy:
        file_path = current_dir / file_name
        if deploy_file(str(file_path), server_config):
            success_count += 1
    
    print("-" * 50)
    print(f"‚ú® –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω: {success_count}/{len(files_to_deploy)} —Ñ–∞–π–ª–æ–≤")
    
    if success_count == len(files_to_deploy):
        print("üéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã!")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 