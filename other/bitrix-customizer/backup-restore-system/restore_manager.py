#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Bitrix24
–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
"""

import sys
import json
from pathlib import Path
import subprocess
import time

class SystemRestorer:
    def __init__(self):
        self.project_root = Path(__file__).parent
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞"""
        config_path = self.project_root.parent / "config.json"
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return None
    
    def _execute_remote_command(self, server_config, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._execute_with_key(server_config, command)
        else:
            return self._execute_with_password(server_config, command)
    
    def _execute_with_key(self, server_config, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–∞"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False, "No key file specified"
        
        if Path(key_file).is_absolute():
            key_path = Path(key_file)
        else:
            key_path = self.project_root.parent / key_file
        
        if not key_path.exists():
            return False, f"Key file not found: {key_path}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        import shutil
        plink_cmd = shutil.which('plink')
        if plink_cmd:
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                command
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False, "PPK key requires PuTTY utilities"
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                f"{server_config['user']}@{server_config['host']}",
                command
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=60)
            return True, result.stdout
        except subprocess.CalledProcessError as e:
            return False, e.stderr
        except subprocess.TimeoutExpired:
            return False, "Command timeout"
        except Exception as e:
            return False, str(e)
    
    def _execute_with_password(self, server_config, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            f"{server_config['user']}@{server_config['host']}",
            command
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=60)
            return True, result.stdout
        except subprocess.CalledProcessError as e:
            return False, e.stderr
        except subprocess.TimeoutExpired:
            return False, "Command timeout"
        except Exception as e:
            return False, str(e)
    
    def remove_our_files(self, server_config):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")
        
        files_to_remove = [
            "/home/bitrix/www/local/php_interface/task_completion_blocker.php",
            "/home/bitrix/www/local/php_interface/init.php",
            "/home/bitrix/www/local/templates/bitrix24/assets/js/enhanced_task_modifier.js"
        ]
        
        remove_command = f"""
# –£–¥–∞–ª—è–µ–º –Ω–∞—à–∏ —Ñ–∞–π–ª—ã
echo "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á..."
for file in {' '.join(files_to_remove)}; do
    if [ -f "$file" ]; then
        rm -f "$file"
        echo "‚úÖ –£–¥–∞–ª–µ–Ω: $file"
    else
        echo "‚ÑπÔ∏è –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $file"
    fi
done

# –£–¥–∞–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ JavaScript –∏–∑ —à–∞–±–ª–æ–Ω–∞
echo ""
echo "üîó –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è JavaScript..."
template_file="/home/bitrix/www/local/templates/bitrix24/header.php"
if [ -f "$template_file" ]; then
    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞—à–∏–º JS
    sed -i '/enhanced_task_modifier.js/d' "$template_file"
    echo "‚úÖ JavaScript –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç —à–∞–±–ª–æ–Ω–∞"
else
    echo "‚ÑπÔ∏è –§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $template_file"
fi

echo ""
echo "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞ —É–¥–∞–ª–µ–Ω—ã"
        """
        
        success, output = self._execute_remote_command(server_config, remove_command)
        
        if success:
            print("‚úÖ –§–∞–π–ª—ã –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞ —É–¥–∞–ª–µ–Ω—ã")
            print(output)
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤")
            print(output)
            return False
    
    def restore_original_files(self, server_config):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ backup"""
        print("üì¶ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        # –ò—â–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π backup —Å —Ñ–∞–π–ª–∞–º–∏
        backup_dirs = sorted([d for d in (self.project_root / "backups").iterdir() if d.is_dir()], reverse=True)
        
        restored_files = 0
        
        for backup_dir in backup_dirs:
            backup_info_file = backup_dir / "backup_info.json"
            if not backup_info_file.exists():
                continue
            
            try:
                with open(backup_info_file, 'r', encoding='utf-8') as f:
                    backup_info = json.load(f)
                
                for file_info in backup_info.get('files', []):
                    if file_info.get('status') == 'success':
                        local_backup_file = backup_dir / file_info['local_path']
                        remote_path = file_info['remote_path']
                        
                        if local_backup_file.exists():
                            print(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {remote_path}")
                            
                            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                            restore_command = f"""
# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
mkdir -p "$(dirname "{remote_path}")"

# –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
cat > "{remote_path}" << 'EOF'
$(cat "{local_backup_file}")
EOF

echo "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {remote_path}"
                            """
                            
                            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ backup —Ñ–∞–π–ª–∞
                            with open(local_backup_file, 'r', encoding='utf-8') as f:
                                file_content = f.read()
                            
                            # –ó–∞–º–µ–Ω—è–µ–º placeholder –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                            restore_command = restore_command.replace(f'$(cat "{local_backup_file}")', file_content)
                            
                            success, output = self._execute_remote_command(server_config, restore_command)
                            
                            if success:
                                print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {remote_path}")
                                restored_files += 1
                            else:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {remote_path}")
                                print(output)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è backup: {e}")
                continue
        
        print(f"üì¶ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {restored_files}")
        return restored_files > 0
    
    def verify_restoration(self, server_config):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
        
        check_command = """
echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã ==="
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤:"
our_files=(
    "/home/bitrix/www/local/php_interface/task_completion_blocker.php"
    "/home/bitrix/www/local/php_interface/init.php"
    "/home/bitrix/www/local/templates/bitrix24/assets/js/enhanced_task_modifier.js"
)

for file in "${our_files[@]}"; do
    if [ -f "$file" ]; then
        echo "‚ö†Ô∏è –§–∞–π–ª –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $file"
    else
        echo "‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω: $file"
    fi
done

echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è JavaScript:"
if grep -q "enhanced_task_modifier.js" /home/bitrix/www/local/templates/bitrix24/header.php 2>/dev/null; then
    echo "‚ö†Ô∏è JavaScript –≤—Å–µ –µ—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –≤ —à–∞–±–ª–æ–Ω–µ"
else
    echo "‚úÖ JavaScript –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç —à–∞–±–ª–æ–Ω–∞"
fi

echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫:"
echo "üìÅ /home/bitrix/www/local/php_interface/:"
ls -la /home/bitrix/www/local/php_interface/ 2>/dev/null || echo "–ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

echo ""
echo "üìÅ /home/bitrix/www/bitrix/php_interface/:"
ls -la /home/bitrix/www/bitrix/php_interface/ | head -5

echo ""
echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        """
        
        success, output = self._execute_remote_command(server_config, check_command)
        
        if success:
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            print(output)
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ")
            print(output)
            return False
    
    def full_restore(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        print("üîÑ –ü–û–õ–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ BITRIX24")
        print("=" * 60)
        
        config = self.load_config()
        if not config:
            return False
        
        server_config = config['server']
        print(f"üéØ –°–µ—Ä–≤–µ—Ä: {server_config['user']}@{server_config['host']}")
        print("-" * 60)
        
        steps = [
            ("–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞", self.remove_our_files),
            ("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", self.restore_original_files),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", self.verify_restoration)
        ]
        
        for step_name, step_function in steps:
            print(f"\nüìã {step_name}")
            try:
                if not step_function(server_config):
                    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: {step_name}")
                    return False
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç—Ç–∞–ø–µ {step_name}: {e}")
                return False
        
        print("\n" + "=" * 60)
        print("üéâ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ Bitrix24 –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞ —É–¥–∞–ª–µ–Ω—ã")
        print("‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å—á–µ–∑–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ –≤ Bitrix24.")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python restore_manager.py list          - —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
        print("  python restore_manager.py restore <name> - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        print("  python restore_manager.py full          - –ø–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
        return 1
    
    restorer = SystemRestorer()
    
    command = sys.argv[1].lower()
    
    if command == "list":
        # –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ backup_manager)
        from backup_manager import BitrixBackupManager
        backup_manager = BitrixBackupManager()
        backup_manager.list_backups()
        return 0
    elif command == "restore" and len(sys.argv) > 2:
        backup_name = sys.argv[2]
        print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_name}")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        print("‚ÑπÔ∏è  –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")
        return 0
    elif command == "full":
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç –í–°–ï —Ñ–∞–π–ª—ã –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á!")
        print("‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞.")
        print()
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        while True:
            confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ? (yes/no): ").lower().strip()
            if confirm in ['yes', 'y', '–¥–∞']:
                break
            elif confirm in ['no', 'n', '–Ω–µ—Ç']:
                print("‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return 1
            else:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'yes' –∏–ª–∏ 'no'")
        
        print("\nüîÑ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ—Å–æ–∑–Ω–∞–Ω–∏—è
        
        success = restorer.full_restore()
        return 0 if success else 1
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 