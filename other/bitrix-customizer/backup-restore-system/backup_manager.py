#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ Bitrix24
–ø–µ—Ä–µ–¥ –∏—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
"""

import os
import sys
import json
import shutil
import subprocess
import datetime
from pathlib import Path

class BitrixBackupManager:
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.backup_dir = self.project_root / "backups"
        self.config_file = self.project_root.parent / "config.json"
        self.backup_list = [
            # –§–∞–π–ª—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            {
                "remote_path": "/home/bitrix/www/local/php_interface/init.php",
                "local_path": "local_php_interface_init.php",
                "description": "–§–∞–π–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π"
            },
            {
                "remote_path": "/home/bitrix/www/bitrix/php_interface/init.php", 
                "local_path": "bitrix_php_interface_init.php",
                "description": "–°–∏—Å—Ç–µ–º–Ω—ã–π —Ñ–∞–π–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bitrix24"
            },
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º header.php –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
            {
                "remote_path": "/home/bitrix/www/local/templates/bitrix24/header.php",
                "local_path": "local_templates_bitrix24_header.php",
                "description": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ Bitrix24",
                "required": False  # –§–∞–π–ª –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
            },
            {
                "remote_path": "/home/bitrix/www/local/templates/bitrix24/footer.php",
                "local_path": "local_templates_bitrix24_footer.php",
                "description": "–ü–æ–¥–≤–∞–ª –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ Bitrix24",
                "required": False  # –§–∞–π–ª –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
            },
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
            {
                "remote_path": "/home/bitrix/www/.settings.php",
                "local_path": "root_settings.php",
                "description": "–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Bitrix24",
                "required": False
            },
            {
                "remote_path": "/home/bitrix/www/bitrix/.settings.php",
                "local_path": "bitrix_settings.php",
                "description": "–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Bitrix24",
                "required": False
            }
        ]
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return None
    
    def load_inspection_report(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤"""
        reports_dir = self.project_root.parent / "inspection-system" / "reports"
        if not reports_dir.exists():
            print("‚ÑπÔ∏è  –û—Ç—á–µ—Ç –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤")
            return None
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
        json_files = list(reports_dir.glob("bitrix_inspection_report_*.json"))
        if not json_files:
            print("‚ÑπÔ∏è  –û—Ç—á–µ—Ç –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤")
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
        latest_report = max(json_files, key=lambda x: x.name)
        
        try:
            with open(latest_report, 'r', encoding='utf-8') as f:
                report = json.load(f)
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω –æ—Ç—á–µ—Ç –∏–Ω—Å–ø–µ–∫—Ü–∏–∏: {latest_report.name}")
            return report
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏: {e}")
            return None
    
    def update_backup_list_from_report(self, report):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞"""
        if not report:
            return
        
        customization_files = report.get('customization_files', {})
        if not customization_files:
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞
        new_backup_list = []
        
        for file_path, file_info in customization_files.items():
            # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
            if file_info.get('exists') and file_info.get('type') in ['init_file', 'db_config']:
                local_filename = file_path.replace('/', '_').replace('\\', '_')
                new_backup_list.append({
                    "remote_path": file_info['full_path'],
                    "local_path": local_filename,
                    "description": file_info.get('purpose', '–§–∞–π–ª –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏'),
                    "file_type": file_info.get('type'),
                    "size": file_info.get('size', 0)
                })
        
        if new_backup_list:
            print(f"üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—á–µ—Ç–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏: {len(new_backup_list)} —Ñ–∞–π–ª–æ–≤")
            self.backup_list = new_backup_list
        else:
            print("‚ÑπÔ∏è  –í –æ—Ç—á–µ—Ç–µ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def analyze_files_for_backup(self, report):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ –æ—Ç—á–µ—Ç–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–ª–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not report:
            return
        
        customization_files = report.get('customization_files', {})
        if not customization_files:
            return
        
        print("\nüìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("-" * 50)
        
        existing_files = []
        missing_files = []
        
        for file_path, file_info in customization_files.items():
            if file_info.get('type') in ['init_file', 'db_config']:
                if file_info.get('exists'):
                    existing_files.append({
                        'path': file_path,
                        'size': file_info.get('size', 0),
                        'purpose': file_info.get('purpose', ''),
                        'type': file_info.get('type')
                    })
                else:
                    missing_files.append({
                        'path': file_path,
                        'purpose': file_info.get('purpose', ''),
                        'can_create': file_info.get('can_create', {}).get('can_create', False)
                    })
        
        if existing_files:
            print(f"‚úÖ –§–∞–π–ª—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ({len(existing_files)}):")
            for file_info in existing_files:
                size_str = f"({file_info['size']} –±–∞–π—Ç)" if file_info['size'] > 0 else ""
                print(f"   üìÑ {file_info['path']} {size_str}")
                print(f"      {file_info['purpose']}")
        
        if missing_files:
            print(f"\n‚ùå –§–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ({len(missing_files)}):")
            for file_info in missing_files:
                create_status = "–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å" if file_info['can_create'] else "–Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å"
                print(f"   üìù {file_info['path']} ({create_status})")
                print(f"      {file_info['purpose']}")
        
        print("-" * 50)
    
    def create_backup_directory(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_session_dir = self.backup_dir / f"backup_{timestamp}"
        backup_session_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        backup_info = {
            "timestamp": datetime.datetime.now().isoformat(),
            "files": [],
            "server_info": None
        }
        
        return backup_session_dir, backup_info
    
    def backup_file_from_server(self, server_config, remote_path, local_path):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._backup_with_key(server_config, remote_path, local_path)
        else:
            return self._backup_with_password(server_config, remote_path, local_path)
    
    def _backup_with_key(self, server_config, remote_path, local_path):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–∞"""
        key_file = server_config.get('key_file')
        if not key_file:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –∫–ª—é—á–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ, —Ç–∞–∫ –∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root.parent / key_file
        
        if not key_path.exists():
            print(f"‚ùå –§–∞–π–ª –∫–ª—é—á–∞ {key_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ pscp
        pscp_cmd = shutil.which('pscp')
        if pscp_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                "pscp",
                "-i", str(key_path),
                "-batch",
                f"{server_config['user']}@{server_config['host']}:{remote_path}",
                str(local_path)
            ]
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º scp
            if key_path.suffix.lower() == '.ppk':
                print("‚ùå .ppk –∫–ª—é—á —Ç—Ä–µ–±—É–µ—Ç PuTTY —É—Ç–∏–ª–∏—Ç—ã (pscp)")
                return False
            
            cmd = [
                "scp",
                "-i", str(key_path),
                "-o", "StrictHostKeyChecking=no",
                f"{server_config['user']}@{server_config['host']}:{remote_path}",
                str(local_path)
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True)
            return True
        except subprocess.CalledProcessError as e:
            # –§–∞–π–ª –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            if "No such file" in e.stderr:
                print(f"‚ö†Ô∏è  –§–∞–π–ª {remote_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω)")
                return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {remote_path}: {e.stderr}")
                return False
        except FileNotFoundError:
            print("‚ùå –ö–æ–º–∞–Ω–¥–∞ scp/pscp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
    
    def _backup_with_password(self, server_config, remote_path, local_path):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è"""
        cmd = [
            "scp",
            f"{server_config['user']}@{server_config['host']}:{remote_path}",
            str(local_path)
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True)
            return True
        except subprocess.CalledProcessError as e:
            if "No such file" in e.stderr:
                print(f"‚ö†Ô∏è  –§–∞–π–ª {remote_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω)")
                return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {remote_path}: {e.stderr}")
                return False
        except FileNotFoundError:
            print("‚ùå –ö–æ–º–∞–Ω–¥–∞ scp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ Bitrix24")
        print("=" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = self.load_config()
        if not config:
            return False
        
        server_config = config['server']
        print(f"üéØ –°–µ—Ä–≤–µ—Ä: {server_config['user']}@{server_config['host']}")
        print("-" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∏–Ω—Å–ø–µ–∫—Ü–∏–∏
        inspection_report = self.load_inspection_report()
        if inspection_report:
            self.analyze_files_for_backup(inspection_report)
            self.update_backup_list_from_report(inspection_report)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        backup_session_dir, backup_info = self.create_backup_directory()
        backup_info['server_info'] = {
            'host': server_config['host'],
            'user': server_config['user'],
            'auth_method': server_config.get('auth_method', 'password')
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á–µ—Ç–µ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏
        if inspection_report:
            backup_info['inspection_report'] = {
                'timestamp': inspection_report.get('timestamp'),
                'hostname': inspection_report.get('hostname'),
                'bitrix_path': inspection_report.get('bitrix_info', {}).get('main_path')
            }
        
        print(f"üìÅ –ü–∞–ø–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_session_dir}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        if not self.backup_list:
            print("\n‚ö†Ô∏è  –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            print("‚ÑπÔ∏è  –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª—ã init.php –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            print("‚ÑπÔ∏è  –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É—Å—Ç–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            info_file = backup_session_dir / "backup_info.json"
            try:
                with open(info_file, 'w', encoding='utf-8') as f:
                    json.dump(backup_info, f, indent=2, ensure_ascii=False)
                print(f"üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {info_file}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            
            return False
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        successful_backups = 0
        failed_backups = 0
        
        for file_info in self.backup_list:
            remote_path = file_info['remote_path']
            local_filename = file_info['local_path']
            local_path = backup_session_dir / local_filename
            is_required = file_info.get('required', True)
            
            print(f"\nüì• –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {remote_path}")
            
            if self.backup_file_from_server(server_config, remote_path, local_path):
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {local_filename}")
                backup_info['files'].append({
                    'remote_path': remote_path,
                    'local_path': local_filename,
                    'description': file_info['description'],
                    'file_type': file_info.get('file_type'),
                    'size': file_info.get('size', 0),
                    'status': 'success',
                    'required': is_required
                })
                successful_backups += 1
            else:
                status_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å" if is_required else "‚ö†Ô∏è  –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)"
                print(f"{status_text}: {remote_path}")
                backup_info['files'].append({
                    'remote_path': remote_path,
                    'local_path': local_filename,
                    'description': file_info['description'],
                    'file_type': file_info.get('file_type'),
                    'size': file_info.get('size', 0),
                    'status': 'failed',
                    'required': is_required
                })
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ failed_backups —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                if is_required:
                    failed_backups += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        info_file = backup_session_dir / "backup_info.json"
        with open(info_file, 'w', encoding='utf-8') as f:
            json.dump(backup_info, f, indent=2, ensure_ascii=False)
        
        print(f"\n" + "=" * 60)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã: {successful_backups} —Ñ–∞–π–ª–æ–≤")
        print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: {failed_backups} —Ñ–∞–π–ª–æ–≤")
        print(f"   ‚ö†Ô∏è  –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã: {len(self.backup_list) - successful_backups - failed_backups}")
        print(f"   üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {info_file}")
        print(f"   üìÅ –ü–∞–ø–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_session_dir}")
        
        # –£—Å–ø–µ—à–Ω—ã–º —Å—á–∏—Ç–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        return failed_backups == 0
    
    def restore_backup(self, backup_session_name):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        backup_session_dir = self.backup_dir / backup_session_name
        
        if not backup_session_dir.exists():
            print(f"‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è {backup_session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        info_file = backup_session_dir / "backup_info.json"
        if not info_file.exists():
            print(f"‚ùå –§–∞–π–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        with open(info_file, 'r', encoding='utf-8') as f:
            backup_info = json.load(f)
        
        print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_session_name}")
        print(f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {backup_info['timestamp']}")
        print("-" * 60)
        
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        for file_info in backup_info['files']:
            if file_info['status'] == 'success':
                print(f"‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {file_info['remote_path']}")
            else:
                print(f"‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {file_info['remote_path']}")
        
        return True
    
    def list_backups(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        if not self.backup_dir.exists():
            print("‚ùå –ü–∞–ø–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        backup_dirs = [d for d in self.backup_dir.iterdir() if d.is_dir() and d.name.startswith('backup_')]
        
        if not backup_dirs:
            print("‚ÑπÔ∏è  –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print("üìã –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:")
        print("-" * 60)
        
        for backup_dir in sorted(backup_dirs):
            info_file = backup_dir / "backup_info.json"
            if info_file.exists():
                with open(info_file, 'r', encoding='utf-8') as f:
                    backup_info = json.load(f)
                
                successful_files = sum(1 for f in backup_info['files'] if f['status'] == 'success')
                total_files = len(backup_info['files'])
                
                print(f"üì¶ {backup_dir.name}")
                print(f"   üìÖ –î–∞—Ç–∞: {backup_info['timestamp']}")
                print(f"   üìä –§–∞–π–ª–æ–≤: {successful_files}/{total_files}")
                print(f"   üñ•Ô∏è  –°–µ—Ä–≤–µ—Ä: {backup_info.get('server_info', {}).get('host', 'unknown')}")
                print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python backup_manager.py create    - —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
        print("  python backup_manager.py list      - —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
        print("  python backup_manager.py restore <name> - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
        return 1
    
    manager = BitrixBackupManager()
    
    command = sys.argv[1].lower()
    
    if command == "create":
        success = manager.create_backup()
        return 0 if success else 1
    elif command == "list":
        manager.list_backups()
        return 0
    elif command == "restore" and len(sys.argv) > 2:
        backup_name = sys.argv[2]
        success = manager.restore_backup(backup_name)
        return 0 if success else 1
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 