#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID –ø–æ–ª–µ–π –≤ JavaScript –∫–æ–¥–µ
–Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.json
"""

import json
import re
from pathlib import Path

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ config.json"""
    config_path = Path(__file__).parent / "config.json"
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

def update_js_config(js_file_path, config):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ JavaScript —Ñ–∞–π–ª–µ"""
    if not js_file_path.exists():
        print(f"‚ùå JavaScript —Ñ–∞–π–ª {js_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π JS —Ñ–∞–π–ª
    with open(js_file_path, 'r', encoding='utf-8') as f:
        js_content = f.read()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    yes_id = config['bitrix_field_config']['UF_RESULT_ANSWER']['values']['yes']
    no_id = config['bitrix_field_config']['UF_RESULT_ANSWER']['values']['no']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    pattern = r"data: \{ 'UF_RESULT_ANSWER': answer \? \d+ : \d+ \}"
    replacement = f"data: {{ 'UF_RESULT_ANSWER': answer ? {yes_id} : {no_id} }}"
    
    updated_content = re.sub(pattern, replacement, js_content)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å ID
    comment_pattern = r"// UF_RESULT_ANSWER - –ø–æ–ª–µ —Ç–∏–ø–∞ \"–°–ø–∏—Å–æ–∫\": ID \d+ = \"–î–ê\", ID \d+ = \"–ù–ï–¢\""
    comment_replacement = f"// UF_RESULT_ANSWER - –ø–æ–ª–µ —Ç–∏–ø–∞ \"–°–ø–∏—Å–æ–∫\": ID {yes_id} = \"–î–ê\", ID {no_id} = \"–ù–ï–¢\""
    
    updated_content = re.sub(comment_pattern, comment_replacement, updated_content)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if updated_content == js_content:
        print("‚ÑπÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ JavaScript —Ñ–∞–π–ª–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞")
        return True
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(js_file_path, 'w', encoding='utf-8') as f:
        f.write(updated_content)
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ {js_file_path.name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    print(f"   –î–ê: {yes_id}")
    print(f"   –ù–ï–¢: {no_id}")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ JavaScript —Ñ–∞–π–ª–µ...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    if not config:
        return 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º JS —Ñ–∞–π–ª
    js_file_path = Path(__file__).parent / "global_task_modifier.js"
    if update_js_config(js_file_path, config):
        print("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return 0
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
        return 1

if __name__ == "__main__":
    exit(main()) 