#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä Bitrix24
"""

import os
import sys
import json
import shutil
import subprocess
import datetime
from pathlib import Path

class TaskBlockerDeployer:
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.modifications_dir = self.project_root / "modifications"
        self.config_file = self.project_root.parent / "config.json"
        self.deployment_map = [
            {
                "local_file": "task_completion_blocker.php",
                "remote_path": "/home/bitrix/www/local/php_interface/task_completion_blocker.php",
                "description": "PHP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á"
            },
            {
                "local_file": "init.php",
                "remote_path": "/home/bitrix/www/local/php_interface/init.php",
                "description": "–§–∞–π–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π",
                "backup_required": True
            },
            {
                "local_file": "enhanced_task_modifier.js",
                "remote_path": "/home/bitrix/www/local/templates/bitrix24/assets/js/enhanced_task_modifier.js",
                "description": "JavaScript –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–¥–∞—á"
            },
            {
                "local_file": "task_modifier_connector.php",
                "remote_path": "/home/bitrix/www/local/templates/bitrix24/task_modifier_connector.php",
                "description": "–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è JavaScript –∫ —à–∞–±–ª–æ–Ω—É"
            }
        ]
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return None
    
    def create_remote_directory(self, server_config, remote_path):
        """–°–æ–∑–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        remote_dir = os.path.dirname(remote_path)
        command = f"mkdir -p {remote_dir}"
        
        return self._execute_remote_command(server_config, command)
    
    def _execute_remote_command(self, server_config, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._execute_with_key(server_config, command)
        else:
            return self._execute_with_password(server_config, command)
    
    def _execute_with_key(self, server_config, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–∞"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root.parent / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        plink_cmd = shutil.which('plink')
        if plink_cmd:
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                command
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                f"{server_config['user']}@{server_config['host']}",
                command
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=30)
            return True
        except:
            return False
    
    def _execute_with_password(self, server_config, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            f"{server_config['user']}@{server_config['host']}",
            command
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=30)
            return True
        except:
            return False
    
    def deploy_file(self, server_config, file_info):
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        local_file = self.modifications_dir / file_info['local_file']
        remote_path = file_info['remote_path']
        
        if not local_file.exists():
            print(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {local_file}")
            return False
        
        print(f"üì§ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: {file_info['local_file']} -> {remote_path}")
        
        # –°–æ–∑–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if not self.create_remote_directory(server_config, remote_path):
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è {remote_path}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            success = self._deploy_with_key(server_config, local_file, remote_path)
        else:
            success = self._deploy_with_password(server_config, local_file, remote_path)
        
        if success:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç: {file_info['local_file']}")
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å: {file_info['local_file']}")
            return False
    
    def _deploy_with_key(self, server_config, local_file, remote_path):
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–∞"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root.parent / key_file
        
        if not key_path.exists():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ pscp
        pscp_cmd = shutil.which('pscp')
        if pscp_cmd and key_path.suffix.lower() == '.ppk':
            cmd = [
                "pscp",
                "-i", str(key_path),
                "-batch",
                str(local_file),
                f"{server_config['user']}@{server_config['host']}:{remote_path}"
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False
            
            cmd = [
                "scp",
                "-i", str(key_path),
                "-o", "StrictHostKeyChecking=no",
                str(local_file),
                f"{server_config['user']}@{server_config['host']}:{remote_path}"
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True)
            return True
        except subprocess.CalledProcessError as e:
            print(f"   –û—à–∏–±–∫–∞: {e.stderr}")
            return False
        except FileNotFoundError:
            print("   –û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥–∞ scp/pscp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
    
    def _deploy_with_password(self, server_config, local_file, remote_path):
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è"""
        cmd = [
            "scp",
            str(local_file),
            f"{server_config['user']}@{server_config['host']}:{remote_path}"
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True)
            return True
        except subprocess.CalledProcessError as e:
            print(f"   –û—à–∏–±–∫–∞: {e.stderr}")
            return False
        except FileNotFoundError:
            print("   –û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥–∞ scp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
    
    def set_file_permissions(self, server_config, remote_path, permissions='644'):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —Ñ–∞–π–ª"""
        command = f"chmod {permissions} {remote_path}"
        
        if self._execute_remote_command(server_config, command):
            print(f"‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {remote_path} ({permissions})")
            return True
        else:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {remote_path}")
            return False
    
    def deploy_all(self):
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        print("üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä Bitrix24")
        print("=" * 70)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = self.load_config()
        if not config:
            return False
        
        server_config = config['server']
        print(f"üéØ –°–µ—Ä–≤–µ—Ä: {server_config['user']}@{server_config['host']}")
        print(f"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {server_config.get('auth_method', 'password')}")
        print("-" * 70)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        backup_script = self.project_root.parent / "backup-restore-system" / "backup_manager.py"
        if backup_script.exists():
            try:
                subprocess.run([sys.executable, str(backup_script), "create"], check=True)
                print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            except subprocess.CalledProcessError:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
        
        # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        successful_deployments = 0
        failed_deployments = 0
        
        for file_info in self.deployment_map:
            print(f"\nüìÅ {file_info['description']}")
            
            if self.deploy_file(server_config, file_info):
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                if file_info['local_file'].endswith('.php'):
                    self.set_file_permissions(server_config, file_info['remote_path'], '644')
                elif file_info['local_file'].endswith('.js'):
                    self.set_file_permissions(server_config, file_info['remote_path'], '644')
                
                successful_deployments += 1
            else:
                failed_deployments += 1
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º JavaScript —Ñ–∞–π–ª –∫ —à–∞–±–ª–æ–Ω—É
        if successful_deployments > 0:
            print(f"\nüîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ JavaScript –∫ —à–∞–±–ª–æ–Ω—É...")
            js_success = self.inject_javascript_to_template(server_config)
            if not js_success:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å JavaScript –∫ —à–∞–±–ª–æ–Ω—É")
                print("üí° –§–∞–π–ª—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã, –Ω–æ JavaScript –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤—Ä—É—á–Ω—É—é")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\n" + "=" * 70)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ: {successful_deployments} —Ñ–∞–π–ª–æ–≤")
        print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å: {failed_deployments} —Ñ–∞–π–ª–æ–≤")
        
        if successful_deployments > 0:
            print(f"\nüéâ –ë–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!")
            print(f"üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print(f"   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Bitrix24")
            print(f"   2. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –ø–æ–ª–µ–º '–û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –î–∞'")
            print(f"   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
            print(f"   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ /bitrix/logs/")
        else:
            print(f"\n‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        
        return successful_deployments > 0
    
    def inject_javascript_to_template(self, server_config):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç JavaScript —Ñ–∞–π–ª –∫ —à–∞–±–ª–æ–Ω—É
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
        """
        print("üîó –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ JavaScript –∫ —à–∞–±–ª–æ–Ω—É...")
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É header.php
        header_path = "/home/bitrix/www/local/templates/bitrix24/header.php"
        connector_path = "/home/bitrix/www/local/templates/bitrix24/task_modifier_connector.php"
        
        # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é header.php –î–û –∏–∑–º–µ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        if self._check_file_exists(server_config, header_path):
            print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ header.php...")
            backup_success = self._backup_header_file(server_config, header_path)
            
            if not backup_success:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é header.php")
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ header.php
        header_exists = self._check_file_exists(server_config, header_path)
        
        if header_exists:
            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
            if self._is_connector_already_included(server_config, header_path):
                print("‚ÑπÔ∏è  JavaScript –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —à–∞–±–ª–æ–Ω—É")
                return True
            
            # –®–∞–≥ 4: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ñ–∞–π–ª—É
            return self._add_connector_to_existing_header(server_config, header_path, connector_path)
        else:
            # –®–∞–≥ 5: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π header.php —Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–º
            return self._create_new_header_with_connector(server_config, header_path, connector_path)
    
    def _backup_header_file(self, server_config, header_path):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é header.php"""
        backup_path = header_path + ".backup_" + datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        
        copy_command = f"cp '{header_path}' '{backup_path}' 2>/dev/null || true"
        
        success, output = self._execute_remote_command_with_output(server_config, copy_command)
        
        if success:
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
            return True
        else:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {header_path}")
            return False
    
    def _check_file_exists(self, server_config, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        check_command = f"test -f '{file_path}'"
        return self._execute_remote_command(server_config, check_command)
    
    def _is_connector_already_included(self, server_config, header_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä"""
        check_command = f"grep -q 'task_modifier_connector.php' '{header_path}' 2>/dev/null"
        return self._execute_remote_command(server_config, check_command)
    
    def _add_connector_to_existing_header(self, server_config, header_path, connector_path):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É header.php"""
        add_connector_command = f"""
# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É header.php
echo '' >> '{header_path}'
echo '<?php' >> '{header_path}'
echo '// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä' >> '{header_path}'
echo 'require_once(__DIR__ . "/task_modifier_connector.php");' >> '{header_path}'
echo '?>' >> '{header_path}'
"""
        
        success, output = self._execute_remote_command_with_output(server_config, add_connector_command)
        
        if success:
            print("‚úÖ –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É header.php")
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä: {output}")
            return False
    
    def _create_new_header_with_connector(self, server_config, header_path, connector_path):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π header.php —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        create_dir_command = f"mkdir -p '{os.path.dirname(header_path)}'"
        self._execute_remote_command(server_config, create_dir_command)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π header.php
        create_header_command = f"""
cat > '{header_path}' << 'EOF'
<?php
/**
 * –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ Bitrix24
 * –°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞—á
 */

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
require_once(__DIR__ . "/task_modifier_connector.php");
?>
EOF
"""
        
        success, output = self._execute_remote_command_with_output(server_config, create_header_command)
        
        if success:
            print("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π header.php —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞")
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å header.php: {output}")
            return False
    
    def _execute_remote_command_with_output(self, server_config, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤—ã–≤–æ–¥"""
        auth_method = server_config.get('auth_method', 'password')
        
        if auth_method == 'key':
            return self._execute_with_key_and_output(server_config, command)
        else:
            return self._execute_with_password_and_output(server_config, command)
    
    def _execute_with_key_and_output(self, server_config, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –∫–ª—é—á–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        key_file = server_config.get('key_file')
        if not key_file:
            return False, "No key file specified"
        
        if os.path.isabs(key_file):
            key_path = Path(key_file)
        else:
            key_path = self.project_root.parent / key_file
        
        if not key_path.exists():
            return False, f"Key file not found: {key_path}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ plink
        plink_cmd = shutil.which('plink')
        if plink_cmd:
            cmd = [
                'plink',
                '-i', str(key_path),
                '-batch',
                f"{server_config['user']}@{server_config['host']}",
                command
            ]
        else:
            if key_path.suffix.lower() == '.ppk':
                return False, "PPK key requires PuTTY utilities"
            
            cmd = [
                'ssh',
                '-i', str(key_path),
                '-o', 'StrictHostKeyChecking=no',
                f"{server_config['user']}@{server_config['host']}",
                command
            ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=30)
            return True, result.stdout
        except subprocess.CalledProcessError as e:
            return False, e.stderr
        except subprocess.TimeoutExpired:
            return False, "Command timeout"
        except Exception as e:
            return False, str(e)
    
    def _execute_with_password_and_output(self, server_config, command):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –ø–∞—Ä–æ–ª–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        cmd = [
            'ssh',
            '-o', 'StrictHostKeyChecking=no',
            f"{server_config['user']}@{server_config['host']}",
            command
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, timeout=30)
            return True, result.stdout
        except subprocess.CalledProcessError as e:
            return False, e.stderr
        except subprocess.TimeoutExpired:
            return False, "Command timeout"
        except Exception as e:
            return False, str(e)
    
    def test_deployment(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
        
        config = self.load_config()
        if not config:
            return False
        
        server_config = config['server']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤
        test_commands = [
            "ls -la /home/bitrix/www/local/php_interface/task_completion_blocker.php",
            "ls -la /home/bitrix/www/local/php_interface/init.php",
            "ls -la /home/bitrix/www/local/templates/bitrix24/assets/js/enhanced_task_modifier.js"
        ]
        
        print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤:")
        for cmd in test_commands:
            if self._execute_remote_command(server_config, cmd):
                print(f"   ‚úÖ {cmd.split('/')[-1]}")
            else:
                print(f"   ‚ùå {cmd.split('/')[-1]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å PHP
        php_check = "php -l /home/bitrix/www/local/php_interface/task_completion_blocker.php"
        if self._execute_remote_command(server_config, php_check):
            print("   ‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å PHP –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        else:
            print("   ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º PHP")
        
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python deploy_task_blocker.py deploy  - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã")
        print("  python deploy_task_blocker.py test    - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ")
        return 1
    
    deployer = TaskBlockerDeployer()
    
    command = sys.argv[1].lower()
    
    if command == "deploy":
        success = deployer.deploy_all()
        return 0 if success else 1
    elif command == "test":
        success = deployer.test_deployment()
        return 0 if success else 1
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 