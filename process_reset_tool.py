#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ Process_1d4oa6g46
–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞

–≠—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
1. –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π RabbitMQ
2. –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞ Process_1d4oa6g46
3. –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ process_config_RnS.yaml

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞.
"""

import os
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
script_dir = Path(__file__).parent
sys.path.insert(0, str(script_dir / "universal-worker.py" / "tools"))
sys.path.insert(0, str(script_dir / "universal-worker.py"))

try:
    # –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    from queue_reader import QueueReader
    from process_manager import CamundaProcessManager  
    from start_process import CamundaProcessStarter, load_config_from_yaml
    from rabbitmq_client import RabbitMQClient
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)


class ProcessResetTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±—Ä–æ—Å–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    
    def __init__(self, process_key: str = "Process_1d4oa6g46"):
        self.process_key = process_key
        self.config_file = "universal-worker.py/tools/process_config_RnS.yaml"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.queue_reader = QueueReader()
        self.process_manager = CamundaProcessManager()
        self.process_starter = CamundaProcessStarter()
        self.rabbitmq_client = RabbitMQClient()
    
    def print_header(self, title: str):
        """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —ç—Ç–∞–ø–∞"""
        print("\n" + "="*80)
        print(f"üîÑ {title}")
        print("="*80)
    
    def step1_clear_rabbitmq_queues(self) -> bool:
        """–≠—Ç–∞–ø 1: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π RabbitMQ"""
        self.print_header("–≠–¢–ê–ü 1: –û–ß–ò–°–¢–ö–ê –û–ß–ï–†–ï–î–ï–ô RABBITMQ")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç
            if not self.rabbitmq_client.connect():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RabbitMQ")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π
            queues_info = self.rabbitmq_client.get_all_queues_info()
            
            if not queues_info:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π")
                return False
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ—á–µ—Ä–µ–¥–µ–π: {len(queues_info)}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—á–µ—Ä–µ–¥–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            queues_to_clear = []
            for queue_name, info in queues_info.items():
                msg_count = info.get("message_count", 0)
                if msg_count > 0:
                    queues_to_clear.append((queue_name, msg_count))
                    print(f"   üì¨ {queue_name}: {msg_count:,} —Å–æ–æ–±—â–µ–Ω–∏–π")
                else:
                    print(f"   üì≠ {queue_name}: –ø—É—Å—Ç–∞—è")
            
            if not queues_to_clear:
                print("‚úÖ –í—Å–µ –æ—á–µ—Ä–µ–¥–∏ —É–∂–µ –ø—É—Å—Ç—ã–µ")
                return True
            
            print(f"\nüóëÔ∏è –û—á–∏—Å—Ç–∫–∞ {len(queues_to_clear)} –æ—á–µ—Ä–µ–¥–µ–π —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏...")
            
            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ QueueReader —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π
            cleared_count = 0
            for queue_name, msg_count in queues_to_clear:
                print(f"   üîÑ –û—á–∏—Å—Ç–∫–∞ {queue_name} ({msg_count:,} —Å–æ–æ–±—â–µ–Ω–∏–π)...")
                
                if self.queue_reader.clear_queue(queue_name, force=True):
                    cleared_count += 1
                    print(f"   ‚úÖ {queue_name} –æ—á–∏—â–µ–Ω–∞")
                else:
                    print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å {queue_name}")
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π:")
            print(f"   –û—á–∏—â–µ–Ω–æ: {cleared_count} –∏–∑ {len(queues_to_clear)}")
            
            self.rabbitmq_client.disconnect()
            return cleared_count == len(queues_to_clear)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—á–µ—Ä–µ–¥–µ–π: {e}")
            return False
    
    def step2_delete_process_instances(self) -> bool:
        """–≠—Ç–∞–ø 2: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        self.print_header(f"–≠–¢–ê–ü 2: –£–î–ê–õ–ï–ù–ò–ï –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í –ü–†–û–¶–ï–°–°–ê {self.process_key}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            definition = self.process_manager.get_process_definition_by_key(self.process_key)
            if not definition:
                print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —Å –∫–ª—é—á–æ–º '{self.process_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, —Ç–∞–∫ –∫–∞–∫ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
            
            print(f"üìã –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–¥–µ–Ω: {definition.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–≤–µ—Ä—Å–∏—è {definition.get('version')})")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
            instances = self.process_manager.get_process_instances_by_key(self.process_key)
            external_tasks = self.process_manager.get_external_tasks_by_process_key(self.process_key)
            
            print(f"üöÄ –ê–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {len(instances)}")
            print(f"üîß External Tasks: {len(external_tasks)}")
            
            if not instances and not external_tasks:
                print("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∏–ª–∏ –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return True
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º "–æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–µ" External Tasks (–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º)
            orphaned_tasks = []
            active_instance_ids = {instance.get('id') for instance in instances}
            
            for task in external_tasks:
                task_process_id = task.get('processInstanceId')
                if task_process_id not in active_instance_ids:
                    orphaned_tasks.append(task)
            
            cleaned_orphaned = 0
            if orphaned_tasks:
                print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ {len(orphaned_tasks)} –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö External Tasks...")
                for task in orphaned_tasks:
                    task_id = task.get('id')
                    if self.process_manager.delete_external_task(task_id):
                        cleaned_orphaned += 1
                        print(f"   ‚úÖ –û—á–∏—â–µ–Ω–∞ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∞—è –∑–∞–¥–∞—á–∞: {task_id}")
                    else:
                        print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É: {task_id}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã (External Tasks —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            stopped_count = 0
            if instances:
                print(f"\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ {len(instances)} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤...")
                for instance in instances:
                    instance_id = instance.get('id')
                    if self.process_manager.delete_process_instance(
                        instance_id, 
                        f"–¢–µ—Å—Ç–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ - {time.strftime('%Y-%m-%d %H:%M:%S')}"
                    ):
                        stopped_count += 1
                        print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä: {instance_id}")
                    else:
                        print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä: {instance_id}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ External Tasks, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            linked_tasks_count = len(external_tasks) - len(orphaned_tasks)
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è:")
            print(f"   –£–¥–∞–ª–µ–Ω–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {stopped_count} –∏–∑ {len(instances)}")
            print(f"   –û—á–∏—â–µ–Ω–æ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö External Tasks: {cleaned_orphaned} –∏–∑ {len(orphaned_tasks)}")
            print(f"   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ External Tasks: {linked_tasks_count} (–≤–º–µ—Å—Ç–µ —Å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏)")
            
            return stopped_count == len(instances) and cleaned_orphaned == len(orphaned_tasks)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            return False
    
    def step3_start_new_process(self) -> bool:
        """–≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        self.print_header(f"–≠–¢–ê–ü 3: –ó–ê–ü–£–°–ö –ù–û–í–û–ì–û –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê –ü–†–û–¶–ï–°–°–ê {self.process_key}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if not os.path.exists(self.config_file):
                print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config_file}")
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML
            print(f"üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ {self.config_file}...")
            config = load_config_from_yaml(self.config_file)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            config_process_key = config.get('process_key')
            if config_process_key != self.process_key:
                print(f"‚ö†Ô∏è –í –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–∫–∞–∑–∞–Ω –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å: '{config_process_key}', –æ–∂–∏–¥–∞–ª—Å—è '{self.process_key}'")
                print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
                self.process_key = config_process_key
            
            print(f"üìã –ü—Ä–æ—Ü–µ—Å—Å: {self.process_key}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            variables = config.get('variables', {})
            business_key = config.get('business_key')
            version = config.get('version')
            
            if variables:
                print(f"üìù –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ({len(variables)}):")
                for key, value in variables.items():
                    print(f"   {key}: {value}")
            
            if business_key:
                print(f"üîë Business Key: {business_key}")
            
            if version:
                print(f"üî¢ –í–µ—Ä—Å–∏—è: {version}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            if version:
                endpoint = f"process-definition/key/{self.process_key}/version/{version}"
                definition = self.process_starter._make_request("GET", endpoint)
            else:
                definition = self.process_starter.get_process_definition_by_key(self.process_key)
            
            if not definition:
                print(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å –∫–ª—é—á–æ–º '{self.process_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            print(f"üìã –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–¥–µ–Ω: {definition.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–≤–µ—Ä—Å–∏—è {definition.get('version')})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
            if definition.get('suspended'):
                print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å")
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
            instance = self.process_starter.start_process_by_key(
                self.process_key,
                variables=variables,
                business_key=business_key,
                version=version
            )
            
            if not instance:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å")
                return False
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            instance_id = instance.get('id')
            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"   ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: {instance_id}")
            print(f"   Business Key: {instance.get('businessKey', 'N/A')}")
            print(f"   Process Definition ID: {instance.get('definitionId')}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print(f"\nüîó –°—Å—ã–ª–∫–∏:")
            base_url = self.process_starter.base_url
            print(f"   Cockpit: {base_url}/camunda/app/cockpit/default/#/process-instance/{instance_id}")
            print(f"   Tasklist: {base_url}/camunda/app/tasklist/default/")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            return False
    
    def run_full_reset(self) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"""
        print("üîÑ –¢–ï–°–¢–û–í–´–ô –°–ë–†–û–° –ò –ü–ï–†–ï–ó–ê–ü–£–°–ö –ü–†–û–¶–ï–°–°–ê")
        print(f"–ü—Ä–æ—Ü–µ—Å—Å: {self.process_key}")
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.config_file}")
        print("=" * 80)
        
        success_steps = 0
        total_steps = 3
        
        # –≠—Ç–∞–ø 1: –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π
        if self.step1_clear_rabbitmq_queues():
            success_steps += 1
        else:
            print("‚ùå –≠—Ç–∞–ø 1 –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
        time.sleep(2)
        
        # –≠—Ç–∞–ø 2: –£–¥–∞–ª–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        if self.step2_delete_process_instances():
            success_steps += 1
        else:
            print("‚ùå –≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        time.sleep(2)
        
        # –≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        if self.step3_start_new_process():
            success_steps += 1
        else:
            print("‚ùå –≠—Ç–∞–ø 3 –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.print_header("–ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
        
        if success_steps == total_steps:
            print("üéâ –í–°–ï –≠–¢–ê–ü–´ –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–æ –∏ –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        else:
            print(f"‚ö†Ô∏è –í–´–ü–û–õ–ù–ï–ù–û {success_steps} –∏–∑ {total_steps} –≠–¢–ê–ü–û–í")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")
        
        print(f"\nüí° –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print(f"   python universal-worker.py/tools/camunda_processes.py --external-tasks")
        print(f"   python universal-worker.py/tools/check_queues.py")
        
        return success_steps == total_steps


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–ï–°–¢–û–í–´–ô –°–ö–†–ò–ü–¢ –°–ë–†–û–°–ê –ü–†–û–¶–ï–°–°–ê")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if not os.path.exists("universal-worker.py"):
            print("‚ùå –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
            print("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Ñ–∞–π–ª–æ–º exchanger.py")
            sys.exit(1)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
        tester = ProcessResetTester()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!")
        print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        print("1. –û—á–∏—Å—Ç–∏—Ç –í–°–ï –æ—á–µ—Ä–µ–¥–∏ RabbitMQ")
        print("2. –£–¥–∞–ª–∏—Ç –í–°–ï —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ Process_1d4oa6g46")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞")
        print("\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è): ").strip()
        
        if response != 'YES':
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            sys.exit(0)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
        success = tester.run_full_reset()
        
        sys.exit(0 if success else 1)
        
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main() 