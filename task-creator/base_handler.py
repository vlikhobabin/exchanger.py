#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import time
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional
from loguru import logger
from rabbitmq_publisher import RabbitMQPublisher


class BaseMessageHandler(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, system_name: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        
        Args:
            system_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Bitrix24", "OpenProject")
        """
        self.system_name = system_name
        
        # RabbitMQ Publisher –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.publisher = RabbitMQPublisher()
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_messages": 0,
            "successful_tasks": 0,
            "failed_tasks": 0,
            "start_time": time.time(),
            "last_message_time": None,
            "sent_to_success_queue": 0,
            "failed_to_send_success": 0
        }
        
        logger.info(f"{self.system_name} Handler: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
    
    def process_message(self, message_data: Dict[str, Any], properties: Any) -> bool:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message_data: –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ RabbitMQ
            properties: –°–≤–æ–π—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è RabbitMQ
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, False –∏–Ω–∞—á–µ
        """
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats["total_messages"] += 1
        self.stats["last_message_time"] = time.time()
        
        task_id = message_data.get('task_id', 'unknown')
        topic = message_data.get('topic', 'unknown')
        
        logger.info(f"{self.system_name} Handler: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è task_id={task_id}, topic={topic}")
        
        try:
            # –í—ã–∑–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            result = self._process_message_impl(message_data, properties)
            
            if result:
                self.stats["successful_tasks"] += 1
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–∏—Å—Ç–µ–º—ã
                response_data = self._get_response_data(result, message_data)
                
                if response_data:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å
                    original_queue = self._get_original_queue_name()
                    success_sent = self._send_success_message(message_data, response_data, original_queue)
                    
                    if success_sent:
                        self.stats["sent_to_success_queue"] += 1
                    else:
                        self.stats["failed_to_send_success"] += 1
                        logger.warning(f"{self.system_name} Handler: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                return True
            else:
                self.stats["failed_tasks"] += 1
                return False
                
        except Exception as e:
            self.stats["failed_tasks"] += 1
            logger.error(f"{self.system_name} Handler: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    @abstractmethod
    def _process_message_impl(self, message_data: Dict[str, Any], properties: Any) -> Optional[Dict[str, Any]]:
        """
        –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
        
        Args:
            message_data: –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ RabbitMQ
            properties: –°–≤–æ–π—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è RabbitMQ
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–≤–µ—Ç –æ—Ç API) –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        pass
    
    @abstractmethod
    def _get_original_queue_name(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏—Å—Ö–æ–¥–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        
        Returns:
            –ò–º—è –æ—á–µ—Ä–µ–¥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "bitrix24.queue")
        """
        pass
    
    def _get_response_data(self, result: Dict[str, Any], original_message: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ _process_message_impl
            original_message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ None
        """
        # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –µ—Å—Ç—å
        return result
    
    def _send_success_message(self, original_message: Dict[str, Any], 
                             response_data: Dict[str, Any], original_queue: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤ –æ—á–µ—Ä–µ–¥—å sent messages
        
        Args:
            original_message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ RabbitMQ
            response_data: –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–∏—Å—Ç–µ–º—ã
            original_queue: –ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if not self.publisher.is_connected():
                if not self.publisher.connect():
                    logger.error(f"{self.system_name} Handler: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RabbitMQ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    return False
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ publisher
            success = self.publisher.publish_success_message(
                original_queue=original_queue,
                original_message=original_message, 
                response_data=response_data
            )
            
            if success:
                task_id = original_message.get('task_id', 'unknown')
                logger.info(f"{self.system_name} Handler: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {task_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            return success
            
        except Exception as e:
            logger.error(f"{self.system_name} Handler: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        uptime = time.time() - self.stats["start_time"]
        
        return {
            "system": self.system_name,
            "uptime_seconds": uptime,
            "total_messages": self.stats["total_messages"],
            "successful_tasks": self.stats["successful_tasks"],
            "failed_tasks": self.stats["failed_tasks"],
            "sent_to_success_queue": self.stats["sent_to_success_queue"],
            "failed_to_send_success": self.stats["failed_to_send_success"],
            "success_rate": (
                self.stats["successful_tasks"] / self.stats["total_messages"] * 100
                if self.stats["total_messages"] > 0 else 0
            ),
            "success_queue_rate": (
                self.stats["sent_to_success_queue"] / self.stats["successful_tasks"] * 100
                if self.stats["successful_tasks"] > 0 else 0
            ),
            "last_message_time": self.stats["last_message_time"],
            "publisher_stats": self.publisher.get_stats()
        }
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
        try:
            if hasattr(self, 'publisher') and self.publisher:
                self.publisher.disconnect()
                logger.info(f"{self.system_name} Handler: Publisher –æ—Ç–∫–ª—é—á–µ–Ω –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤")
        except Exception as e:
            logger.error(f"{self.system_name} Handler: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")


class StubHandler(BaseMessageHandler):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–≥–ª—É—à–µ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    def __init__(self, system_name: str, queue_name: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–ª—É—à–∫–∏
        
        Args:
            system_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            queue_name: –ò–º—è –æ—á–µ—Ä–µ–¥–∏
        """
        super().__init__(system_name)
        self.queue_name = queue_name
        logger.warning(f"üöß {self.system_name} Handler: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ó–ê–ì–õ–£–®–ö–ê –º–æ–¥—É–ª—è {self.system_name}")
    
    def _process_message_impl(self, message_data: Dict[str, Any], properties: Any) -> Optional[Dict[str, Any]]:
        """–ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        task_id = message_data.get('task_id', 'unknown')
        topic = message_data.get('topic', 'unknown')
        
        logger.warning(
            f"üöß {self.system_name} Handler (–ó–ê–ì–õ–£–®–ö–ê): "
            f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ task_id={task_id}, topic={topic}. "
            f"–ú–æ–¥—É–ª—å {self.system_name} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω - —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞!"
        )
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã
        mock_response = {
            "result": {
                "id": f"mock-{self.system_name.lower()}-{task_id}",
                "status": "processed"
            },
            "success": True
        }
        
        return mock_response
    
    def _get_original_queue_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∑–∞–≥–ª—É—à–∫–∏"""
        return self.queue_name
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≥–ª—É—à–∫–∏"""
        stats = super().get_stats()
        stats["handler_type"] = "stub"
        return stats 